C51 COMPILER V8.08   MAIN                                                                  08/21/2020 14:09:46 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "DP80390CPU.H"
   2          #include "common.h"
   3          #include "register.h"
   4          #include "intrins.h"
   5          
   6          //#define FIRE_ALARM_VALUE   0x40
   7          //#define FIRE_ALARM_VALUE   10
   8          //#define QUIT_ALARM_VALUE   (FIRE_ALARM_VALUE-10)
   9          #define SLEF_CHECK_VALUE   0x00
  10          #define SLIENCDE_VALUE     0xFF
  11          
  12          #define SLIENCDE_TIME      50           //静音时间8*50/60=6.667ｓ
  13          #define DETECT_TIME1       1            //8s
  14          #define DETECT_TIME2       1            //2s
  15          #define DETECT_TIME3       2            //1s
  16          #define BZ_TIME                    1            //500ms
  17          #define LED_TIME_NORMAL    8            //正常64ｓ闪一次
  18          #define LED_TIME_SLIENCDE  1            //静音模式下8ｓ闪一次
  19          #define LVD_TIME               5                //低压报警时间4０ｓ
  20          
  21          
  22          #define LED_ON()        PCREG &= ~0x08
  23          #define LED_OFF()       PCREG |= 0x08
  24          
  25          
  26          //unsigned int code BZ_Freq[]={0x560,0x540,0x500,0x300,0x1E0};
  27          //unsigned int code BZ_Freq[]={0x4C0,0x4A0,0x400,0x380,0x270};  //50%占空比最响
  28          //unsigned int code BZ_Freq[]={0x09,0x08,0x07,0x06,0x05};
  29          unsigned int code BZ_Freq[]={0x495,0x490,0x480,0x460,0x430,0x3c0,0x320,0x250};  //50%占空比最响
  30          unsigned char code IRED_ADJ[]=
  31          {
  32          0x4f,0x4e,0x0f,0x0e,
  33          0x4d,0x4c,0x0d,0x0c,
  34          0x4b,0x4a,0x0b,0x0a,
  35          0x49,0x48,0x09,0x08,
  36          0x47,0x46,0x07,0x06,
  37          0x45,0x44,0x05,0x04,
  38          0x43,0x42,0x03,0x02,
  39          };               //发射电流由大变小
  40          unsigned char Smoke_Value;
  41          unsigned char Dark_Value;
  42          unsigned char timer_flag;
  43          unsigned char bz_timer;
  44          unsigned char bz_step;
  45          unsigned char alarm_flag;
  46          unsigned char alarm_value;
  47          unsigned char detect_time;
  48          unsigned char detect_count;
  49          unsigned char sleep_flag;
  50          unsigned char key_flag;
  51          unsigned char rxd_flag;
  52          unsigned char silince_flag;
  53          unsigned char led_falg;
  54          unsigned char led_timer;
  55          unsigned int  silince_time;
C51 COMPILER V8.08   MAIN                                                                  08/21/2020 14:09:46 PAGE 2   

  56          unsigned char self_check_flag;
  57          unsigned char lvd_flag;
  58          unsigned char lvd_time;
  59          unsigned char FIRE_ALARM_VALUE;
  60          unsigned char QUIT_ALARM_VALUE;
  61          unsigned char delta_value;
  62          unsigned char comm_step;
  63          unsigned char Battery_Value_H;
  64          unsigned char Battery_Value_L;
  65          unsigned int voltage_bak;
  66          unsigned char adjust_flag;
  67          unsigned char silince_time_bak;
  68          unsigned char IRED_Ptr;
  69          unsigned char Charge_Flag;
  70          unsigned char uartr_flag,uartadd,uartdate;
  71          unsigned char ADC_VALUE1;
  72          unsigned char ADC_VALUE2;
  73          
  74          
  75          
  76          void delay_20us(unsigned char N);
  77          void Smoke_Detect();
  78          void BZ_Process();
  79          void Key_Process();
  80          void Other_Process();
  81          void Sleep();
  82          void MCU_Init();
  83          void uart();
  84          void ser_int();
  85          
  86          
  87          void main()
  88          {
  89   1              MCU_Init();
  90   1              ser_int();
  91   1      
  92   1      
  93   1              timer_flag = 0;
  94   1              bz_timer = 0;
  95   1              bz_step = 0;
  96   1              alarm_flag = 0;
  97   1              detect_time = DETECT_TIME1;             //8s
  98   1              detect_count = 0;
  99   1              sleep_flag = 1;
 100   1              key_flag = 0;
 101   1              silince_time = 0;
 102   1              silince_time_bak = 0;
 103   1              silince_flag = 0;
 104   1              led_falg = 0;
 105   1              self_check_flag = 0;
 106   1              lvd_flag = 0;
 107   1              lvd_time = 0;
 108   1              comm_step = 0;
 109   1              voltage_bak = 0;
 110   1              IRED_Ptr = 14;          //设置指针初始位置
 111   1              Charge_Flag = 0;
 112   1              uartr_flag = 0;
 113   1              while(1)
 114   1              {
 115   2                      WDCON |= 0x10;
 116   2                      uart();
 117   2                        
C51 COMPILER V8.08   MAIN                                                                  08/21/2020 14:09:46 PAGE 3   

 118   2              }       
 119   1      
 120   1      
 121   1      }
 122          
 123          void MCU_Init()
 124          {
 125   1              unsigned char i,temp[2];
 126   1              SYS_REG_MASK = 0xA5;
 127   1              SYS_REG1 = 0x58;         //打开看门狗使能，打开低压复位，打开高速振荡器
 128   1              SYS_REG3 = 0x10;         //     
 129   1      //      SYS_REG2 = 0xC2;         //高速时钟4分频，空闲模式              
 130   1      //      SYS_REG4 = 0x0c;         //PWM用高速时钟4分频
 131   1              SYS_REG2 = 0x03;
 132   1              SYS_REG4 = 0x01;         //PWM用高速时钟
 133   1              LXT_START = 0X00;
 134   1      
 135   1              IE = 0x85;                                      //全局中断，int1(),int0()中断使能
 136   1              IP = 0x01;                                              //int0优先
 137   1              TCON = 0x05;                                    //int0,int1为沿触发     
 138   1                
 139   1              
 140   1              BANDGAP_TEMP = 0x05;
 141   1              LDO2_CTRL = 0X03;
 142   1      
 143   1              
 144   1              PADIR = 0x01;
 145   1              PAPU = 0XFe;
 146   1              PAREG = 0x00;
 147   1      
 148   1              PCDIR = 0x08;    //红色led等pc3
 149   1              PCPU = 0XF7;
 150   1              PCREG = 0x08;
 151   1              ADPCR = 0X30;
 152   1      
 153   1      
 154   1              PBDIR = 0x08;                   //pb1输出低电平
 155   1              PBPU = ~0x08;                   //pb1不上拉
 156   1              PBREG = 0x00;
 157   1      
 158   1      
 159   1              PWM_PERIOD0L = 0x98;            //pwm周期为3.4KHz   时钟４Ｍ
 160   1              PWM_PERIOD0H = 0x04;
 161   1      //      PWM_PERIOD0L = 0xe2;            //pwm周期为3.2KHz   时钟４Ｍ
 162   1      //      PWM_PERIOD0H = 0x04;                                                       
 163   1              DZ_CTRL = 0x05;                 //pwm0互补输出,全N模式
 164   1              PWM_CTRL = 0x40;                //pwm0装载，连续输出，初始电平为0
 165   1                
 166   1      
 167   1              WAKEUP_EDGE_REG = 0x42;         //下降沿唤醒
 168   1      
 169   1      
 170   1              IRED_CTRL = 0x09;               //设置发射电流为125ｍA
 171   1              MISC = 0x80;                    //pb6不复用IRED，pa0复用TXD，pa1复用RXD  
 172   1      
 173   1      /******************uart*********************/
 174   1      /*      MISC |= 0x80;   //复用uart口
 175   1              SCON =  0X40;   //方式1,溢出率／３２
 176   1              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 177   1              TMOD = 0x00;    //不分频，４Ｍ
 178   1              TH1 =  0X00;
 179   1              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
C51 COMPILER V8.08   MAIN                                                                  08/21/2020 14:09:46 PAGE 4   

 180   1              TTCON = 0x2a;      */
 181   1      /*******************************************/
 182   1      
 183   1      
 184   1              OPA1C0 = 0x23;          //积分增益为８倍
 185   1              OPA1C1 = 0x0c;          //OPA1连接红外接收管
 186   1              OPA1MODE = 0x04;        //设置成开环    
 187   1      
 188   1              LVDC = 0x05;            //2.5V
 189   1              
 190   1      //      TBC = 0xa6;                //TBC开启2s定时
 191   1      //      TBC = 0x08;                //TBC0开启4s定时,TBC1关闭
 192   1      //      TBC = 0X40;
 193   1      //      TBC = 0x84;                //TBC开启0.5s定时
 194   1      //      INTML = 0xf7;      //TBC中断使能
 195   1      //      INTSEL0L = 0x08;   //TBC中断从int0进入  */ 
 196   1               
 197   1              TMR3C = 0X58;           //timer3使用低速时钟,并使能
 198   1              TMR3L = 0X00;
 199   1              TMR3H = 0X06;           //0.125ms*64000=8s
 200   1      //      INTML = 0XDF;
 201   1              INTMH = 0x0D;      //uart中断使能
 202   1              INTSEL0L = 0X20;         
 203   1      
 204   1              WDCNTM = 0x38;
 205   1              WDCNTH = 0x01;          //8K时钟，10s钟
 206   1      //      WDCNTM = 0x38;
 207   1      //      WDCNTH = 0x00;
 208   1              WDCON = 0x28;           //开启看门狗复位功能
 209   1              WDCON |= 0x10;
 210   1              
 211   1              ADPCR |= 0x08;       //PB6为AN3输入
 212   1              BANDGAP_TEMP |= 0x02; //打开温度传感器
 213   1              LDOC=0X66;      //LDO 2.4v      
 214   1      
 215   1      
 216   1              E2P_ADDRH=0x00; //起始地址
 217   1              E2P_ADDRL=0x00;
 218   1              E2P_CTRL = 0x10;
 219   1              for(i=0;i<2;i++)
 220   1              {
 221   2                 if(i<1)
 222   2                         E2P_CTRL=0x13;       //启动读
 223   2                 else
 224   2                         E2P_CTRL=0x11;       //启动度
 225   2                 while(!(E2P_FLAG&0x01));//判断是否写完
 226   2                 temp[i]=E2P_DATA;
 227   2              } 
 228   1              if(temp[0]!=(~temp[1]))
 229   1              {
 230   2                      FIRE_ALARM_VALUE = 0x60;
 231   2                      alarm_value = FIRE_ALARM_VALUE;
 232   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;               
 233   2              }
 234   1              else                                       //上电读取报警阈值
 235   1              {
 236   2                      FIRE_ALARM_VALUE = temp[0];
 237   2                      alarm_value = FIRE_ALARM_VALUE;
 238   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;                         
 239   2              }                                         
 240   1              alarm_value = 0xc0;
 241   1              FIRE_ALARM_VALUE = 0xc0;
C51 COMPILER V8.08   MAIN                                                                  08/21/2020 14:09:46 PAGE 5   

 242   1      
 243   1      
 244   1              delay_20us(250);
 245   1              delay_20us(250);
 246   1              delay_20us(250);
 247   1              delay_20us(250);
 248   1              delay_20us(250);
 249   1              delay_20us(250);
 250   1              delay_20us(250);
 251   1              delay_20us(250);
 252   1              delay_20us(250);
 253   1              delay_20us(250);
 254   1              delay_20us(250);
 255   1              delay_20us(250);   
 256   1              
 257   1      }
 258          
 259          
 260          void delay_20us(unsigned char N)
 261          {
 262   1          unsigned char i;
 263   1          while(N--)     //6cycle
 264   1          {
 265   2              for(i=5;i>0;i--);
 266   2          }
 267   1      
 268   1      }
 269          
 270          void ser_int()
 271          {       
 272   1              TH1 = 0x00;
 273   1              TL1 = 0x33;               //2400波特率
 274   1              TTCON |= 0x02;    //T1定时周期配置有效
 275   1              TMOD = 0x00;      //T1预分频系数1
 276   1              TTCON = 0x28;     //T1使能，T1计数使能  
 277   1              TTMOD2 = 0x00;    //T1产生波特率，16位计数
 278   1              SCON = 0x50;      //串口允许接收,串口工作模式1
 279   1              SMOD = 0x00;
 280   1      }
 281          
 282          void uart()
 283          {
 284   1              if(uartr_flag == 2)
 285   1              {
 286   2               
 287   2              ADCR = 0x2A;          //打开ADC电源，选择电源做基准,选择内部温度检测
 288   2              delay_20us(5);
 289   2              ADCR |= 0x80;
 290   2              delay_20us(1);
 291   2              ADCR &= ~0x80;            //启动ADC检测
 292   2              delay_20us(1);
 293   2              while(ADCR&0x40);         //等待ADC检测结束
 294   2              delay_20us(1);
 295   2              IE = 0X00;
 296   2              delay_20us(1);
 297   2              ADC_VALUE1 = ADRH;        //取ADC高8位
 298   2              delay_20us(1);
 299   2              ADC_VALUE2 = ADRL>>4;   //取ADC低4位
 300   2              delay_20us(1);
 301   2              IE = 0X85;
 302   2              ADCR = 0x00;
 303   2      
C51 COMPILER V8.08   MAIN                                                                  08/21/2020 14:09:46 PAGE 6   

 304   2      
 305   2                      if(uartadd==0x68)
 306   2                      {
 307   3                              if(uartdate==0x81)
 308   3                              {
 309   4                                      delay_20us(1);
 310   4                                      SBUF = ADC_VALUE1;
 311   4                                      uartr_flag = 3;
 312   4                              }
 313   3                              else
 314   3                              {       
 315   4                                      uartr_flag = 0;
 316   4                              }
 317   3                      }
 318   2                      else
 319   2                      {       
 320   3                              uartr_flag = 0;
 321   3                      }               
 322   2              }
 323   1      }
 324          
 325          
 326          
 327          void ser_uart() interrupt 2
 328          {
 329   1          //LED_ON()  ;
 330   1              if(SCON&0x01)
 331   1              {       
 332   2                 
 333   2                      SCON &= 0xfe;
 334   2                      uartdate = SBUF;
 335   2                      if(uartr_flag == 0)
 336   2                      {                       
 337   3                              uartadd = uartdate;
 338   3                              uartr_flag++;
 339   3                      }
 340   2                      else if(uartr_flag == 1)
 341   2                      {       
 342   3                              uartr_flag++;
 343   3                      }
 344   2              }
 345   1              else if(SCON&0x02)
 346   1              {               
 347   2                      SCON &= 0xfd;
 348   2                      if(uartr_flag == 3)
 349   2                      {
 350   3                              SBUF = ADC_VALUE2;
 351   3                              uartr_flag = 0;
 352   3                      }                                       
 353   2              }
 354   1      }
 355          
 356          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    630    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     37       2
   IDATA SIZE       =   ----    ----
C51 COMPILER V8.08   MAIN                                                                  08/21/2020 14:09:46 PAGE 7   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
