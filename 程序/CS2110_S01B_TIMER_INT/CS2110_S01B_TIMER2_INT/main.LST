C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "DP80390CPU.H"
   2          #include "common.h"
   3          #include "register.h"
   4          #include "intrins.h"
   5          
   6          //#define FIRE_ALARM_VALUE   0x40
   7          //#define FIRE_ALARM_VALUE   10
   8          //#define QUIT_ALARM_VALUE   (FIRE_ALARM_VALUE-10)
   9          #define SLEF_CHECK_VALUE   0x00
  10          #define SLIENCDE_VALUE     0xFF
  11          
  12          #define SLIENCDE_TIME      50           //静音时间8*50/60=6.667ｓ
  13          #define DETECT_TIME1       1            //8s
  14          #define DETECT_TIME2       1            //2s
  15          #define DETECT_TIME3       2            //1s
  16          #define BZ_TIME                    1            //500ms
  17          #define LED_TIME_NORMAL    8            //正常64ｓ闪一次
  18          #define LED_TIME_SLIENCDE  1            //静音模式下8ｓ闪一次
  19          #define LVD_TIME               5                //低压报警时间4０ｓ
  20          
  21          
  22          #define LED_ON()        PCREG &= ~0x08
  23          #define LED_OFF()       PCREG |= 0x08
  24          
  25          
  26          //unsigned int code BZ_Freq[]={0x560,0x540,0x500,0x300,0x1E0};
  27          //unsigned int code BZ_Freq[]={0x4C0,0x4A0,0x400,0x380,0x270};  //50%占空比最响
  28          //unsigned int code BZ_Freq[]={0x09,0x08,0x07,0x06,0x05};
  29          unsigned int code BZ_Freq[]={0x495,0x490,0x480,0x460,0x430,0x3c0,0x320,0x250};  //50%占空比最响
  30          unsigned char code IRED_ADJ[]=
  31          {
  32          0x4f,0x4e,0x0f,0x0e,
  33          0x4d,0x4c,0x0d,0x0c,
  34          0x4b,0x4a,0x0b,0x0a,
  35          0x49,0x48,0x09,0x08,
  36          0x47,0x46,0x07,0x06,
  37          0x45,0x44,0x05,0x04,
  38          0x43,0x42,0x03,0x02,
  39          };               //发射电流由大变小
  40          unsigned char Smoke_Value;
  41          unsigned char Dark_Value;
  42          unsigned char timer_flag;
  43          unsigned char bz_timer;
  44          unsigned char bz_step;
  45          unsigned char alarm_flag;
  46          unsigned char alarm_value;
  47          unsigned char detect_time;
  48          unsigned char detect_count;
  49          unsigned char sleep_flag;
  50          unsigned char key_flag;
  51          unsigned char rxd_flag;
  52          unsigned char silince_flag;
  53          unsigned char led_falg;
  54          unsigned char led_timer;
  55          unsigned int  silince_time;
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 2   

  56          unsigned char self_check_flag;
  57          unsigned char lvd_flag;
  58          unsigned char lvd_time;
  59          unsigned char FIRE_ALARM_VALUE;
  60          unsigned char QUIT_ALARM_VALUE;
  61          unsigned char delta_value;
  62          unsigned char comm_step;
  63          unsigned char Battery_Value_H;
  64          unsigned char Battery_Value_L;
  65          unsigned int voltage_bak;
  66          unsigned char adjust_flag;
  67          unsigned char silince_time_bak;
  68          unsigned char IRED_Ptr;
  69          unsigned char Charge_Flag;
  70          
  71          
  72          
  73          void delay_20us(unsigned char N);
  74          void Smoke_Detect();
  75          void BZ_Process();
  76          void Key_Process();
  77          void Other_Process();
  78          void Sleep();
  79          void MCU_Init();
  80          
  81          void main()
  82          {
  83   1              MCU_Init();
  84   1      
  85   1              timer_flag = 0;
  86   1              bz_timer = 0;
  87   1              bz_step = 0;
  88   1              alarm_flag = 0;
  89   1              detect_time = DETECT_TIME1;             //8s
  90   1              detect_count = 0;
  91   1              sleep_flag = 1;
  92   1              key_flag = 0;
  93   1              silince_time = 0;
  94   1              silince_time_bak = 0;
  95   1              silince_flag = 0;
  96   1              led_falg = 0;
  97   1              self_check_flag = 0;
  98   1              lvd_flag = 0;
  99   1              lvd_time = 0;
 100   1              comm_step = 0;
 101   1              voltage_bak = 0;
 102   1              IRED_Ptr = 14;          //设置指针初始位置
 103   1              Charge_Flag = 0;
 104   1              while(1)
 105   1              {
 106   2                  //PAREG=~PAREG;
 107   2                      //LED_ON();
 108   2                      WDCON |= 0x10;
 109   2                      //LDO2_CTRL = 0x00;
 110   2              //      Key_Process();
 111   2                      //Smoke_Detect();
 112   2              //BZ_Process();
 113   2                 // Other_Process();
 114   2                // Sleep();
 115   2              
 116   2                        
 117   2              }       
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 3   

 118   1      
 119   1      
 120   1      }
 121          
 122          void MCU_Init()
 123          {
 124   1              unsigned char i,temp[2];
 125   1              SYS_REG_MASK = 0xA5;
 126   1              SYS_REG1 = 0x18;         //关闭看门狗，打开低压复位，打开高速振荡器
 127   1              SYS_REG3 = 0x10;         //     
 128   1      //      SYS_REG2 = 0xC2;         //高速时钟4分频，空闲模式              
 129   1      //      SYS_REG4 = 0x0c;         //PWM用高速时钟4分频
 130   1              SYS_REG2 = 0x03;
 131   1              SYS_REG4 = 0x01;         //PWM用高速时钟
 132   1              LXT_START = 0X00;
 133   1      
 134   1              IE = 0x85;                                      //全局中断，int1(),int0()中断使能
 135   1              IP = 0x01;                                              //int0优先
 136   1              TCON = 0x05;                                    //int0,int1为沿触发     
 137   1                
 138   1              
 139   1      
 140   1              BANDGAP_TEMP = 0x05;
 141   1              LDO2_CTRL = 0X03;
 142   1      
 143   1              
 144   1              PADIR = 0xFF;
 145   1              PAPU = 0X00;
 146   1              PAREG = 0x00;
 147   1      
 148   1              PCDIR = 0x08;    //红色led等pc3
 149   1              PCPU = 0XF7;
 150   1              PCREG = 0x08;
 151   1              ADPCR = 0X30;
 152   1      
 153   1      
 154   1      
 155   1              PBDIR = 0x08;                   //pb1输出低电平
 156   1              PBPU = ~0x08;                   //pb1不上拉
 157   1              PBREG = 0x00;
 158   1      /*      PWM_PERIOD0L = 0x98;            //pwm周期为3.4KHz   时钟４Ｍ
 159   1              PWM_PERIOD0H = 0x04;
 160   1              //PWM_PERIOD0L = 0xe2;          //pwm周期为3.2KHz   时钟４Ｍ
 161   1      //      PWM_PERIOD0H = 0x04;                                                       
 162   1              DZ_CTRL = 0x05;                 //pwm0互补输出,全N模式
 163   1              PWM_CTRL = 0x40;                //pwm0装载，连续输出，初始电平为0  
 164   1      
 165   1              WAKEUP_EDGE_REG = 0x42;         //下降沿唤醒
 166   1      
 167   1      
 168   1              IRED_CTRL = 0x09;               //设置发射电流为125ｍA
 169   1              MISC = 0x40;                    //pb6复用IRED  
 170   1      
 171   1      /******************uart*********************/
 172   1      /*      MISC |= 0x80;   //复用uart口
 173   1              SCON =  0X40;   //方式1,溢出率／３２
 174   1              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 175   1              TMOD = 0x00;    //不分频，４Ｍ
 176   1              TH1 =  0X00;
 177   1              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 178   1              TTCON = 0x2a;      */
 179   1      /*******************************************/
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 4   

 180   1      
 181   1      
 182   1              OPA1C0 = 0x23;          //积分增益为８倍
 183   1              OPA1C1 = 0x0c;          //OPA1连接红外接收管
 184   1              OPA1MODE = 0x04;        //设置成开环    
 185   1      
 186   1              LVDC = 0x05;            //2.5V
 187   1              
 188   1      //      TBC = 0xa6;                //TBC开启2s定时
 189   1      //      TBC = 0x08;                //TBC0开启4s定时,TBC1关闭
 190   1      //      TBC = 0X40;
 191   1      //      TBC = 0x84;                //TBC开启0.5s定时
 192   1      //      INTML = 0xf7;      //TBC中断使能
 193   1      //      INTSEL0L = 0x08;   //TBC中断从int0进入  */ 
 194   1               
 195   1         TMR2C0 = 0XA7;               //timer2使用低速时钟,并使能
 196   1          TMR2 =0XE0;
 197   1              INTML = 0XDF;
 198   1              INTSEL0L = 0X20;         
 199   1      
 200   1                              
 201   1              WDCNTM = 0x38;
 202   1              WDCNTH = 0x00;
 203   1              WDCON = 0x28;           //开启看门狗复位功能
 204   1              WDCON |= 0x10;     
 205   1              
 206   1      /*       WDCON |= 0x24;  //开启看门狗计数中断
 207   1               WDCNTM = 0x11;
 208   1               WDCNTH = 0x11;
 209   1               INTMH &=~0X01;
 210   1              INTSEL0H = 0X01;  */
 211   1      
 212   1      /*       INTML&=~0X02;  //打开ADC中断
 213   1               INTSEL0L=0x02;  //ADC中断从IN0输出
 214   1               LDOC = 0x46;
 215   1               LDOC |= 0x20;
 216   1               ADCR = 0x36;           //打开ADC电源，选择内部2.4V为基准
 217   1               ADCR |= 0x80;
 218   1               ADCR &= ~0x80;  */
 219   1      
 220   1      
 221   1              E2P_ADDRH=0x00; //起始地址
 222   1              E2P_ADDRL=0x00;
 223   1              E2P_CTRL = 0x10;
 224   1              for(i=0;i<2;i++)
 225   1              {
 226   2                 if(i<1)
 227   2                         E2P_CTRL=0x13;       //启动读
 228   2                 else
 229   2                         E2P_CTRL=0x11;       //启动度
 230   2                 while(!(E2P_FLAG&0x01));//判断是否写完
 231   2                 temp[i]=E2P_DATA;
 232   2              } 
 233   1              if(temp[0]!=(~temp[1]))
 234   1              {
 235   2                      FIRE_ALARM_VALUE = 0x60;
 236   2                      alarm_value = FIRE_ALARM_VALUE;
 237   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;               
 238   2              }
 239   1              else                                       //上电读取报警阈值
 240   1              {
 241   2                      FIRE_ALARM_VALUE = temp[0];
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 5   

 242   2                      alarm_value = FIRE_ALARM_VALUE;
 243   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;                         
 244   2              }                                         
 245   1              alarm_value = 0xc0;
 246   1              FIRE_ALARM_VALUE = 0xc0;
 247   1      
 248   1      
 249   1              delay_20us(250);
 250   1              delay_20us(250);
 251   1              delay_20us(250);
 252   1              delay_20us(250);
 253   1              delay_20us(250);
 254   1              delay_20us(250);
 255   1              delay_20us(250);
 256   1              delay_20us(250);
 257   1              delay_20us(250);
 258   1              delay_20us(250);
 259   1              delay_20us(250);
 260   1              delay_20us(250);   
 261   1              
 262   1      }
 263          
 264          
 265          void Smoke_Detect()
 266          {        
 267   1         
 268   1              unsigned char i,temp[2];
 269   1              unsigned int vol;
 270   1              if(timer_flag>=detect_time)                               //8s检测一次
 271   1              {
 272   2                      timer_flag = 0;
 273   2                      WDCON |= 0x10;
 274   2                      BANDGAP_TEMP = 0x05;
 275   2                      LDO2_CTRL = 0x03;
 276   2      
 277   2      /*              SYS_REG2 = 0x02;        //切换成低频
 278   2                      _nop_();
 279   2                      _nop_();
 280   2                      _nop_();
 281   2                      _nop_();                
 282   2                      _nop_();
 283   2                      _nop_();
 284   2                      _nop_();
 285   2                      _nop_();
 286   2                      _nop_();
 287   2      
 288   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 289   2                      OPA1C1 |= 0x01;         //开启运放              
 290   2                      LDOC = 0x46;
 291   2                      _nop_();
 292   2                      _nop_();
 293   2                      _nop_();
 294   2                      _nop_();
 295   2      
 296   2                      SYS_REG2 = 0xc2;        //切换成高频
 297   2                      _nop_();
 298   2                      _nop_();
 299   2                      _nop_();
 300   2                      _nop_();
 301   2      //              delay_20us(100);                //运放稳定时间
 302   2      */
 303   2                      TMR3C &= ~0x08;         //关闭计数器
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 6   

 304   2                      delay_20us(20);
 305   2                      TMR3L = 0xc0;           //休眠8ms
 306   2                      TMR3H = 0xff; 
 307   2                      TMR3C |= 0x08;          //开启计数器
 308   2                      Charge_Flag = 1;
 309   2                      PCON |= 0X02;   //mcu_stop,给电容充电                   
 310   2                      _nop_();
 311   2                      _nop_();
 312   2                      _nop_();
 313   2                      _nop_();
 314   2                      TMR3C &= ~0x08;         //关闭计数器,到下面检测完成再开启
 315   2                      LDO2_CTRL = 0x00;//关闭LDO2
 316   2                      Charge_Flag = 0;
 317   2                                
 318   2      
 319   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 320   2                      OPA1C1 |= 0x01;         //开启运放              
 321   2                      LDOC = 0x46;
 322   2                      delay_20us(20);         //运放稳定时间
 323   2      /******************************电源电压检测*/
 324   2                      LDOC |= 0x20;           //打开LDO到ADC基准
 325   2                      LCDC |= 0X70;
 326   2                      LDOC |= 0X10;
 327   2                      ADCR = 0x3b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 328   2      //              ADCR = 0x2b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 329   2                      for(i=0;i<5;i++)
 330   2                      {
 331   3                              ADCR |= 0x80;
 332   3                              ADCR &= ~0x80;          //启动ADC检测
 333   3                              while(ADCR&0x40);       //等待ADC检测结束
 334   3                      }
 335   2                      Battery_Value_H = ADRH;
 336   2                      Battery_Value_L = ADRL;
 337   2                      ADCR = 0x00;
 338   2                      LDOC &= ~0x20;          
 339   2                      LDOC &= ~0X10;
 340   2                      LCDC &= ~0X70;
 341   2      
 342   2              //      4096*2.4*2;//2560为3V,每85个字为0.1V
 343   2                      vol = (((unsigned int)Battery_Value_H)<<4);
 344   2                      vol += (unsigned int)Battery_Value_L>>4;
 345   2      
 346   2      
 347   2       
 348   2                      if(voltage_bak==0x00)   //首次检测
 349   2                      {
 350   3                              adjust_flag = 1;
 351   3                              voltage_bak = vol;      //保存上一次校准时的电压
 352   3                      }
 353   2                      else
 354   2                      {
 355   3                              if((vol>=(voltage_bak+8))||(vol<=(voltage_bak-8)))      //迟滞10mv
 356   3                              {
 357   4                                      adjust_flag = 1;
 358   4                                      voltage_bak = vol;      //保存上一次校准时的电压
 359   4                              }       
 360   3                      }
 361   2      
 362   2                      if(adjust_flag)
 363   2                      {
 364   3                              adjust_flag = 0;
 365   3                              temp[0] = 24;
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 7   

 366   3      
 367   3                              if(vol>2688)            //大于3.15V
 368   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr+1];
 369   3                              else if((vol>2474)&&(vol<=2688))                //大于2.9V
 370   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr];
 371   3                              else if((vol>2389)&&(vol<=2474))                //大于2.8V
 372   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-1];
 373   3                              else if((vol>2304)&&(vol<=2389))                //大于2.7V
 374   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-2];
 375   3                              else if((vol>2218)&&(vol<=2304))                //大于2.6V
 376   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-3];
 377   3                              else if((vol>2176)&&(vol<=2218))                //大于2.55V
 378   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-4];
 379   3                              else if((vol>2133)&&(vol<=2176))                //大于2.5V
 380   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-5];
 381   3                              else if((vol>2090)&&(vol<=2133))                //大于2.45V
 382   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-7]; 
 383   3                              else if((vol>2048)&&(vol<=2090))                //大于2.4V
 384   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-9];
 385   3                              else if((vol>2005)&&(vol<=2048))                //大于2.35V
 386   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-11];
 387   3      
 388   3                      }       
 389   2                      
 390   2      
 391   2      
 392   2      /****************************************************/
 393   2      //              temp[0] = 10;
 394   2      
 395   2                      OPA1MODE |= 0x01;       //Sw_integ
 396   2      
 397   2      //              for(i=temp[0];i>0;i--);
 398   2                      delay_20us(5);
 399   2      
 400   2                      OPA1MODE |= 0x02;
 401   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 402   2                      LDOC |= 0x20;           //打开LDO到ADC基准       
 403   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 404   2                      ADCR |= 0x80;
 405   2                      ADCR &= ~0x80;          //启动ADC检测
 406   2                      while(ADCR&0x40);       //等待ADC检测结束
 407   2                      Dark_Value = ADRH;      //暗电流检测，取ADC高8位
 408   2                      ADCR = 0x00;
 409   2                      LDOC &= ~0x20;
 410   2                      OPA1MODE &= ~0x03;
 411   2      
 412   2      /*****************必须按照该时序**************/         
 413   2                      OPA1MODE |= 0x02;
 414   2                      IRED_CTRL |= 0x20;      //IRED使能
 415   2                      OPA1MODE &= ~0x02;
 416   2                      OPA1MODE |= 0x01;       //Sw_integ
 417   2      
 418   2      //              for(i=temp[0];i>0;i--);
 419   2                      delay_20us(5);
 420   2      
 421   2                      OPA1MODE |= 0x02;        
 422   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 423   2      /********************************************/
 424   2      
 425   2                      LVDC |= 0x10;   //开启低压检测,需提前开启
 426   2      
 427   2                      LDOC |= 0x20;
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 8   

 428   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 429   2                      ADCR |= 0x80;
 430   2                      ADCR &= ~0x80;          //启动ADC检测
 431   2                      while(ADCR&0x40);       //等待ADC检测结束
 432   2                      Smoke_Value = ADRH;     //光电流检测，取ADC高8位
 433   2                      ADCR = 0x00;
 434   2                      LDOC = 0x00;
 435   2                      //LED_ON();
 436   2                      if(LVDC&0x20)
 437   2                      {
 438   3                          
 439   3                              lvd_flag = 1;
 440   3                      }
 441   2                      else
 442   2                      {
 443   3                              lvd_flag = 0;
 444   3                              lvd_time = 0;
 445   3                      }
 446   2                      LVDC &= ~0x10;  //关闭低压检测
 447   2      
 448   2                      OPA1MODE = 0x04;        //关闭所有开关并配置成开环模式
 449   2                      BANDGAP_TEMP = 0x04;
 450   2              //      LDO2_CTRL = 0x00;//关闭LDO2
 451   2                      OPA1C1 &= ~0x01;        //关闭运放
 452   2                      
 453   2      
 454   2                      if(Smoke_Value>=Dark_Value)
 455   2                      Smoke_Value = Smoke_Value - Dark_Value;
 456   2                      else
 457   2                      Smoke_Value = 0;
 458   2      
 459   2      
 460   2      //              Smoke_Value = 0xff;
 461   2      
 462   2                      if(rxd_flag==2)         //读烟雾值
 463   2                      {
 464   3                              SBUF =0x11;
 465   3                              //SBUF = Smoke_Value;
 466   3                      /*      SBUF = Battery_Value_H;
 467   3                              while(rxd_flag);
 468   3                              rxd_flag = 1;
 469   3                              SBUF = Battery_Value_L;*/       
 470   3                              while(rxd_flag);
 471   3                              INTMH |= 0x02;
 472   3                              MISC &= ~0x80;  //复用IO口
 473   3                      }
 474   2                      else if(rxd_flag==3)      //标定
 475   2                      {
 476   3                              temp[0] = Smoke_Value + delta_value;
 477   3                              temp[1] = ~temp[0];
 478   3                              E2P_ADDRH=0x00; //E2地址
 479   3                              E2P_ADDRL=0x00;
 480   3                              E2P_CTRL = 0x20;
 481   3                              for(i=0;i<2;i++)
 482   3                              {
 483   4                                 E2P_DATA=temp[i];//数据
 484   4                                 if(i<1)
 485   4                                         E2P_CTRL=0x23;       //启动写
 486   4                                 else
 487   4                                         E2P_CTRL=0x21;       //启动写最后一个字节
 488   4                                 while(!(E2P_FLAG&0x02));//判断是否写完       
 489   4                              } 
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 9   

 490   3              //              FIRE_ALARM_VALUE = Smoke_Value + delta_value;
 491   3              //              QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;
 492   3              //              alarm_value = FIRE_ALARM_VALUE;
 493   3      
 494   3                              IRED_CTRL = delta_value;
 495   3      
 496   3                              SBUF = Smoke_Value + delta_value;
 497   3                              while(rxd_flag);
 498   3                              INTMH |= 0x02;
 499   3                              MISC &= ~0x80;  //复用IO口
 500   3                      }
 501   2      
 502   2                      if((!silince_flag)||(self_check_flag))          //非消音状态或者自检
 503   2                      {
 504   3                              if(Smoke_Value>alarm_value)
 505   3                              {
 506   4                              //      PAREG = ~PAREG;
 507   4                                      detect_count++;
 508   4                                      if(detect_count>3)              //防止溢出
 509   4                                      detect_count = 3;
 510   4                                      if(detect_count==1)
 511   4                                      {
 512   5                                              detect_time = DETECT_TIME1;
 513   5                                              TMR3L = 0x80;           //间隔2s
 514   5                                              TMR3H = 0xc1; 
 515   5                                              TMR3C |= 0x08;          //开启计数
 516   5                                      }
 517   4                                      else if(detect_count==2)
 518   4                                      {
 519   5                                              detect_time = DETECT_TIME2;
 520   5                                              TMR3L = 0xc0;           //间隔1s
 521   5                                              TMR3H = 0xe0; 
 522   5                                              TMR3C |= 0x08;          //开启计数
 523   5                                      }
 524   4                                      else
 525   4                                      {
 526   5                                              detect_time = DETECT_TIME3;
 527   5                              //              if(alarm_flag==0)
 528   5                                              {
 529   6                                                      TMR3L = 0x60;           //间隔0.5
 530   6                                                      TMR3H = 0xf0; 
 531   6                                                      TMR3C |= 0x08;          //开启计数
 532   6                                              }
 533   5                                              alarm_flag = 1;
 534   5                                              bz_timer = BZ_TIME;
 535   5      //                                      PAREG = ~PAREG;
 536   5                                      }
 537   4                                      led_falg = 1;
 538   4                                      if(!self_check_flag)
 539   4                                      alarm_value = QUIT_ALARM_VALUE;
 540   4      
 541   4                                      
 542   4                              }
 543   3                              else     //火警取消，恢复初始
 544   3                              {
 545   4                                      detect_count = 0;
 546   4                                      detect_time = DETECT_TIME1;
 547   4                                      alarm_value = FIRE_ALARM_VALUE;
 548   4                                      alarm_flag = 0;
 549   4                                      bz_timer = 0;
 550   4                                      PWM_CTRL &= ~0x01;
 551   4                                      sleep_flag = 1;
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 10  

 552   4                                      bz_step = 0;
 553   4                                      TMR3L = 0x00;           //休眠8s
 554   4                                      TMR3H = 0x06; 
 555   4                                      TMR3C |= 0x08;          //开启计数
 556   4                              }
 557   3                      }
 558   2                      else             //消音状态下,开启8s定时器
 559   2                      {
 560   3                              TMR3L = 0x00;           //休眠8s
 561   3                              TMR3H = 0x06; 
 562   3                              TMR3C |= 0x08;          //开启计数
 563   3                      }
 564   2                      led_timer++;
 565   2                      if(!silince_flag)
 566   2                      {
 567   3                              if(led_timer>=LED_TIME_NORMAL)
 568   3                              {
 569   4                                      led_falg = 1;
 570   4                                      led_timer = 0;
 571   4                              }
 572   3                      }
 573   2                      else
 574   2                      {
 575   3                              if(led_timer>=LED_TIME_SLIENCDE)
 576   3                              {
 577   4                                      led_falg = 1;
 578   4                                      led_timer = 0;
 579   4                              }
 580   3                      }                        
 581   2              } 
 582   1      }
 583          
 584          
 585          void BZ_Process()
 586          {
 587   1              if((bz_timer>=BZ_TIME)&&(alarm_flag))                     //报警声音处理
 588   1              {
 589   2                      led_falg = 1;
 590   2                      bz_timer = 0;
 591   2                      lvd_time = 0;                     //报警时低压报警时间清零
 592   2                      if(PWM_CTRL&0x01)
 593   2                      {
 594   3                              PWM_CTRL &= ~0x01;
 595   3                              sleep_flag = 1;
 596   3                      }
 597   2                      else
 598   2                      {
 599   3                              if(bz_step>=8)
 600   3                              bz_step = 7;
 601   3                              PWM_PULSE0L = BZ_Freq[bz_step]&0x00ff;
 602   3                              PWM_PULSE0H = BZ_Freq[bz_step]>>8;
 603   3                              PWM_CTRL |= 0x40;
 604   3                              PWM_CTRL |= 0x01;
 605   3                              bz_step++;
 606   3                              sleep_flag = 0;
 607   3                      }
 608   2              }
 609   1      }
 610          
 611          
 612          
 613          void Key_Process()
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 11  

 614          {
 615   1              if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 616   1              {
 617   2                      delay_20us(250);
 618   2                      if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 619   2                      {
 620   3                              key_flag = 1;
 621   3                              
 622   3                              if(alarm_flag==1)                 //消音
 623   3                              {
 624   4                                      silince_flag = 1;
 625   4                                      alarm_value = SLIENCDE_VALUE;
 626   4                                      detect_count = 0;
 627   4                                      detect_time = DETECT_TIME1;
 628   4                                      timer_flag = 0;
 629   4                                      alarm_flag = 0;
 630   4                                      PWM_CTRL &= ~0x01;                 //关闭蜂鸣器
 631   4                                      sleep_flag = 1;
 632   4                                      bz_timer = 0;
 633   4                                      TMR3C &= ~0x08;         //关闭计数器
 634   4                                      delay_20us(20);
 635   4                                      TMR3L = 0x00;           //间隔8s
 636   4                                      TMR3H = 0x06; 
 637   4                                      TMR3C |= 0x08;
 638   4      
 639   4                              }
 640   3                              else                                      //自检
 641   3                              {
 642   4                                      self_check_flag = 1;
 643   4                                      alarm_value = SLEF_CHECK_VALUE;
 644   4                                      detect_count = 2;
 645   4                                      detect_time = DETECT_TIME3;
 646   4                                      timer_flag = 1;
 647   4      
 648   4                                      if(silince_flag)
 649   4                                      silince_time_bak = silince_time;
 650   4      
 651   4                                      TMR3C &= ~0x08;         //关闭计数器
 652   4                                      delay_20us(20);
 653   4                                      TMR3L = 0x60;           //间隔0.5s
 654   4                                      TMR3H = 0xf0; 
 655   4                                      TMR3C |= 0x08;
 656   4      
 657   4                              }
 658   3                      }       
 659   2              }
 660   1              else if(((PAREG&0x40))&&(key_flag))
 661   1              {
 662   2                      delay_20us(250);
 663   2                      if(((PAREG&0x40))&&(key_flag))    //按键松开
 664   2                      {
 665   3                              key_flag = 0;
 666   3                              alarm_flag = 0;
 667   3                              PWM_CTRL &= ~0x01;
 668   3                              bz_step = 0;
 669   3                              if(!silince_flag)
 670   3                              alarm_value = FIRE_ALARM_VALUE;
 671   3                              detect_count = 0;
 672   3                              detect_time = DETECT_TIME1;
 673   3                              sleep_flag = 1;
 674   3                              self_check_flag = 0;
 675   3                              lvd_time = 0;
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 12  

 676   3      
 677   3                              if(silince_flag)
 678   3                              silince_time = silince_time_bak;        
 679   3      
 680   3                              TMR3C &= ~0x08;         //关闭计数器
 681   3                              delay_20us(20);
 682   3                              TMR3L = 0x00;           //间隔8s
 683   3                              TMR3H = 0x06; 
 684   3                              TMR3C |= 0x08;
 685   3                      }
 686   2              }               
 687   1      
 688   1              if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 689   1              {
 690   2                      delay_20us(1);
 691   2                      if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 692   2                      {
 693   3                              rxd_flag = 1;
 694   3                              
 695   3                              MISC |= 0x80;   //复用uart口
 696   3                              SCON =  0X50;   //方式1,溢出率／３２
 697   3                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 698   3                              TMOD = 0x00;    //不分频，４Ｍ
 699   3                              TH1 =  0X00;
 700   3                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 701   3                              TTCON = 0x2a;
 702   3                              INTMH &= ~0x02;
 703   3                              comm_step = 0;
 704   3                              timer_flag = 0xaa;      //进行一次采样
 705   3                              LED_ON();
 706   3                              while(rxd_flag==1);
 707   3                              if(rxd_flag==4)           //读报警阈值  
 708   3                              {
 709   4                                      timer_flag = 0;
 710   4                                      SBUF = alarm_value;
 711   4                                      while(rxd_flag);
 712   4                                      INTMH |= 0x02;
 713   4                                      MISC &= ~0x80;  //复用IO口
 714   4                              }
 715   3                              
 716   3                      }
 717   2              } 
 718   1      }
 719          
 720          
 721          void Other_Process()
 722          {
 723   1              if(silince_time>=SLIENCDE_TIME)           //消音时间到
 724   1              {
 725   2                      silince_flag = 0;
 726   2                      silince_time = 0;
 727   2                      silince_time_bak = 0;
 728   2                      alarm_value = FIRE_ALARM_VALUE; 
 729   2                      lvd_time = 0;
 730   2              }
 731   1      
 732   1              if(led_falg)
 733   1              {
 734   2                      led_falg = 0;
 735   2                      LED_ON();
 736   2                      delay_20us(250);
 737   2                      LED_OFF();
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 13  

 738   2              }       
 739   1      //      if((!silince_flag)&&(!alarm_flag)&&(lvd_time>=LVD_TIME))           //低压报警
 740   1              if((!alarm_flag)&&(lvd_time>=LVD_TIME))
 741   1              {
 742   2                      lvd_time = 0;
 743   2                      PWM_PULSE0L = 0x50;
 744   2                      PWM_PULSE0H = 0x02;
 745   2                      PWM_CTRL |= 0x40;
 746   2                      PWM_CTRL |= 0x01;
 747   2                      LED_ON();
 748   2                      delay_20us(250);
 749   2                      LED_OFF();
 750   2                      delay_20us(250);
 751   2                      PWM_CTRL &= ~0x01;
 752   2              }
 753   1      }
 754          
 755          
 756          void Sleep()
 757          {
 758   1              if(((SYS_REG4&0x10)==0x00)&&(sleep_flag))
 759   1              {
 760   2      //              sleep_flag = 0;
 761   2                      
 762   2                      BANDGAP_TEMP = 0X04; //关闭bandgap
 763   2                      LDO2_CTRL = 0x00;//关闭LDO2             
 764   2      //              delay_20us(20);
 765   2                      if(PAREG&0x40)            //未按按键开启pA6,pA1唤醒
 766   2                      WAKE_EN = 0x42;           //
 767   2                      PCON |= 0X02;   //mcu_stop                      
 768   2                      _nop_();
 769   2                      _nop_();
 770   2                      _nop_();
 771   2                      _nop_(); 
 772   2                  WAKE_EN = 0x00;     //关闭pA7唤醒
 773   2      //              PAREG = ~PAREG;
 774   2              
 775   2              } 
 776   1      
 777   1      }
 778          void delay_20us(unsigned char N)
 779          {
 780   1          unsigned char i;
 781   1          while(N--)     //6cycle
 782   1          {
 783   2              for(i=5;i>0;i--);
 784   2          }
 785   1      
 786   1      }
 787          
 788          
 789          void isr0()     using 0    interrupt 0
 790          {
 791   1              PAREG=~PAREG;
 792   1              if(ADIFG&0X01)
 793   1          {
 794   2               ADIFG &=~0X01;
 795   2               ADCR |= 0x80;
 796   2               ADCR &= ~0x80;
 797   2              // PAREG=~PAREG;
 798   2      
 799   2               }
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 14  

 800   1      /*      if(TBC_INT&0x01)        //TB0中断固定8s
 801   1              {
 802   1                      if(!fast_flag)
 803   1                      {
 804   1                              TBC_INT = 0x00;
 805   1                              timer_flag += 8;
 806   1                              if(silince_flag)
 807   1                              silince_time += 8;
 808   1                              if(lvd_flag)
 809   1                          lvd_time += 8;
 810   1                      }
 811   1                      else
 812   1                      TBC_INT &= ~0x01;
 813   1              }
 814   1              if(TBC_INT&0x02)        //唤醒加快时开启，TB1中断0.5s 
 815   1              {
 816   1                      TBC_INT &= ~0x02;
 817   1                      timer_flag++;
 818   1                      bz_timer++;
 819   1                      if(silince_flag)
 820   1                      silince_time++;
 821   1                      if(lvd_flag)
 822   1                  lvd_time++; 
 823   1      
 824   1      
 825   1              } */
 826   1              if(TMRINT&0X01)
 827   1              {
 828   2                      TMRINT &= ~0X01;
 829   2                      if(Charge_Flag==0)         //非电容充电唤醒
 830   2                      {       
 831   3                              timer_flag++;
 832   3                              bz_timer++;
 833   3                              if(silince_flag)
 834   3                              silince_time++;
 835   3                              if(lvd_flag)
 836   3                          lvd_time++;
 837   3                      }
 838   2      //              PAREG = ~PAREG;
 839   2              }
 840   1      }
 841          
 842          
 843          
 844          
 845          void isr1()     using 1    interrupt 2            //uart中断
 846          {
 847   1              unsigned char temp;
 848   1              if(SCON&0X01)     //接收完成
 849   1              {
 850   2                      SCON &= ~0X01;
 851   2                      temp = SBUF;
 852   2                      if(temp==0xaa)          //读烟雾值
 853   2                      rxd_flag = 2;
 854   2                      else if(temp==0xa0)             //读报警阈值
 855   2                      rxd_flag = 4;
 856   2                      else if(temp==0x55)             //标定
 857   2                      comm_step = 1;
 858   2                      else if (comm_step==1)
 859   2                      {
 860   3                              delta_value =  temp;
 861   3                              rxd_flag = 3;
C51 COMPILER V8.08   MAIN                                                                  08/09/2018 17:02:28 PAGE 15  

 862   3                      }       
 863   2              }
 864   1              if(SCON&0X02)    //发送完成
 865   1              {
 866   2                      SCON &= ~0X02;
 867   2                      rxd_flag = 0;
 868   2              }
 869   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2032    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
