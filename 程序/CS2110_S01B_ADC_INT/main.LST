C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "DP80390CPU.H"
   2          #include "common.h"
   3          #include "register.h"
   4          #include "intrins.h"
   5          
   6          //#define FIRE_ALARM_VALUE   0x40
   7          //#define FIRE_ALARM_VALUE   10
   8          //#define QUIT_ALARM_VALUE   (FIRE_ALARM_VALUE-10)
   9          #define SLEF_CHECK_VALUE   0x00
  10          #define SLIENCDE_VALUE     0xFF
  11          
  12          #define SLIENCDE_TIME      50           //静音时间8*50/60=6.667ｓ
  13          #define DETECT_TIME1       1            //8s
  14          #define DETECT_TIME2       1            //2s
  15          #define DETECT_TIME3       2            //1s
  16          #define BZ_TIME                    1            //500ms
  17          #define LED_TIME_NORMAL    8            //正常64ｓ闪一次
  18          #define LED_TIME_SLIENCDE  1            //静音模式下8ｓ闪一次
  19          #define LVD_TIME               5                //低压报警时间4０ｓ
  20          
  21          
  22          #define LED_ON()        PCREG &= ~0x08
  23          #define LED_OFF()       PCREG |= 0x08
  24          
  25          
  26          //unsigned int code BZ_Freq[]={0x560,0x540,0x500,0x300,0x1E0};
  27          //unsigned int code BZ_Freq[]={0x4C0,0x4A0,0x400,0x380,0x270};  //50%占空比最响
  28          //unsigned int code BZ_Freq[]={0x09,0x08,0x07,0x06,0x05};
  29          unsigned int code BZ_Freq[]={0x495,0x490,0x480,0x460,0x430,0x3c0,0x320,0x250};  //50%占空比最响
  30          unsigned char code IRED_ADJ[]=
  31          {
  32          0x4f,0x4e,0x0f,0x0e,
  33          0x4d,0x4c,0x0d,0x0c,
  34          0x4b,0x4a,0x0b,0x0a,
  35          0x49,0x48,0x09,0x08,
  36          0x47,0x46,0x07,0x06,
  37          0x45,0x44,0x05,0x04,
  38          0x43,0x42,0x03,0x02,
  39          };               //发射电流由大变小
  40          unsigned char Smoke_Value;
  41          unsigned char Dark_Value;
  42          unsigned char timer_flag;
  43          unsigned char bz_timer;
  44          unsigned char bz_step;
  45          unsigned char alarm_flag;
  46          unsigned char alarm_value;
  47          unsigned char detect_time;
  48          unsigned char detect_count;
  49          unsigned char sleep_flag;
  50          unsigned char key_flag;
  51          unsigned char rxd_flag;
  52          unsigned char silince_flag;
  53          unsigned char led_falg;
  54          unsigned char led_timer;
  55          unsigned int  silince_time;
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 2   

  56          unsigned char self_check_flag;
  57          unsigned char lvd_flag;
  58          unsigned char lvd_time;
  59          unsigned char FIRE_ALARM_VALUE;
  60          unsigned char QUIT_ALARM_VALUE;
  61          unsigned char delta_value;
  62          unsigned char comm_step;
  63          unsigned char Battery_Value_H;
  64          unsigned char Battery_Value_L;
  65          unsigned int voltage_bak;
  66          unsigned char adjust_flag;
  67          unsigned char silince_time_bak;
  68          unsigned char IRED_Ptr;
  69          unsigned char Charge_Flag;
  70          
  71          
  72          
  73          void delay_20us(unsigned char N);
  74          void Smoke_Detect();
  75          void BZ_Process();
  76          void Key_Process();
  77          void Other_Process();
  78          void Sleep();
  79          void MCU_Init();
  80          
  81          void main()
  82          {
  83   1              MCU_Init();
  84   1      
  85   1              timer_flag = 0;
  86   1              bz_timer = 0;
  87   1              bz_step = 0;
  88   1              alarm_flag = 0;
  89   1              detect_time = DETECT_TIME1;             //8s
  90   1              detect_count = 0;
  91   1              sleep_flag = 1;
  92   1              key_flag = 0;
  93   1              silince_time = 0;
  94   1              silince_time_bak = 0;
  95   1              silince_flag = 0;
  96   1              led_falg = 0;
  97   1              self_check_flag = 0;
  98   1              lvd_flag = 0;
  99   1              lvd_time = 0;
 100   1              comm_step = 0;
 101   1              voltage_bak = 0;
 102   1              IRED_Ptr = 14;          //设置指针初始位置
 103   1              Charge_Flag = 0;
 104   1              while(1)
 105   1              {
 106   2                  //PAREG=~PAREG;
 107   2                      //LED_ON();
 108   2                      WDCON |= 0x10;
 109   2                      //LDO2_CTRL = 0x00;
 110   2              //      Key_Process();
 111   2                      //Smoke_Detect();
 112   2              //BZ_Process();
 113   2                 // Other_Process();
 114   2                // Sleep();
 115   2              
 116   2                        
 117   2              }       
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 3   

 118   1      
 119   1      
 120   1      }
 121          
 122          void MCU_Init()
 123          {
 124   1              unsigned char i,temp[2];
 125   1              SYS_REG_MASK = 0xA5;
 126   1              SYS_REG1 = 0x18;         //关闭看门狗，打开低压复位，打开高速振荡器
 127   1              SYS_REG3 = 0x10;         //     
 128   1      //      SYS_REG2 = 0xC2;         //高速时钟4分频，空闲模式              
 129   1      //      SYS_REG4 = 0x0c;         //PWM用高速时钟4分频
 130   1              SYS_REG2 = 0x03;
 131   1              SYS_REG4 = 0x01;         //PWM用高速时钟
 132   1              LXT_START = 0X00;
 133   1      
 134   1              IE = 0x85;                                      //全局中断，int1(),int0()中断使能
 135   1              IP = 0x01;                                              //int0优先
 136   1              TCON = 0x05;                                    //int0,int1为沿触发     
 137   1                
 138   1              
 139   1      
 140   1              BANDGAP_TEMP = 0x05;
 141   1              LDO2_CTRL = 0X03;
 142   1      
 143   1              
 144   1              PADIR = 0xFF;
 145   1              PAPU = 0X00;
 146   1              PAREG = 0x00;
 147   1      
 148   1              PCDIR = 0x08;    //红色led等pc3
 149   1              PCPU = 0XF7;
 150   1              PCREG = 0x08;
 151   1              ADPCR = 0X30;
 152   1      
 153   1      
 154   1      
 155   1              PBDIR = 0x08;                   //pb1输出低电平
 156   1              PBPU = ~0x08;                   //pb1不上拉
 157   1              PBREG = 0x00;
 158   1      /*      PWM_PERIOD0L = 0x98;            //pwm周期为3.4KHz   时钟４Ｍ
 159   1              PWM_PERIOD0H = 0x04;
 160   1              //PWM_PERIOD0L = 0xe2;          //pwm周期为3.2KHz   时钟４Ｍ
 161   1      //      PWM_PERIOD0H = 0x04;                                                       
 162   1              DZ_CTRL = 0x05;                 //pwm0互补输出,全N模式
 163   1              PWM_CTRL = 0x40;                //pwm0装载，连续输出，初始电平为0  
 164   1      
 165   1              WAKEUP_EDGE_REG = 0x42;         //下降沿唤醒
 166   1      
 167   1      
 168   1              IRED_CTRL = 0x09;               //设置发射电流为125ｍA
 169   1              MISC = 0x40;                    //pb6复用IRED  
 170   1      
 171   1      /******************uart*********************/
 172   1      /*      MISC |= 0x80;   //复用uart口
 173   1              SCON =  0X40;   //方式1,溢出率／３２
 174   1              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 175   1              TMOD = 0x00;    //不分频，４Ｍ
 176   1              TH1 =  0X00;
 177   1              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 178   1              TTCON = 0x2a;      */
 179   1      /*******************************************/
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 4   

 180   1      
 181   1      
 182   1              OPA1C0 = 0x23;          //积分增益为８倍
 183   1              OPA1C1 = 0x0c;          //OPA1连接红外接收管
 184   1              OPA1MODE = 0x04;        //设置成开环    
 185   1      
 186   1              LVDC = 0x05;            //2.5V
 187   1              
 188   1      //      TBC = 0xa6;                //TBC开启2s定时
 189   1      //      TBC = 0x08;                //TBC0开启4s定时,TBC1关闭
 190   1      //      TBC = 0X40;
 191   1      //      TBC = 0x84;                //TBC开启0.5s定时
 192   1      //      INTML = 0xf7;      //TBC中断使能
 193   1      //      INTSEL0L = 0x08;   //TBC中断从int0进入  */ 
 194   1               
 195   1      /*   TMR3C = 0X58;              //timer3使用低速时钟,并使能
 196   1              TMR3L = 0X00;
 197   1              TMR3H = 0X06;           //0.125ms*64000=8s
 198   1              INTML = 0XDF;
 199   1              INTSEL0L = 0X20;*/       
 200   1      
 201   1                              
 202   1              WDCNTM = 0x38;
 203   1              WDCNTH = 0x00;
 204   1              WDCON = 0x28;           //开启看门狗复位功能
 205   1              WDCON |= 0x10;     
 206   1              
 207   1      /*       WDCON |= 0x24;  //开启看门狗计数中断
 208   1               WDCNTM = 0x11;
 209   1               WDCNTH = 0x11;
 210   1               INTMH &=~0X01;
 211   1              INTSEL0H = 0X01;  */
 212   1      
 213   1               INTML&=~0X02;  //打开ADC中断
 214   1               INTSEL0L=0x02;  //ADC中断从IN0输出
 215   1               LDOC = 0x46;
 216   1               LDOC |= 0x20;
 217   1               ADCR = 0x36;           //打开ADC电源，选择内部2.4V为基准
 218   1               ADCR |= 0x80;
 219   1               ADCR &= ~0x80; 
 220   1      
 221   1      
 222   1              E2P_ADDRH=0x00; //起始地址
 223   1              E2P_ADDRL=0x00;
 224   1              E2P_CTRL = 0x10;
 225   1              for(i=0;i<2;i++)
 226   1              {
 227   2                 if(i<1)
 228   2                         E2P_CTRL=0x13;       //启动读
 229   2                 else
 230   2                         E2P_CTRL=0x11;       //启动度
 231   2                 while(!(E2P_FLAG&0x01));//判断是否写完
 232   2                 temp[i]=E2P_DATA;
 233   2              } 
 234   1              if(temp[0]!=(~temp[1]))
 235   1              {
 236   2                      FIRE_ALARM_VALUE = 0x60;
 237   2                      alarm_value = FIRE_ALARM_VALUE;
 238   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;               
 239   2              }
 240   1              else                                       //上电读取报警阈值
 241   1              {
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 5   

 242   2                      FIRE_ALARM_VALUE = temp[0];
 243   2                      alarm_value = FIRE_ALARM_VALUE;
 244   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;                         
 245   2              }                                         
 246   1              alarm_value = 0xc0;
 247   1              FIRE_ALARM_VALUE = 0xc0;
 248   1      
 249   1      
 250   1              delay_20us(250);
 251   1              delay_20us(250);
 252   1              delay_20us(250);
 253   1              delay_20us(250);
 254   1              delay_20us(250);
 255   1              delay_20us(250);
 256   1              delay_20us(250);
 257   1              delay_20us(250);
 258   1              delay_20us(250);
 259   1              delay_20us(250);
 260   1              delay_20us(250);
 261   1              delay_20us(250);   
 262   1              
 263   1      }
 264          
 265          
 266          void Smoke_Detect()
 267          {        
 268   1         
 269   1              unsigned char i,temp[2];
 270   1              unsigned int vol;
 271   1              if(timer_flag>=detect_time)                               //8s检测一次
 272   1              {
 273   2                      timer_flag = 0;
 274   2                      WDCON |= 0x10;
 275   2                      BANDGAP_TEMP = 0x05;
 276   2                      LDO2_CTRL = 0x03;
 277   2      
 278   2      /*              SYS_REG2 = 0x02;        //切换成低频
 279   2                      _nop_();
 280   2                      _nop_();
 281   2                      _nop_();
 282   2                      _nop_();                
 283   2                      _nop_();
 284   2                      _nop_();
 285   2                      _nop_();
 286   2                      _nop_();
 287   2                      _nop_();
 288   2      
 289   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 290   2                      OPA1C1 |= 0x01;         //开启运放              
 291   2                      LDOC = 0x46;
 292   2                      _nop_();
 293   2                      _nop_();
 294   2                      _nop_();
 295   2                      _nop_();
 296   2      
 297   2                      SYS_REG2 = 0xc2;        //切换成高频
 298   2                      _nop_();
 299   2                      _nop_();
 300   2                      _nop_();
 301   2                      _nop_();
 302   2      //              delay_20us(100);                //运放稳定时间
 303   2      */
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 6   

 304   2                      TMR3C &= ~0x08;         //关闭计数器
 305   2                      delay_20us(20);
 306   2                      TMR3L = 0xc0;           //休眠8ms
 307   2                      TMR3H = 0xff; 
 308   2                      TMR3C |= 0x08;          //开启计数器
 309   2                      Charge_Flag = 1;
 310   2                      PCON |= 0X02;   //mcu_stop,给电容充电                   
 311   2                      _nop_();
 312   2                      _nop_();
 313   2                      _nop_();
 314   2                      _nop_();
 315   2                      TMR3C &= ~0x08;         //关闭计数器,到下面检测完成再开启
 316   2                      LDO2_CTRL = 0x00;//关闭LDO2
 317   2                      Charge_Flag = 0;
 318   2                                
 319   2      
 320   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 321   2                      OPA1C1 |= 0x01;         //开启运放              
 322   2                      LDOC = 0x46;
 323   2                      delay_20us(20);         //运放稳定时间
 324   2      /******************************电源电压检测*/
 325   2                      LDOC |= 0x20;           //打开LDO到ADC基准
 326   2                      LCDC |= 0X70;
 327   2                      LDOC |= 0X10;
 328   2                      ADCR = 0x3b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 329   2      //              ADCR = 0x2b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 330   2                      for(i=0;i<5;i++)
 331   2                      {
 332   3                              ADCR |= 0x80;
 333   3                              ADCR &= ~0x80;          //启动ADC检测
 334   3                              while(ADCR&0x40);       //等待ADC检测结束
 335   3                      }
 336   2                      Battery_Value_H = ADRH;
 337   2                      Battery_Value_L = ADRL;
 338   2                      ADCR = 0x00;
 339   2                      LDOC &= ~0x20;          
 340   2                      LDOC &= ~0X10;
 341   2                      LCDC &= ~0X70;
 342   2      
 343   2              //      4096*2.4*2;//2560为3V,每85个字为0.1V
 344   2                      vol = (((unsigned int)Battery_Value_H)<<4);
 345   2                      vol += (unsigned int)Battery_Value_L>>4;
 346   2      
 347   2      
 348   2       
 349   2                      if(voltage_bak==0x00)   //首次检测
 350   2                      {
 351   3                              adjust_flag = 1;
 352   3                              voltage_bak = vol;      //保存上一次校准时的电压
 353   3                      }
 354   2                      else
 355   2                      {
 356   3                              if((vol>=(voltage_bak+8))||(vol<=(voltage_bak-8)))      //迟滞10mv
 357   3                              {
 358   4                                      adjust_flag = 1;
 359   4                                      voltage_bak = vol;      //保存上一次校准时的电压
 360   4                              }       
 361   3                      }
 362   2      
 363   2                      if(adjust_flag)
 364   2                      {
 365   3                              adjust_flag = 0;
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 7   

 366   3                              temp[0] = 24;
 367   3      
 368   3                              if(vol>2688)            //大于3.15V
 369   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr+1];
 370   3                              else if((vol>2474)&&(vol<=2688))                //大于2.9V
 371   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr];
 372   3                              else if((vol>2389)&&(vol<=2474))                //大于2.8V
 373   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-1];
 374   3                              else if((vol>2304)&&(vol<=2389))                //大于2.7V
 375   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-2];
 376   3                              else if((vol>2218)&&(vol<=2304))                //大于2.6V
 377   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-3];
 378   3                              else if((vol>2176)&&(vol<=2218))                //大于2.55V
 379   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-4];
 380   3                              else if((vol>2133)&&(vol<=2176))                //大于2.5V
 381   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-5];
 382   3                              else if((vol>2090)&&(vol<=2133))                //大于2.45V
 383   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-7]; 
 384   3                              else if((vol>2048)&&(vol<=2090))                //大于2.4V
 385   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-9];
 386   3                              else if((vol>2005)&&(vol<=2048))                //大于2.35V
 387   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-11];
 388   3      
 389   3                      }       
 390   2                      
 391   2      
 392   2      
 393   2      /****************************************************/
 394   2      //              temp[0] = 10;
 395   2      
 396   2                      OPA1MODE |= 0x01;       //Sw_integ
 397   2      
 398   2      //              for(i=temp[0];i>0;i--);
 399   2                      delay_20us(5);
 400   2      
 401   2                      OPA1MODE |= 0x02;
 402   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 403   2                      LDOC |= 0x20;           //打开LDO到ADC基准       
 404   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 405   2                      ADCR |= 0x80;
 406   2                      ADCR &= ~0x80;          //启动ADC检测
 407   2                      while(ADCR&0x40);       //等待ADC检测结束
 408   2                      Dark_Value = ADRH;      //暗电流检测，取ADC高8位
 409   2                      ADCR = 0x00;
 410   2                      LDOC &= ~0x20;
 411   2                      OPA1MODE &= ~0x03;
 412   2      
 413   2      /*****************必须按照该时序**************/         
 414   2                      OPA1MODE |= 0x02;
 415   2                      IRED_CTRL |= 0x20;      //IRED使能
 416   2                      OPA1MODE &= ~0x02;
 417   2                      OPA1MODE |= 0x01;       //Sw_integ
 418   2      
 419   2      //              for(i=temp[0];i>0;i--);
 420   2                      delay_20us(5);
 421   2      
 422   2                      OPA1MODE |= 0x02;        
 423   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 424   2      /********************************************/
 425   2      
 426   2                      LVDC |= 0x10;   //开启低压检测,需提前开启
 427   2      
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 8   

 428   2                      LDOC |= 0x20;
 429   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 430   2                      ADCR |= 0x80;
 431   2                      ADCR &= ~0x80;          //启动ADC检测
 432   2                      while(ADCR&0x40);       //等待ADC检测结束
 433   2                      Smoke_Value = ADRH;     //光电流检测，取ADC高8位
 434   2                      ADCR = 0x00;
 435   2                      LDOC = 0x00;
 436   2                      //LED_ON();
 437   2                      if(LVDC&0x20)
 438   2                      {
 439   3                          
 440   3                              lvd_flag = 1;
 441   3                      }
 442   2                      else
 443   2                      {
 444   3                              lvd_flag = 0;
 445   3                              lvd_time = 0;
 446   3                      }
 447   2                      LVDC &= ~0x10;  //关闭低压检测
 448   2      
 449   2                      OPA1MODE = 0x04;        //关闭所有开关并配置成开环模式
 450   2                      BANDGAP_TEMP = 0x04;
 451   2              //      LDO2_CTRL = 0x00;//关闭LDO2
 452   2                      OPA1C1 &= ~0x01;        //关闭运放
 453   2                      
 454   2      
 455   2                      if(Smoke_Value>=Dark_Value)
 456   2                      Smoke_Value = Smoke_Value - Dark_Value;
 457   2                      else
 458   2                      Smoke_Value = 0;
 459   2      
 460   2      
 461   2      //              Smoke_Value = 0xff;
 462   2      
 463   2                      if(rxd_flag==2)         //读烟雾值
 464   2                      {
 465   3                         
 466   3                              SBUF =0x11;
 467   3                              //SBUF = Smoke_Value;
 468   3                      /*      SBUF = Battery_Value_H;
 469   3                              while(rxd_flag);
 470   3                              rxd_flag = 1;
 471   3                              SBUF = Battery_Value_L;*/       
 472   3                              while(rxd_flag);
 473   3                              INTMH |= 0x02;
 474   3                              MISC &= ~0x80;  //复用IO口
 475   3                      }
 476   2                      else if(rxd_flag==3)      //标定
 477   2                      {
 478   3                              temp[0] = Smoke_Value + delta_value;
 479   3                              temp[1] = ~temp[0];
 480   3                              E2P_ADDRH=0x00; //E2地址
 481   3                              E2P_ADDRL=0x00;
 482   3                              E2P_CTRL = 0x20;
 483   3                              for(i=0;i<2;i++)
 484   3                              {
 485   4                                 E2P_DATA=temp[i];//数据
 486   4                                 if(i<1)
 487   4                                         E2P_CTRL=0x23;       //启动写
 488   4                                 else
 489   4                                         E2P_CTRL=0x21;       //启动写最后一个字节
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 9   

 490   4                                 while(!(E2P_FLAG&0x02));//判断是否写完       
 491   4                              } 
 492   3              //              FIRE_ALARM_VALUE = Smoke_Value + delta_value;
 493   3              //              QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;
 494   3              //              alarm_value = FIRE_ALARM_VALUE;
 495   3      
 496   3                              IRED_CTRL = delta_value;
 497   3      
 498   3                              SBUF = Smoke_Value + delta_value;
 499   3                              while(rxd_flag);
 500   3                              INTMH |= 0x02;
 501   3                              MISC &= ~0x80;  //复用IO口
 502   3                      }
 503   2      
 504   2                      if((!silince_flag)||(self_check_flag))          //非消音状态或者自检
 505   2                      {
 506   3                              if(Smoke_Value>alarm_value)
 507   3                              {
 508   4                              //      PAREG = ~PAREG;
 509   4                                      detect_count++;
 510   4                                      if(detect_count>3)              //防止溢出
 511   4                                      detect_count = 3;
 512   4                                      if(detect_count==1)
 513   4                                      {
 514   5                                              detect_time = DETECT_TIME1;
 515   5                                              TMR3L = 0x80;           //间隔2s
 516   5                                              TMR3H = 0xc1; 
 517   5                                              TMR3C |= 0x08;          //开启计数
 518   5                                      }
 519   4                                      else if(detect_count==2)
 520   4                                      {
 521   5                                              detect_time = DETECT_TIME2;
 522   5                                              TMR3L = 0xc0;           //间隔1s
 523   5                                              TMR3H = 0xe0; 
 524   5                                              TMR3C |= 0x08;          //开启计数
 525   5                                      }
 526   4                                      else
 527   4                                      {
 528   5                                              detect_time = DETECT_TIME3;
 529   5                              //              if(alarm_flag==0)
 530   5                                              {
 531   6                                                      TMR3L = 0x60;           //间隔0.5
 532   6                                                      TMR3H = 0xf0; 
 533   6                                                      TMR3C |= 0x08;          //开启计数
 534   6                                              }
 535   5                                              alarm_flag = 1;
 536   5                                              bz_timer = BZ_TIME;
 537   5      //                                      PAREG = ~PAREG;
 538   5                                      }
 539   4                                      led_falg = 1;
 540   4                                      if(!self_check_flag)
 541   4                                      alarm_value = QUIT_ALARM_VALUE;
 542   4      
 543   4                                      
 544   4                              }
 545   3                              else     //火警取消，恢复初始
 546   3                              {
 547   4                                      detect_count = 0;
 548   4                                      detect_time = DETECT_TIME1;
 549   4                                      alarm_value = FIRE_ALARM_VALUE;
 550   4                                      alarm_flag = 0;
 551   4                                      bz_timer = 0;
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 10  

 552   4                                      PWM_CTRL &= ~0x01;
 553   4                                      sleep_flag = 1;
 554   4                                      bz_step = 0;
 555   4                                      TMR3L = 0x00;           //休眠8s
 556   4                                      TMR3H = 0x06; 
 557   4                                      TMR3C |= 0x08;          //开启计数
 558   4                              }
 559   3                      }
 560   2                      else             //消音状态下,开启8s定时器
 561   2                      {
 562   3                              TMR3L = 0x00;           //休眠8s
 563   3                              TMR3H = 0x06; 
 564   3                              TMR3C |= 0x08;          //开启计数
 565   3                      }
 566   2                      led_timer++;
 567   2                      if(!silince_flag)
 568   2                      {
 569   3                              if(led_timer>=LED_TIME_NORMAL)
 570   3                              {
 571   4                                      led_falg = 1;
 572   4                                      led_timer = 0;
 573   4                              }
 574   3                      }
 575   2                      else
 576   2                      {
 577   3                              if(led_timer>=LED_TIME_SLIENCDE)
 578   3                              {
 579   4                                      led_falg = 1;
 580   4                                      led_timer = 0;
 581   4                              }
 582   3                      }                        
 583   2              } 
 584   1      }
 585          
 586          
 587          void BZ_Process()
 588          {
 589   1              if((bz_timer>=BZ_TIME)&&(alarm_flag))                     //报警声音处理
 590   1              {
 591   2                      led_falg = 1;
 592   2                      bz_timer = 0;
 593   2                      lvd_time = 0;                     //报警时低压报警时间清零
 594   2                      if(PWM_CTRL&0x01)
 595   2                      {
 596   3                              PWM_CTRL &= ~0x01;
 597   3                              sleep_flag = 1;
 598   3                      }
 599   2                      else
 600   2                      {
 601   3                              if(bz_step>=8)
 602   3                              bz_step = 7;
 603   3                              PWM_PULSE0L = BZ_Freq[bz_step]&0x00ff;
 604   3                              PWM_PULSE0H = BZ_Freq[bz_step]>>8;
 605   3                              PWM_CTRL |= 0x40;
 606   3                              PWM_CTRL |= 0x01;
 607   3                              bz_step++;
 608   3                              sleep_flag = 0;
 609   3                      }
 610   2              }
 611   1      }
 612          
 613          
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 11  

 614          
 615          void Key_Process()
 616          {
 617   1              if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 618   1              {
 619   2                      delay_20us(250);
 620   2                      if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 621   2                      {
 622   3                              key_flag = 1;
 623   3                              
 624   3                              if(alarm_flag==1)                 //消音
 625   3                              {
 626   4                                      silince_flag = 1;
 627   4                                      alarm_value = SLIENCDE_VALUE;
 628   4                                      detect_count = 0;
 629   4                                      detect_time = DETECT_TIME1;
 630   4                                      timer_flag = 0;
 631   4                                      alarm_flag = 0;
 632   4                                      PWM_CTRL &= ~0x01;                 //关闭蜂鸣器
 633   4                                      sleep_flag = 1;
 634   4                                      bz_timer = 0;
 635   4                                      TMR3C &= ~0x08;         //关闭计数器
 636   4                                      delay_20us(20);
 637   4                                      TMR3L = 0x00;           //间隔8s
 638   4                                      TMR3H = 0x06; 
 639   4                                      TMR3C |= 0x08;
 640   4      
 641   4                              }
 642   3                              else                                      //自检
 643   3                              {
 644   4                                      self_check_flag = 1;
 645   4                                      alarm_value = SLEF_CHECK_VALUE;
 646   4                                      detect_count = 2;
 647   4                                      detect_time = DETECT_TIME3;
 648   4                                      timer_flag = 1;
 649   4      
 650   4                                      if(silince_flag)
 651   4                                      silince_time_bak = silince_time;
 652   4      
 653   4                                      TMR3C &= ~0x08;         //关闭计数器
 654   4                                      delay_20us(20);
 655   4                                      TMR3L = 0x60;           //间隔0.5s
 656   4                                      TMR3H = 0xf0; 
 657   4                                      TMR3C |= 0x08;
 658   4      
 659   4                              }
 660   3                      }       
 661   2              }
 662   1              else if(((PAREG&0x40))&&(key_flag))
 663   1              {
 664   2                      delay_20us(250);
 665   2                      if(((PAREG&0x40))&&(key_flag))    //按键松开
 666   2                      {
 667   3                              key_flag = 0;
 668   3                              alarm_flag = 0;
 669   3                              PWM_CTRL &= ~0x01;
 670   3                              bz_step = 0;
 671   3                              if(!silince_flag)
 672   3                              alarm_value = FIRE_ALARM_VALUE;
 673   3                              detect_count = 0;
 674   3                              detect_time = DETECT_TIME1;
 675   3                              sleep_flag = 1;
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 12  

 676   3                              self_check_flag = 0;
 677   3                              lvd_time = 0;
 678   3      
 679   3                              if(silince_flag)
 680   3                              silince_time = silince_time_bak;        
 681   3      
 682   3                              TMR3C &= ~0x08;         //关闭计数器
 683   3                              delay_20us(20);
 684   3                              TMR3L = 0x00;           //间隔8s
 685   3                              TMR3H = 0x06; 
 686   3                              TMR3C |= 0x08;
 687   3                      }
 688   2              }               
 689   1      
 690   1              if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 691   1              {
 692   2                      delay_20us(1);
 693   2                      if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 694   2                      {
 695   3                              rxd_flag = 1;
 696   3                              
 697   3                              MISC |= 0x80;   //复用uart口
 698   3                              SCON =  0X50;   //方式1,溢出率／３２
 699   3                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 700   3                              TMOD = 0x00;    //不分频，４Ｍ
 701   3                              TH1 =  0X00;
 702   3                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 703   3                              TTCON = 0x2a;
 704   3                              INTMH &= ~0x02;
 705   3                              comm_step = 0;
 706   3                              timer_flag = 0xaa;      //进行一次采样
 707   3                              LED_ON();
 708   3                              while(rxd_flag==1);
 709   3                              if(rxd_flag==4)           //读报警阈值  
 710   3                              {
 711   4                                      timer_flag = 0;
 712   4                                      SBUF = alarm_value;
 713   4                                      while(rxd_flag);
 714   4                                      INTMH |= 0x02;
 715   4                                      MISC &= ~0x80;  //复用IO口
 716   4                              }
 717   3                              
 718   3                      }
 719   2              } 
 720   1      }
 721          
 722          
 723          void Other_Process()
 724          {
 725   1              if(silince_time>=SLIENCDE_TIME)           //消音时间到
 726   1              {
 727   2                      silince_flag = 0;
 728   2                      silince_time = 0;
 729   2                      silince_time_bak = 0;
 730   2                      alarm_value = FIRE_ALARM_VALUE; 
 731   2                      lvd_time = 0;
 732   2              }
 733   1      
 734   1              if(led_falg)
 735   1              {
 736   2                      led_falg = 0;
 737   2                      LED_ON();
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 13  

 738   2                      delay_20us(250);
 739   2                      LED_OFF();
 740   2              }       
 741   1      //      if((!silince_flag)&&(!alarm_flag)&&(lvd_time>=LVD_TIME))           //低压报警
 742   1              if((!alarm_flag)&&(lvd_time>=LVD_TIME))
 743   1              {
 744   2                      lvd_time = 0;
 745   2                      PWM_PULSE0L = 0x50;
 746   2                      PWM_PULSE0H = 0x02;
 747   2                      PWM_CTRL |= 0x40;
 748   2                      PWM_CTRL |= 0x01;
 749   2                      LED_ON();
 750   2                      delay_20us(250);
 751   2                      LED_OFF();
 752   2                      delay_20us(250);
 753   2                      PWM_CTRL &= ~0x01;
 754   2              }
 755   1      }
 756          
 757          
 758          void Sleep()
 759          {
 760   1              if(((SYS_REG4&0x10)==0x00)&&(sleep_flag))
 761   1              {
 762   2      //              sleep_flag = 0;
 763   2                      
 764   2                      BANDGAP_TEMP = 0X04; //关闭bandgap
 765   2                      LDO2_CTRL = 0x00;//关闭LDO2             
 766   2      //              delay_20us(20);
 767   2                      if(PAREG&0x40)            //未按按键开启pA6,pA1唤醒
 768   2                      WAKE_EN = 0x42;           //
 769   2                      PCON |= 0X02;   //mcu_stop                      
 770   2                      _nop_();
 771   2                      _nop_();
 772   2                      _nop_();
 773   2                      _nop_(); 
 774   2                  WAKE_EN = 0x00;     //关闭pA7唤醒
 775   2      //              PAREG = ~PAREG;
 776   2              
 777   2              } 
 778   1      
 779   1      }
 780          void delay_20us(unsigned char N)
 781          {
 782   1          unsigned char i;
 783   1          while(N--)     //6cycle
 784   1          {
 785   2              for(i=5;i>0;i--);
 786   2          }
 787   1      
 788   1      }
 789          
 790          
 791          void isr0()     using 0    interrupt 0
 792          {
 793   1              PAREG=~PAREG;
 794   1              if(ADIFG&0X01)
 795   1          {
 796   2               ADIFG &=~0X01;
 797   2               ADCR |= 0x80;
 798   2               ADCR &= ~0x80;
 799   2              // PAREG=~PAREG;
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 14  

 800   2      
 801   2               }
 802   1      /*      if(TBC_INT&0x01)        //TB0中断固定8s
 803   1              {
 804   1                      if(!fast_flag)
 805   1                      {
 806   1                              TBC_INT = 0x00;
 807   1                              timer_flag += 8;
 808   1                              if(silince_flag)
 809   1                              silince_time += 8;
 810   1                              if(lvd_flag)
 811   1                          lvd_time += 8;
 812   1                      }
 813   1                      else
 814   1                      TBC_INT &= ~0x01;
 815   1              }
 816   1              if(TBC_INT&0x02)        //唤醒加快时开启，TB1中断0.5s 
 817   1              {
 818   1                      TBC_INT &= ~0x02;
 819   1                      timer_flag++;
 820   1                      bz_timer++;
 821   1                      if(silince_flag)
 822   1                      silince_time++;
 823   1                      if(lvd_flag)
 824   1                  lvd_time++; 
 825   1      
 826   1      
 827   1              } */
 828   1              if(TMRINT&0X02)
 829   1              {
 830   2                      TMRINT &= ~0X02;
 831   2                      if(Charge_Flag==0)         //非电容充电唤醒
 832   2                      {       
 833   3                              timer_flag++;
 834   3                              bz_timer++;
 835   3                              if(silince_flag)
 836   3                              silince_time++;
 837   3                              if(lvd_flag)
 838   3                          lvd_time++;
 839   3                      }
 840   2      //              PAREG = ~PAREG;
 841   2              }
 842   1      }
 843          
 844          
 845          
 846          
 847          void isr1()     using 1    interrupt 2            //uart中断
 848          {
 849   1              unsigned char temp;
 850   1              if(SCON&0X01)     //接收完成
 851   1              {
 852   2                      SCON &= ~0X01;
 853   2                      temp = SBUF;
 854   2                      if(temp==0xaa)          //读烟雾值
 855   2                      rxd_flag = 2;
 856   2                      else if(temp==0xa0)             //读报警阈值
 857   2                      rxd_flag = 4;
 858   2                      else if(temp==0x55)             //标定
 859   2                      comm_step = 1;
 860   2                      else if (comm_step==1)
 861   2                      {
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:05:15 PAGE 15  

 862   3                              delta_value =  temp;
 863   3                              rxd_flag = 3;
 864   3                      }       
 865   2              }
 866   1              if(SCON&0X02)    //发送完成
 867   1              {
 868   2                      SCON &= ~0X02;
 869   2                      rxd_flag = 0;
 870   2              }
 871   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2052    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
