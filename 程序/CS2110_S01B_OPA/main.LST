C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "DP80390CPU.H"
   2          #include "common.h"
   3          #include "register.h"
   4          #include "intrins.h"
   5          
   6          //#define FIRE_ALARM_VALUE   0x40
   7          //#define FIRE_ALARM_VALUE   10
   8          //#define QUIT_ALARM_VALUE   (FIRE_ALARM_VALUE-10)
   9          #define SLEF_CHECK_VALUE   0x00
  10          #define SLIENCDE_VALUE     0xFF
  11          
  12          #define SLIENCDE_TIME      50           //静音时间8*50/60=6.667ｓ
  13          #define DETECT_TIME1       1            //8s
  14          #define DETECT_TIME2       1            //2s
  15          #define DETECT_TIME3       2            //1s
  16          #define BZ_TIME                    1            //500ms
  17          #define LED_TIME_NORMAL    8            //正常64ｓ闪一次
  18          #define LED_TIME_SLIENCDE  1            //静音模式下8ｓ闪一次
  19          #define LVD_TIME               5                //低压报警时间4０ｓ
  20          
  21          
  22          #define LED_ON()        PCREG &= ~0x08
  23          #define LED_OFF()       PCREG |= 0x08
  24          
  25          
  26          //unsigned int code BZ_Freq[]={0x560,0x540,0x500,0x300,0x1E0};
  27          //unsigned int code BZ_Freq[]={0x4C0,0x4A0,0x400,0x380,0x270};  //50%占空比最响
  28          //unsigned int code BZ_Freq[]={0x09,0x08,0x07,0x06,0x05};
  29          unsigned int code BZ_Freq[]={0x495,0x490,0x480,0x460,0x430,0x3c0,0x320,0x250};  //50%占空比最响
  30          unsigned char code IRED_ADJ[]=
  31          {
  32          0x4f,0x4e,0x0f,0x0e,
  33          0x4d,0x4c,0x0d,0x0c,
  34          0x4b,0x4a,0x0b,0x0a,
  35          0x49,0x48,0x09,0x08,
  36          0x47,0x46,0x07,0x06,
  37          0x45,0x44,0x05,0x04,
  38          0x43,0x42,0x03,0x02,
  39          };               //发射电流由大变小
  40          unsigned char Smoke_Value;
  41          unsigned char Dark_Value;
  42          unsigned char timer_flag;
  43          unsigned char bz_timer;
  44          unsigned char bz_step;
  45          unsigned char alarm_flag;
  46          unsigned char alarm_value;
  47          unsigned char detect_time;
  48          unsigned char detect_count;
  49          unsigned char sleep_flag;
  50          unsigned char key_flag;
  51          unsigned char rxd_flag;
  52          unsigned char silince_flag;
  53          unsigned char led_falg;
  54          unsigned char led_timer;
  55          unsigned int  silince_time;
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 2   

  56          unsigned char self_check_flag;
  57          unsigned char lvd_flag;
  58          unsigned char lvd_time;
  59          unsigned char FIRE_ALARM_VALUE;
  60          unsigned char QUIT_ALARM_VALUE;
  61          unsigned char delta_value;
  62          unsigned char comm_step;
  63          unsigned char Battery_Value_H;
  64          unsigned char Battery_Value_L;
  65          unsigned int voltage_bak;
  66          unsigned char adjust_flag;
  67          unsigned char silince_time_bak;
  68          unsigned char IRED_Ptr;
  69          unsigned char Charge_Flag;
  70          
  71          
  72          
  73          void delay_20us(unsigned char N);
  74          void Smoke_Detect();
  75          void BZ_Process();
  76          void Key_Process();
  77          void Other_Process();
  78          void Sleep();
  79          void MCU_Init();
  80          
  81          void main()
  82          {
  83   1              MCU_Init();
  84   1      
  85   1              timer_flag = 0;
  86   1              bz_timer = 0;
  87   1              bz_step = 0;
  88   1              alarm_flag = 0;
  89   1              detect_time = DETECT_TIME1;             //8s
  90   1              detect_count = 0;
  91   1              sleep_flag = 1;
  92   1              key_flag = 0;
  93   1              silince_time = 0;
  94   1              silince_time_bak = 0;
  95   1              silince_flag = 0;
  96   1              led_falg = 0;
  97   1              self_check_flag = 0;
  98   1              lvd_flag = 0;
  99   1              lvd_time = 0;
 100   1              comm_step = 0;
 101   1              voltage_bak = 0;
 102   1              IRED_Ptr = 14;          //设置指针初始位置
 103   1              Charge_Flag = 0;
 104   1              while(1)
 105   1              {
 106   2                      delay_20us(250);
 107   2      //              Key_Process();
 108   2      //              Smoke_Detect();
 109   2      //              BZ_Process();
 110   2      //              Other_Process();
 111   2                      Sleep();
 112   2              
 113   2                        
 114   2              }       
 115   1      
 116   1      
 117   1      }
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 3   

 118          
 119          void MCU_Init()
 120          {
 121   1              unsigned char i,temp[2];
 122   1              SYS_REG_MASK = 0xA5;
 123   1              SYS_REG1 = 0x58;         //打开看门狗使能，打开低压复位，打开高速振荡器
 124   1              SYS_REG3 = 0x10;         //     
 125   1      //      SYS_REG2 = 0xC2;         //高速时钟4分频，空闲模式              
 126   1      //      SYS_REG4 = 0x0c;         //PWM用高速时钟4分频
 127   1              SYS_REG2 = 0x03;
 128   1              SYS_REG4 = 0x01;         //PWM用高速时钟
 129   1              LXT_START = 0X00;
 130   1      
 131   1              IE = 0x85;                                      //全局中断，int1(),int0()中断使能
 132   1              IP = 0x01;                                              //int0优先
 133   1              TCON = 0x05;                                    //int0,int1为沿触发     
 134   1                
 135   1              
 136   1      
 137   1              BANDGAP_TEMP = 0x05;
 138   1              LDO2_CTRL = 0X03;
 139   1      
 140   1              
 141   1              PADIR = 0x01;
 142   1              PAPU = 0XFe;
 143   1              PAREG = 0x00;
 144   1      
 145   1              PCDIR = 0x08;    //红色led等pc3
 146   1              PCPU = 0XF7;
 147   1              PCREG = 0x08;
 148   1              ADPCR = 0X30;
 149   1      
 150   1      
 151   1      
 152   1              PBDIR = 0x08;                   //pb1输出低电平
 153   1              PBPU = ~0x08;                   //pb1不上拉
 154   1              PBREG = 0x00;
 155   1              PWM_PERIOD0L = 0x98;            //pwm周期为3.4KHz   时钟４Ｍ
 156   1              PWM_PERIOD0H = 0x04;
 157   1      //      PWM_PERIOD0L = 0xe2;            //pwm周期为3.2KHz   时钟４Ｍ
 158   1      //      PWM_PERIOD0H = 0x04;                                                       
 159   1              DZ_CTRL = 0x05;                 //pwm0互补输出,全N模式
 160   1              PWM_CTRL = 0x40;                //pwm0装载，连续输出，初始电平为0  
 161   1      
 162   1              WAKEUP_EDGE_REG = 0x42;         //下降沿唤醒
 163   1      
 164   1      
 165   1              IRED_CTRL = 0x09;               //设置发射电流为125ｍA
 166   1              MISC = 0x40;                    //pb6复用IRED  
 167   1      
 168   1      /******************uart*********************/
 169   1      /*      MISC |= 0x80;   //复用uart口
 170   1              SCON =  0X40;   //方式1,溢出率／３２
 171   1              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 172   1              TMOD = 0x00;    //不分频，４Ｍ
 173   1              TH1 =  0X00;
 174   1              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 175   1              TTCON = 0x2a;      */
 176   1      /*******************************************/
 177   1      
 178   1      
 179   1      //      OPA1C0 = 0x23;          //积分增益为８倍
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 4   

 180   1      //      OPA1C1 = 0x0c;          //OPA1连接红外接收管
 181   1      //      OPA1MODE = 0x04;        //设置成开环 
 182   1              
 183   1              OPA1C0 = 0x20;          //模拟电压输出至端口
 184   1              OPA1MODE = 0x0C;        //设置OPA1开环结构
 185   1              OPA1C1 = 0x4f;          //使能OPA1运放跟随
 186   1              OPA2C0 =0X40;           //模拟电压输出至端口
 187   1              OPA2C1 =0X4f;           //使能OPA2运放跟随
 188   1              OPA2C2 = 0X10;
 189   1              
 190   1              
 191   1              LVDC = 0x05;            //2.5V
 192   1              
 193   1      //      TBC = 0xa6;                //TBC开启2s定时
 194   1      //      TBC = 0x08;                //TBC0开启4s定时,TBC1关闭
 195   1      //      TBC = 0X40;
 196   1      //      TBC = 0x84;                //TBC开启0.5s定时
 197   1      //      INTML = 0xf7;      //TBC中断使能
 198   1      //      INTSEL0L = 0x08;   //TBC中断从int0进入  */ 
 199   1               
 200   1              TMR3C = 0X50;           //timer3使用低速时钟,不使能
 201   1              TMR3L = 0X00;
 202   1              TMR3H = 0X06;           //0.125ms*64000=8s
 203   1              INTML = 0XDF;
 204   1              INTSEL0L = 0X20;         
 205   1      
 206   1              WDCNTM = 0x38;
 207   1              WDCNTH = 0x01;          //8K时钟，10s钟
 208   1      //      WDCNTM = 0x38;
 209   1      //      WDCNTH = 0x00;
 210   1              WDCON = 0x20;           //开启看门狗模块
 211   1              WDCON |= 0x10;  
 212   1      
 213   1      
 214   1              E2P_ADDRH=0x00; //起始地址
 215   1              E2P_ADDRL=0x00;
 216   1              E2P_CTRL = 0x10;
 217   1              for(i=0;i<2;i++)
 218   1              {
 219   2                 if(i<1)
 220   2                         E2P_CTRL=0x13;       //启动读
 221   2                 else
 222   2                         E2P_CTRL=0x11;       //启动度
 223   2                 while(!(E2P_FLAG&0x01));//判断是否写完
 224   2                 temp[i]=E2P_DATA;
 225   2              } 
 226   1              if(temp[0]!=(~temp[1]))
 227   1              {
 228   2                      FIRE_ALARM_VALUE = 0x60;
 229   2                      alarm_value = FIRE_ALARM_VALUE;
 230   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;               
 231   2              }
 232   1              else                                       //上电读取报警阈值
 233   1              {
 234   2                      FIRE_ALARM_VALUE = temp[0];
 235   2                      alarm_value = FIRE_ALARM_VALUE;
 236   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;                         
 237   2              }                                         
 238   1              alarm_value = 0xc0;
 239   1              FIRE_ALARM_VALUE = 0xc0;
 240   1      
 241   1      
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 5   

 242   1              delay_20us(250);
 243   1              delay_20us(250);
 244   1              delay_20us(250);
 245   1              delay_20us(250);
 246   1              delay_20us(250);
 247   1              delay_20us(250);
 248   1              delay_20us(250);
 249   1              delay_20us(250);
 250   1              delay_20us(250);
 251   1              delay_20us(250);
 252   1              delay_20us(250);
 253   1              delay_20us(250);   
 254   1              
 255   1      }
 256          
 257          
 258          void Smoke_Detect()
 259          {        
 260   1         
 261   1              unsigned char i,temp[2];
 262   1              unsigned int vol;
 263   1              if(timer_flag>=detect_time)                               //8s检测一次
 264   1              {
 265   2                      timer_flag = 0;
 266   2                      WDCON |= 0x10;
 267   2                      BANDGAP_TEMP = 0x05;
 268   2                      LDO2_CTRL = 0x03;
 269   2      
 270   2      /*              SYS_REG2 = 0x02;        //切换成低频
 271   2                      _nop_();
 272   2                      _nop_();
 273   2                      _nop_();
 274   2                      _nop_();                
 275   2                      _nop_();
 276   2                      _nop_();
 277   2                      _nop_();
 278   2                      _nop_();
 279   2                      _nop_();
 280   2      
 281   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 282   2                      OPA1C1 |= 0x01;         //开启运放              
 283   2                      LDOC = 0x46;
 284   2                      _nop_();
 285   2                      _nop_();
 286   2                      _nop_();
 287   2                      _nop_();
 288   2      
 289   2                      SYS_REG2 = 0xc2;        //切换成高频
 290   2                      _nop_();
 291   2                      _nop_();
 292   2                      _nop_();
 293   2                      _nop_();
 294   2      //              delay_20us(100);                //运放稳定时间
 295   2      */
 296   2                      TMR3C &= ~0x08;         //关闭计数器
 297   2                      delay_20us(20);
 298   2                      TMR3L = 0xc0;           //休眠8ms
 299   2                      TMR3H = 0xff; 
 300   2                      TMR3C |= 0x08;          //开启计数器
 301   2                      Charge_Flag = 1;
 302   2                      PCON |= 0X02;   //mcu_stop,给电容充电                   
 303   2                      _nop_();
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 6   

 304   2                      _nop_();
 305   2                      _nop_();
 306   2                      _nop_();
 307   2                      TMR3C &= ~0x08;         //关闭计数器,到下面检测完成再开启
 308   2      //              LDO2_CTRL = 0x00;//关闭LDO2
 309   2                      Charge_Flag = 0;
 310   2                                
 311   2      
 312   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 313   2                      OPA1C1 |= 0x01;         //开启运放              
 314   2                      LDOC = 0x46;
 315   2                      delay_20us(20);         //运放稳定时间
 316   2      /******************************电源电压检测*/
 317   2                      LDOC |= 0x20;           //打开LDO到ADC基准
 318   2                      LCDC |= 0X70;
 319   2                      LDOC |= 0X10;
 320   2                      ADCR = 0x3b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 321   2      //              ADCR = 0x2b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 322   2                      for(i=0;i<5;i++)
 323   2                      {
 324   3                              ADCR |= 0x80;
 325   3                              ADCR &= ~0x80;          //启动ADC检测
 326   3                              while(ADCR&0x40);       //等待ADC检测结束
 327   3                      }
 328   2                      Battery_Value_H = ADRH;
 329   2                      Battery_Value_L = ADRL;
 330   2                      ADCR = 0x00;
 331   2                      LDOC &= ~0x20;          
 332   2                      LDOC &= ~0X10;
 333   2                      LCDC &= ~0X70;
 334   2      
 335   2              //      4096*2.4*2;//2560为3V,每85个字为0.1V
 336   2                      vol = (((unsigned int)Battery_Value_H)<<4);
 337   2                      vol += (unsigned int)Battery_Value_L>>4;
 338   2      
 339   2      
 340   2       
 341   2                      if(voltage_bak==0x00)   //首次检测
 342   2                      {
 343   3                              adjust_flag = 1;
 344   3                              voltage_bak = vol;      //保存上一次校准时的电压
 345   3                      }
 346   2                      else
 347   2                      {
 348   3                              if((vol>=(voltage_bak+8))||(vol<=(voltage_bak-8)))      //迟滞10mv
 349   3                              {
 350   4                                      adjust_flag = 1;
 351   4                                      voltage_bak = vol;      //保存上一次校准时的电压
 352   4                              }       
 353   3                      }
 354   2      
 355   2                      if(adjust_flag)
 356   2                      {
 357   3                              adjust_flag = 0;
 358   3                              temp[0] = 24;
 359   3      
 360   3                              if(vol>2688)            //大于3.15V
 361   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr+1];
 362   3                              else if((vol>2474)&&(vol<=2688))                //大于2.9V
 363   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr];
 364   3                              else if((vol>2389)&&(vol<=2474))                //大于2.8V
 365   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-1];
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 7   

 366   3                              else if((vol>2304)&&(vol<=2389))                //大于2.7V
 367   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-2];
 368   3                              else if((vol>2218)&&(vol<=2304))                //大于2.6V
 369   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-3];
 370   3                              else if((vol>2176)&&(vol<=2218))                //大于2.55V
 371   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-4];
 372   3                              else if((vol>2133)&&(vol<=2176))                //大于2.5V
 373   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-5];
 374   3                              else if((vol>2090)&&(vol<=2133))                //大于2.45V
 375   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-7]; 
 376   3                              else if((vol>2048)&&(vol<=2090))                //大于2.4V
 377   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-9];
 378   3                              else if((vol>2005)&&(vol<=2048))                //大于2.35V
 379   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-11];
 380   3      
 381   3                      }       
 382   2                      
 383   2      
 384   2      
 385   2      /****************************************************/
 386   2      //              temp[0] = 10;
 387   2                      BANDGAP_TEMP = 0x01;
 388   2                      OPA1MODE |= 0x01;       //Sw_integ
 389   2      
 390   2      //              for(i=temp[0];i>0;i--);
 391   2                      delay_20us(5);
 392   2      
 393   2                      OPA1MODE |= 0x02;
 394   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 395   2                      LDOC |= 0x20;           //打开LDO到ADC基准       
 396   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 397   2                      ADCR |= 0x80;
 398   2                      ADCR &= ~0x80;          //启动ADC检测
 399   2                      while(ADCR&0x40);       //等待ADC检测结束
 400   2                      Dark_Value = ADRH;      //暗电流检测，取ADC高8位
 401   2                      ADCR = 0x00;
 402   2                      LDOC &= ~0x20;
 403   2                      OPA1MODE &= ~0x03;
 404   2      
 405   2      /*****************必须按照该时序**************/         
 406   2                      OPA1MODE |= 0x02;
 407   2                      IRED_CTRL |= 0x20;      //IRED使能
 408   2                      OPA1MODE &= ~0x02;
 409   2                      OPA1MODE |= 0x01;       //Sw_integ
 410   2      
 411   2      //              for(i=temp[0];i>0;i--);
 412   2                      delay_20us(5);
 413   2      
 414   2                      OPA1MODE |= 0x02;        
 415   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 416   2      /********************************************/
 417   2      
 418   2                      LVDC |= 0x10;   //开启低压检测,需提前开启
 419   2      
 420   2                      LDOC |= 0x20;
 421   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 422   2                      ADCR |= 0x80;
 423   2                      ADCR &= ~0x80;          //启动ADC检测
 424   2                      while(ADCR&0x40);       //等待ADC检测结束
 425   2                      Smoke_Value = ADRH;     //光电流检测，取ADC高8位
 426   2                      ADCR = 0x00;
 427   2                      LDOC = 0x00;
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 8   

 428   2                      //LED_ON();
 429   2                      if(LVDC&0x20)
 430   2                      {
 431   3                          
 432   3                              lvd_flag = 1;
 433   3                      }
 434   2                      else
 435   2                      {
 436   3                              lvd_flag = 0;
 437   3                              lvd_time = 0;
 438   3                      }
 439   2                      LVDC &= ~0x10;  //关闭低压检测
 440   2      
 441   2                      OPA1MODE = 0x04;        //关闭所有开关并配置成开环模式
 442   2                      BANDGAP_TEMP = 0x04;
 443   2                      LDO2_CTRL = 0x00;//关闭LDO2
 444   2                      OPA1C1 &= ~0x01;        //关闭运放
 445   2                      
 446   2      
 447   2                      if(Smoke_Value>=Dark_Value)
 448   2                      Smoke_Value = Smoke_Value - Dark_Value;
 449   2                      else
 450   2                      Smoke_Value = 0;
 451   2      
 452   2      
 453   2      //              Smoke_Value = 0xff;
 454   2      
 455   2                      if(rxd_flag==2)         //读烟雾值
 456   2                      {
 457   3                              SBUF = Smoke_Value;
 458   3                      /*      SBUF = Battery_Value_H;
 459   3                              while(rxd_flag);
 460   3                              rxd_flag = 1;
 461   3                              SBUF = Battery_Value_L;*/       
 462   3                              while(rxd_flag);
 463   3                              INTMH |= 0x02;
 464   3                              MISC &= ~0x80;  //复用IO口
 465   3                      }
 466   2                      else if(rxd_flag==3)      //标定
 467   2                      {
 468   3                              temp[0] = Smoke_Value + delta_value;
 469   3                              temp[1] = ~temp[0];
 470   3                              E2P_ADDRH=0x00; //E2地址
 471   3                              E2P_ADDRL=0x00;
 472   3                              E2P_CTRL = 0x20;
 473   3                              for(i=0;i<2;i++)
 474   3                              {
 475   4                                 E2P_DATA=temp[i];//数据
 476   4                                 if(i<1)
 477   4                                         E2P_CTRL=0x23;       //启动写
 478   4                                 else
 479   4                                         E2P_CTRL=0x21;       //启动写最后一个字节
 480   4                                 while(!(E2P_FLAG&0x02));//判断是否写完       
 481   4                              } 
 482   3              //              FIRE_ALARM_VALUE = Smoke_Value + delta_value;
 483   3              //              QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;
 484   3              //              alarm_value = FIRE_ALARM_VALUE;
 485   3      
 486   3                              IRED_CTRL = delta_value;
 487   3      
 488   3                              SBUF = Smoke_Value + delta_value;
 489   3                              while(rxd_flag);
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 9   

 490   3                              INTMH |= 0x02;
 491   3                              MISC &= ~0x80;  //复用IO口
 492   3                      }
 493   2      
 494   2                      if((!silince_flag)||(self_check_flag))          //非消音状态或者自检
 495   2                      {
 496   3                              if(Smoke_Value>alarm_value)
 497   3                              {
 498   4                              //      PAREG = ~PAREG;
 499   4                                      detect_count++;
 500   4                                      if(detect_count>3)              //防止溢出
 501   4                                      detect_count = 3;
 502   4                                      if(detect_count==1)
 503   4                                      {
 504   5                                              detect_time = DETECT_TIME1;
 505   5                                              TMR3L = 0x80;           //间隔2s
 506   5                                              TMR3H = 0xc1; 
 507   5                                              TMR3C |= 0x08;          //开启计数
 508   5                                      }
 509   4                                      else if(detect_count==2)
 510   4                                      {
 511   5                                              detect_time = DETECT_TIME2;
 512   5                                              TMR3L = 0xc0;           //间隔1s
 513   5                                              TMR3H = 0xe0; 
 514   5                                              TMR3C |= 0x08;          //开启计数
 515   5                                      }
 516   4                                      else
 517   4                                      {
 518   5                                              detect_time = DETECT_TIME3;
 519   5                              //              if(alarm_flag==0)
 520   5                                              {
 521   6                                                      TMR3L = 0x60;           //间隔0.5
 522   6                                                      TMR3H = 0xf0; 
 523   6                                                      TMR3C |= 0x08;          //开启计数
 524   6                                              }
 525   5                                              alarm_flag = 1;
 526   5                                              bz_timer = BZ_TIME;
 527   5      //                                      PAREG = ~PAREG;
 528   5                                      }
 529   4                                      led_falg = 1;
 530   4                                      if(!self_check_flag)
 531   4                                      alarm_value = QUIT_ALARM_VALUE;
 532   4      
 533   4                                      
 534   4                              }
 535   3                              else     //火警取消，恢复初始
 536   3                              {
 537   4                                      detect_count = 0;
 538   4                                      detect_time = DETECT_TIME1;
 539   4                                      alarm_value = FIRE_ALARM_VALUE;
 540   4                                      alarm_flag = 0;
 541   4                                      bz_timer = 0;
 542   4                                      PWM_CTRL &= ~0x01;
 543   4                                      sleep_flag = 1;
 544   4                                      bz_step = 0;
 545   4                                      TMR3L = 0x00;           //休眠8s
 546   4                                      TMR3H = 0x06; 
 547   4                                      TMR3C |= 0x08;          //开启计数
 548   4                              }
 549   3                      }
 550   2                      else             //消音状态下,开启8s定时器
 551   2                      {
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 10  

 552   3                              TMR3L = 0x00;           //休眠8s
 553   3                              TMR3H = 0x06; 
 554   3                              TMR3C |= 0x08;          //开启计数
 555   3                      }
 556   2                      led_timer++;
 557   2                      if(!silince_flag)
 558   2                      {
 559   3                              if(led_timer>=LED_TIME_NORMAL)
 560   3                              {
 561   4                                      led_falg = 1;
 562   4                                      led_timer = 0;
 563   4                              }
 564   3                      }
 565   2                      else
 566   2                      {
 567   3                              if(led_timer>=LED_TIME_SLIENCDE)
 568   3                              {
 569   4                                      led_falg = 1;
 570   4                                      led_timer = 0;
 571   4                              }
 572   3                      }                        
 573   2              } 
 574   1      }
 575          
 576          
 577          void BZ_Process()
 578          {
 579   1              if((bz_timer>=BZ_TIME)&&(alarm_flag))                     //报警声音处理
 580   1              {
 581   2                      led_falg = 1;
 582   2                      bz_timer = 0;
 583   2                      lvd_time = 0;                     //报警时低压报警时间清零
 584   2                      if(PWM_CTRL&0x01)
 585   2                      {
 586   3                              PWM_CTRL &= ~0x01;
 587   3                              sleep_flag = 1;
 588   3                      }
 589   2                      else
 590   2                      {
 591   3                              if(bz_step>=8)
 592   3                              bz_step = 7;
 593   3                              PWM_PULSE0L = BZ_Freq[bz_step]&0x00ff;
 594   3                              PWM_PULSE0H = BZ_Freq[bz_step]>>8;
 595   3                              PWM_CTRL |= 0x40;
 596   3                              PWM_CTRL |= 0x01;
 597   3                              bz_step++;
 598   3                              sleep_flag = 0;
 599   3                      }
 600   2              }
 601   1      }
 602          
 603          
 604          
 605          void Key_Process()
 606          {
 607   1              if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 608   1              {
 609   2                      delay_20us(250);
 610   2                      if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 611   2                      {
 612   3                              key_flag = 1;
 613   3                              
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 11  

 614   3                              if(alarm_flag==1)                 //消音
 615   3                              {
 616   4                                      silince_flag = 1;
 617   4                                      alarm_value = SLIENCDE_VALUE;
 618   4                                      detect_count = 0;
 619   4                                      detect_time = DETECT_TIME1;
 620   4                                      timer_flag = 0;
 621   4                                      alarm_flag = 0;
 622   4                                      PWM_CTRL &= ~0x01;                 //关闭蜂鸣器
 623   4                                      sleep_flag = 1;
 624   4                                      bz_timer = 0;
 625   4                                      TMR3C &= ~0x08;         //关闭计数器
 626   4                                      delay_20us(20);
 627   4                                      TMR3L = 0x00;           //间隔8s
 628   4                                      TMR3H = 0x06; 
 629   4                                      TMR3C |= 0x08;
 630   4      
 631   4                              }
 632   3                              else                                      //自检
 633   3                              {
 634   4                                      self_check_flag = 1;
 635   4                                      alarm_value = SLEF_CHECK_VALUE;
 636   4                                      detect_count = 2;
 637   4                                      detect_time = DETECT_TIME3;
 638   4                                      timer_flag = 1;
 639   4      
 640   4                                      if(silince_flag)
 641   4                                      silince_time_bak = silince_time;
 642   4      
 643   4                                      TMR3C &= ~0x08;         //关闭计数器
 644   4                                      delay_20us(20);
 645   4                                      TMR3L = 0x60;           //间隔0.5s
 646   4                                      TMR3H = 0xf0; 
 647   4                                      TMR3C |= 0x08;
 648   4      
 649   4                              }
 650   3                      }       
 651   2              }
 652   1              else if(((PAREG&0x40))&&(key_flag))
 653   1              {
 654   2                      delay_20us(250);
 655   2                      if(((PAREG&0x40))&&(key_flag))    //按键松开
 656   2                      {
 657   3                              key_flag = 0;
 658   3                              alarm_flag = 0;
 659   3                              PWM_CTRL &= ~0x01;
 660   3                              bz_step = 0;
 661   3                              if(!silince_flag)
 662   3                              alarm_value = FIRE_ALARM_VALUE;
 663   3                              detect_count = 0;
 664   3                              detect_time = DETECT_TIME1;
 665   3                              sleep_flag = 1;
 666   3                              self_check_flag = 0;
 667   3                              lvd_time = 0;
 668   3      
 669   3                              if(silince_flag)
 670   3                              silince_time = silince_time_bak;        
 671   3      
 672   3                              TMR3C &= ~0x08;         //关闭计数器
 673   3                              delay_20us(20);
 674   3                              TMR3L = 0x00;           //间隔8s
 675   3                              TMR3H = 0x06; 
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 12  

 676   3                              TMR3C |= 0x08;
 677   3                      }
 678   2              }               
 679   1      
 680   1              if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 681   1              {
 682   2                      delay_20us(1);
 683   2                      if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 684   2                      {
 685   3                              rxd_flag = 1;
 686   3                              
 687   3                              MISC |= 0x80;   //复用uart口
 688   3                              SCON =  0X50;   //方式1,溢出率／３２
 689   3                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 690   3                              TMOD = 0x00;    //不分频，４Ｍ
 691   3                              TH1 =  0X00;
 692   3                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 693   3                              TTCON = 0x2a;
 694   3                              INTMH &= ~0x02;
 695   3                              comm_step = 0;
 696   3                              timer_flag = 0xaa;      //进行一次采样
 697   3                              while(rxd_flag==1);
 698   3                              if(rxd_flag==4)           //读报警阈值
 699   3                              {
 700   4                                      timer_flag = 0;
 701   4                                      SBUF = alarm_value;
 702   4                                      while(rxd_flag);
 703   4                                      INTMH |= 0x02;
 704   4                                      MISC &= ~0x80;  //复用IO口
 705   4                              }
 706   3                              
 707   3                      }
 708   2              } 
 709   1      }
 710          
 711          
 712          void Other_Process()
 713          {
 714   1              if(silince_time>=SLIENCDE_TIME)           //消音时间到
 715   1              {
 716   2                      silince_flag = 0;
 717   2                      silince_time = 0;
 718   2                      silince_time_bak = 0;
 719   2                      alarm_value = FIRE_ALARM_VALUE; 
 720   2                      lvd_time = 0;
 721   2              }
 722   1      
 723   1              if(led_falg)
 724   1              {
 725   2                      led_falg = 0;
 726   2                      LED_ON();
 727   2                      delay_20us(250);
 728   2                      LED_OFF();
 729   2              }       
 730   1      //      if((!silince_flag)&&(!alarm_flag)&&(lvd_time>=LVD_TIME))           //低压报警
 731   1              if((!alarm_flag)&&(lvd_time>=LVD_TIME))
 732   1              {
 733   2                      lvd_time = 0;
 734   2                      PWM_PULSE0L = 0x50;
 735   2                      PWM_PULSE0H = 0x02;
 736   2                      PWM_CTRL |= 0x40;
 737   2                      PWM_CTRL |= 0x01;
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 13  

 738   2                      LED_ON();
 739   2                      delay_20us(250);
 740   2                      LED_OFF();
 741   2                      delay_20us(250);
 742   2                      PWM_CTRL &= ~0x01;
 743   2              }
 744   1      }
 745          
 746          
 747          void Sleep()
 748          {
 749   1              if(((SYS_REG4&0x10)==0x00)&&(sleep_flag))
 750   1              {
 751   2      //              sleep_flag = 0;
 752   2                      
 753   2                      BANDGAP_TEMP = 0X04; //关闭bandgap
 754   2                      LDO2_CTRL = 0x00;//关闭LDO2             
 755   2      //              delay_20us(20);
 756   2                      if(PAREG&0x40)            //未按按键开启pA6,pA1唤醒
 757   2                      WAKE_EN = 0x42;           //
 758   2                      PCON |= 0X02;   //mcu_stop                      
 759   2                      _nop_();
 760   2                      _nop_();
 761   2                      _nop_();
 762   2                      _nop_(); 
 763   2                  WAKE_EN = 0x00;     //关闭pA7唤醒
 764   2      //              PAREG = ~PAREG;
 765   2              
 766   2              } 
 767   1      
 768   1      }
 769          void delay_20us(unsigned char N)
 770          {
 771   1          unsigned char i;
 772   1          while(N--)     //6cycle
 773   1          {
 774   2              for(i=5;i>0;i--);
 775   2          }
 776   1      
 777   1      }
 778          
 779          
 780          void isr0()     using 0    interrupt 0
 781          {
 782   1      //              
 783   1      /*      if(TBC_INT&0x01)        //TB0中断固定8s
 784   1              {
 785   1                      if(!fast_flag)
 786   1                      {
 787   1                              TBC_INT = 0x00;
 788   1                              timer_flag += 8;
 789   1                              if(silince_flag)
 790   1                              silince_time += 8;
 791   1                              if(lvd_flag)
 792   1                          lvd_time += 8;
 793   1                      }
 794   1                      else
 795   1                      TBC_INT &= ~0x01;
 796   1              }
 797   1              if(TBC_INT&0x02)        //唤醒加快时开启，TB1中断0.5s 
 798   1              {
 799   1                      TBC_INT &= ~0x02;
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 14  

 800   1                      timer_flag++;
 801   1                      bz_timer++;
 802   1                      if(silince_flag)
 803   1                      silince_time++;
 804   1                      if(lvd_flag)
 805   1                  lvd_time++; 
 806   1      
 807   1      
 808   1              } */
 809   1              if(TMRINT&0X02)
 810   1              {
 811   2                      TMRINT &= ~0X02;
 812   2                      if(Charge_Flag==0)         //非电容充电唤醒
 813   2                      {       
 814   3                              timer_flag++;
 815   3                              bz_timer++;
 816   3                              if(silince_flag)
 817   3                              silince_time++;
 818   3                              if(lvd_flag)
 819   3                          lvd_time++;
 820   3                      }
 821   2      //              PAREG = ~PAREG;
 822   2              }       
 823   1      }
 824          
 825          
 826          
 827          
 828          void isr1()     using 1    interrupt 2            //uart中断
 829          {
 830   1              unsigned char temp;
 831   1              if(SCON&0X01)     //接收完成
 832   1              {
 833   2                      SCON &= ~0X01;
 834   2                      temp = SBUF;
 835   2                      if(temp==0xaa)          //读烟雾值
 836   2                      rxd_flag = 2;
 837   2                      else if(temp==0xa0)             //读报警阈值
 838   2                      rxd_flag = 4;
 839   2                      else if(temp==0x55)             //标定
 840   2                      comm_step = 1;
 841   2                      else if (comm_step==1)
 842   2                      {
 843   3                              delta_value =  temp;
 844   3                              rxd_flag = 3;
 845   3                      }       
 846   2              }
 847   1              if(SCON&0X02)    //发送完成
 848   1              {
 849   2                      SCON &= ~0X02;
 850   2                      rxd_flag = 0;
 851   2              }
 852   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2071    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32       5
   IDATA SIZE       =   ----    ----
C51 COMPILER V8.08   MAIN                                                                  08/07/2020 10:23:04 PAGE 15  

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
