C51 COMPILER V8.08   MAIN                                                                  08/05/2020 13:06:35 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "DP80390CPU.H"
   2          #include "common.h"
   3          #include "register.h"
   4          #include "intrins.h"
   5          
   6          //#define FIRE_ALARM_VALUE   0x40
   7          //#define FIRE_ALARM_VALUE   10
   8          //#define QUIT_ALARM_VALUE   (FIRE_ALARM_VALUE-10)
   9          #define SLEF_CHECK_VALUE   0x00
  10          #define SLIENCDE_VALUE     0xFF
  11          
  12          #define SLIENCDE_TIME      50           //静音时间8*50/60=6.667ｓ
  13          #define DETECT_TIME1       1            //8s
  14          #define DETECT_TIME2       1            //2s
  15          #define DETECT_TIME3       2            //1s
  16          #define BZ_TIME                    1            //500ms
  17          #define LED_TIME_NORMAL    8            //正常64ｓ闪一次
  18          #define LED_TIME_SLIENCDE  1            //静音模式下8ｓ闪一次
  19          #define LVD_TIME               5                //低压报警时间4０ｓ
  20                                                                             
  21          
  22          #define LED_ON()        PCREG &= ~0x08
  23          #define LED_OFF()       PCREG |= 0x08     
  24          
  25          
  26          //unsigned int code BZ_Freq[]={0x560,0x540,0x500,0x300,0x1E0};
  27          //unsigned int code BZ_Freq[]={0x4C0,0x4A0,0x400,0x380,0x270};  //50%占空比最响
  28          //unsigned int code BZ_Freq[]={0x09,0x08,0x07,0x06,0x05};
  29          
  30          /*
  31          unsigned int code BZ_Freq[]={0x495,0x490,0x480,0x460,0x430,0x3c0,0x320,0x250};  //50%占空比最响
  32          unsigned char code IRED_ADJ[]=
  33          {
  34          0x4f,0x4e,0x0f,0x0e,
  35          0x4d,0x4c,0x0d,0x0c,
  36          0x4b,0x4a,0x0b,0x0a,
  37          0x49,0x48,0x09,0x08,
  38          0x47,0x46,0x07,0x06,
  39          0x45,0x44,0x05,0x04,
  40          0x43,0x42,0x03,0x02,
  41          };               //发射电流由大变小      
  42          */
  43          
  44          unsigned char Smoke_Value;
  45          unsigned char Dark_Value;
  46          unsigned char timer_flag;
  47          unsigned char bz_timer;
  48          unsigned char bz_step;
  49          unsigned char alarm_flag;
  50          unsigned char alarm_value;
  51          unsigned char detect_time;
  52          unsigned char detect_count;
  53          unsigned char sleep_flag;
  54          unsigned char key_flag;
  55          unsigned char rxd_flag;
C51 COMPILER V8.08   MAIN                                                                  08/05/2020 13:06:35 PAGE 2   

  56          unsigned char silince_flag;
  57          unsigned char led_falg;
  58          unsigned char led_timer;
  59          unsigned int  silince_time;
  60          unsigned char self_check_flag;
  61          unsigned char lvd_flag;
  62          unsigned char lvd_time;
  63          unsigned char FIRE_ALARM_VALUE;
  64          unsigned char QUIT_ALARM_VALUE;
  65          unsigned char delta_value;
  66          unsigned char comm_step;
  67          unsigned char Battery_Value_H;
  68          unsigned char Battery_Value_L;
  69          unsigned int voltage_bak;
  70          unsigned char adjust_flag;
  71          unsigned char silince_time_bak;
  72          unsigned char IRED_Ptr;
  73          unsigned char Charge_Flag;
  74          
  75          
  76          
  77          void delay_20us(unsigned char N);
  78          void MCU_Init();
  79          void Smoke_Detect();
  80          
  81          
  82          void main()
  83          {
  84   1              MCU_Init();
  85   1      
  86   1              timer_flag = 0;
  87   1              bz_timer = 0;
  88   1              bz_step = 0;
  89   1              alarm_flag = 0;
  90   1              detect_time = DETECT_TIME1;             //8s
  91   1              detect_count = 0;
  92   1              sleep_flag = 1;
  93   1              key_flag = 0;
  94   1              silince_time = 0;
  95   1              silince_time_bak = 0;
  96   1              silince_flag = 0;
  97   1              led_falg = 0;
  98   1              self_check_flag = 0;
  99   1              lvd_flag = 0;
 100   1              lvd_time = 0;
 101   1              comm_step = 0;
 102   1              voltage_bak = 0;
 103   1              IRED_Ptr = 14;          //设置指针初始位置
 104   1              Charge_Flag = 0;
 105   1              while(1)
 106   1              {
 107   2                      WDCON |= 0x10;
 108   2                      LVDC |= 0x10;
 109   2                      delay_20us(250);
 110   2      
 111   2      /*              if(LVDC&0x20)
 112   2                      {                   
 113   2                              LED_ON();
 114   2                      }
 115   2                      else
 116   2                      {
 117   2                              LED_OFF();
C51 COMPILER V8.08   MAIN                                                                  08/05/2020 13:06:35 PAGE 3   

 118   2                      }*/       
 119   2              }       
 120   1      
 121   1      
 122   1      }
 123          
 124          void MCU_Init()
 125          {
 126   1              unsigned char i,temp[2];
 127   1              SYS_REG_MASK = 0xA5;
 128   1              SYS_REG1 = 0x58;         //打开看门狗使能，打开低压复位，打开高速振荡器
 129   1              SYS_REG3 = 0x10;         //     
 130   1      //      SYS_REG2 = 0xC2;         //高速时钟4分频，空闲模式              
 131   1      //      SYS_REG4 = 0x0c;         //PWM用高速时钟4分频
 132   1              SYS_REG2 = 0x03;
 133   1              SYS_REG4 = 0x01;         //PWM用高速时钟
 134   1              LXT_START = 0X00;
 135   1      
 136   1              IE = 0x85;                                      //全局中断，int1(),int0()中断使能
 137   1              IP = 0x01;                                              //int0优先
 138   1              TCON = 0x05;                                    //int0,int1为沿触发     
 139   1                
 140   1              
 141   1      
 142   1              BANDGAP_TEMP = 0x05;
 143   1              LDO2_CTRL = 0X03;
 144   1      
 145   1              
 146   1              PADIR = 0x01;
 147   1              PAPU = 0XFe;
 148   1              PAREG = 0x00;
 149   1      
 150   1              PCDIR = 0x08;    //红色led等pc3
 151   1              PCPU = 0XF7;
 152   1              PCREG = 0x08;
 153   1              ADPCR = 0X30;
 154   1      
 155   1      
 156   1      
 157   1              PBDIR = 0x08;                   //pb1输出低电平
 158   1              PBPU = ~0x08;                   //pb1不上拉
 159   1              PBREG = 0x00;
 160   1              PWM_PERIOD0L = 0x98;            //pwm周期为3.4KHz   时钟４Ｍ
 161   1              PWM_PERIOD0H = 0x04;
 162   1      //      PWM_PERIOD0L = 0xe2;            //pwm周期为3.2KHz   时钟４Ｍ
 163   1      //      PWM_PERIOD0H = 0x04;                                                       
 164   1              DZ_CTRL = 0x05;                 //pwm0互补输出,全N模式
 165   1              PWM_CTRL = 0x40;                //pwm0装载，连续输出，初始电平为0  
 166   1      
 167   1              WAKEUP_EDGE_REG = 0x42;         //下降沿唤醒
 168   1      
 169   1      
 170   1              IRED_CTRL = 0x09;               //设置发射电流为125ｍA
 171   1              MISC = 0x40;                    //pb6复用IRED  
 172   1      
 173   1      /******************uart*********************/
 174   1      /*      MISC |= 0x80;   //复用uart口
 175   1              SCON =  0X40;   //方式1,溢出率／３２
 176   1              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 177   1              TMOD = 0x00;    //不分频，４Ｍ
 178   1              TH1 =  0X00;
 179   1              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
C51 COMPILER V8.08   MAIN                                                                  08/05/2020 13:06:35 PAGE 4   

 180   1              TTCON = 0x2a;      */
 181   1      /*******************************************/
 182   1      
 183   1      
 184   1              OPA1C0 = 0x23;          //积分增益为８倍
 185   1              OPA1C1 = 0x0c;          //OPA1连接红外接收管
 186   1              OPA1MODE = 0x04;        //设置成开环 
 187   1                      
 188   1      
 189   1      //      LVDC = 0x00;            //2.0V
 190   1      //      LVDC = 0x01;            //2.1V
 191   1      //      LVDC = 0x02;            //2.2V
 192   1      //      LVDC = 0x03;            //2.3V
 193   1      //      LVDC = 0x04;            //2.4V
 194   1              LVDC = 0x05;            //2.5V
 195   1      //      LVDC = 0x06;            //2.6V
 196   1      //      LVDC = 0x07;            //2.7V
 197   1      //      LVDC = 0x08;            //3.0V
 198   1      //      LVDC = 0x09;            //3.3V
 199   1      //      LVDC = 0x0a;            //3.6V
 200   1      //      LVDC = 0x0b;            //4.4V
 201   1      
 202   1              
 203   1      //      TBC = 0xa6;                //TBC开启2s定时
 204   1      //      TBC = 0x08;                //TBC0开启4s定时,TBC1关闭
 205   1      //      TBC = 0X40;
 206   1      //      TBC = 0x84;                //TBC开启0.5s定时
 207   1      //      INTML = 0xf7;      //TBC中断使能
 208   1      //      INTSEL0L = 0x08;   //TBC中断从int0进入  */ 
 209   1               
 210   1              TMR3C = 0X58;           //timer3使用低速时钟,并使能
 211   1              TMR3L = 0X00;
 212   1              TMR3H = 0X06;           //0.125ms*64000=8s
 213   1      //      INTML = 0XDF;           //TIME23中断开启
 214   1              INTMH = 0X07;           //LVD中断开启
 215   1              INTSEL0L = 0X20;         
 216   1      
 217   1              WDCNTM = 0x38;
 218   1              WDCNTH = 0x01;          //8K时钟，10s钟
 219   1      //      WDCNTM = 0x38;
 220   1      //      WDCNTH = 0x00;
 221   1              WDCON = 0x28;           //开启看门狗复位功能
 222   1              WDCON |= 0x10;  
 223   1      
 224   1      
 225   1              E2P_ADDRH=0x00; //起始地址
 226   1              E2P_ADDRL=0x00;
 227   1              E2P_CTRL = 0x10;
 228   1              for(i=0;i<2;i++)
 229   1              {
 230   2                 if(i<1)
 231   2                         E2P_CTRL=0x13;       //启动读
 232   2                 else
 233   2                         E2P_CTRL=0x11;       //启动度
 234   2                 while(!(E2P_FLAG&0x01));//判断是否写完
 235   2                 temp[i]=E2P_DATA;
 236   2              } 
 237   1              if(temp[0]!=(~temp[1]))
 238   1              {
 239   2                      FIRE_ALARM_VALUE = 0x60;
 240   2                      alarm_value = FIRE_ALARM_VALUE;
 241   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;               
C51 COMPILER V8.08   MAIN                                                                  08/05/2020 13:06:35 PAGE 5   

 242   2              }
 243   1              else                                       //上电读取报警阈值
 244   1              {
 245   2                      FIRE_ALARM_VALUE = temp[0];
 246   2                      alarm_value = FIRE_ALARM_VALUE;
 247   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;                         
 248   2              }                                         
 249   1              alarm_value = 0xc0;
 250   1              FIRE_ALARM_VALUE = 0xc0;
 251   1      
 252   1      
 253   1              delay_20us(250);
 254   1              delay_20us(250);
 255   1              delay_20us(250);
 256   1              delay_20us(250);
 257   1              delay_20us(250);
 258   1              delay_20us(250);
 259   1              delay_20us(250);
 260   1              delay_20us(250);
 261   1              delay_20us(250);
 262   1              delay_20us(250);
 263   1              delay_20us(250);
 264   1              delay_20us(250);   
 265   1              
 266   1      }
 267          
 268          
 269          void delay_20us(unsigned char N)
 270          {
 271   1          unsigned char i;
 272   1          while(N--)     //6cycle
 273   1          {
 274   2              for(i=5;i>0;i--);
 275   2          }
 276   1      
 277   1      }
 278          
 279          void isr1()     using 1    interrupt 2            
 280          { 
 281   1              PAREG = ~PAREG;
 282   1      
 283   1              if(LVDC&0x40)
 284   1              {           
 285   2                      LED_ON();
 286   2              }
 287   1      }
 288          
 289          
 290          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    445    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
