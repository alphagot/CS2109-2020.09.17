A51 MACRO ASSEMBLER  START390                                                             08/10/2016 08:49:56 PAGE     1


MACRO ASSEMBLER A51 V8.00d
NO OBJECT MODULE REQUESTED
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE START390.A51 SET(SMALL) DEBUG EP

LOC  OBJ            LINE     SOURCE

                       1     $nomod51 
                       2     ;
                       3     ;  *** <<< Use Configuration Wizard in Context Menu >>> ***
                       4     ;------------------------------------------------------------------------------
                       5     ;  This file is part of the C51 Compiler package
                       6     ;  Copyright (c) 1988-2005 Keil Elektronik GmbH and Keil Software, Inc.
                       7     ;  Startup code for Dallas 390/5240 CPU, Contiguous Mode
                       8     ;------------------------------------------------------------------------------
                       9     ;  START390.A51:  This code is executed after processor reset.
                      10     ;  You may add this file to a uVision2 project.
                      11     ;
                      12     ;  To translate this file use A51 with the following invocation:
                      13     ;
                      14     ;     AX51 START390.A51 MOD_CONT
                      15     ;
                      16     ;  To link the modified STARTUP.OBJ file to your application use the following
                      17     ;  LX51 invocation:
                      18     ;
                      19     ;     LX51 your object file list, START390.OBJ controls
                      20     ;
                      21     ;------------------------------------------------------------------------------
                      22     ;
                      23     ;<h> Chip Specific Options 
                      24     ;
                      25     ; <q> SA: Use 1KB stack in on-chip XDATA space
                      26     ;    <i> Extend Stack Address Mode Enable (ACON.2)
  0000                27     SA   EQU 0  ; 0 = 8051 compatible stack in IDATA memory
                      28     ;           ; 1 = Use 1KB stack in on-chip XDATA space
                      29     ;
                      30     ; <h> Memory Control Register (MCON)
                      31     ;
                      32     ;  <o> IDM1..0: Select 4KB on-chip SRAM location (MCON.7..6)
                      33     ;            <0=> XDATA 0x00F000-0x00FFFF
                      34     ;            <1=> XDATA 0x000000-0x000FFF
                      35     ;            <2=> XDATA 0x400000-0x400FFF
                      36     ;            <3=> XDATA and CODE 0x400000-0x400FFF
                      37     ;                 <i> Defines the location and configuration of internal data memory. 
  0000                38     IDM  EQU 0  ; 0 = 4KB on-chip SRAM location X:0x00F000 - X:0x00FFFF
                      39     ;           ; 1 = 4KB on-chip SRAM location X:0x000000 - X:0x000FFF
                      40     ;           ; 2 = 4KB on-chip SRAM location X:0x400000 - X:0x400FFF
                      41     ;           ; 3 = 4KB on-chip SRAM location X:0x400000 - X:0x400FFF
                      42     ;                 and code memory C:0x400000 - C:0x400FFF
                      43     ;
                      44     ;  <o> CMA: Select CAN XDATA memory location (MCON.5)
                      45     ;            <0=> CAN0=0x00EE00-0x00EEFF, CAN1=0x00EF00-0x00EFFF
                      46     ;            <1=> CAN0=0x401000-0x4010FF, CAN1=0x401100-0x4011FF
                      47     ;                 <i> Defines the location of CAN data memory.
  0000                48     CMA  EQU 0  ; 0 = CAN0 X:0x00EE00 - X:0x00EEFF, CAN1 X:0x00EF00 - X:0x00EFFF
                      49                 ; 1 = CAN0 X:0x401000 - X:0x4010FF, CAN1 X:0x401100 - X:0x4011FF
                      50     ;
                      51     ; PDCE3 .. PDCE0: Program/Data Chip Enable (MCON.3, MCON.2, MCON.1, MCON.0)
                      52     ; Program/Data Chip Enable selects whether the CEx signal functions as the chip 
                      53     ; enable for external program memory only (PDCE=0), or as a merged chip enable 
                      54     ; for program and data memory (PDCE=1).
                      55     
                      56     ;  <o> PDCE3: Chip Enable signal function (MCON.3)
                      57     ;            <0=> Standard: program memory only
                      58     ;            <1=> Von Neumann: program and data memory
A51 MACRO ASSEMBLER  START390                                                             08/10/2016 08:49:56 PAGE     2

                      59     ;                 <i> Program/Data Chip Enable selects whether the CE3 signal functions as 
                             the chip 
                      60     ;                 <i> enable for external program memory only (PDCE3=0), or as a merged chi
                             p enable 
                      61     ;                 <i> for program and data memory (PDCE3=1).
  0000                62     PDCE3 EQU 0 ; PDCE3=0: standard:      RD signal for MOVX
                      63                 ; PDCE3=1: von-Neumann: PSEN signal for MOVX
                      64     ;  <o> PDCE2: Chip Enable signal function (MCON.2)
                      65     ;            <0=> Standard: program memory only
                      66     ;            <1=> Von Neumann: program and data memory
                      67     ;                 <i> Program/Data Chip Enable selects whether the CE2 signal functions as 
                             the chip 
                      68     ;                 <i> enable for external program memory only (PDCE2=0), or as a merged chi
                             p enable 
                      69     ;                 <i> for program and data memory (PDCE2=1).
  0000                70     PDCE2 EQU 0 ; PDCE2=0: standard:      RD signal for MOVX
                      71                 ; PDCE2=1: von-Neumann: PSEN signal for MOVX
                      72     ;  <o> PDCE1: Chip Enable signal function (MCON.1)
                      73     ;            <0=> Standard: program memory only
                      74     ;            <1=> Von Neumann: program and data memory
                      75     ;                 <i> Program/Data Chip Enable selects whether the CE1 signal functions as 
                             the chip 
                      76     ;                 <i> enable for external program memory only (PDCE1=0), or as a merged chi
                             p enable 
                      77     ;                 <i> for program and data memory (PDCE1=1).
  0000                78     PDCE1 EQU 0 ; PDCE1=0: standard:      RD signal for MOVX
                      79                 ; PDCE1=1: von-Neumann: PSEN signal for MOVX
                      80     ;  <o> PDCE0: Chip Enable signal function (MCON.0)
                      81     ;            <0=> Standard: program memory only
                      82     ;            <1=> Von Neumann: program and data memory
                      83     ;                 <i> Program/Data Chip Enable selects whether the CE0 signal functions as 
                             the chip 
                      84     ;                 <i> enable for external program memory only (PDCE0=0), or as a merged chi
                             p enable 
                      85     ;                 <i> for program and data memory (PDCE0=1).
  0000                86     PDCE0 EQU 0 ; PDCE0=0: standard:      RD signal for MOVX
                      87                 ; PDCE0=1: von-Neumann: PSEN signal for MOVX
                      88     ; </h>
                      89     
                      90     ; <h> Port 4 Function Control (P4CNT)
                      91     ; ===============================
                      92     ; Port 4 Pin Function (P4CNT.0 .. P4CNT.2)
                      93     ;  <o> P4PF: Port 4 pin function (P4CNT.0..P4CNT.2)
                      94     ;           <0=> All pins used as I/O pins
                      95     ;           <1=> P4.0=CE0
                      96     ;           <5=> P4.0=CE0, P4.1=CE1
                      97     ;           <6=> P4.0=CE0, P4.1=CE1, P4.2=CE2
                      98     ;           <7=> P4.0=CE0, P4.1=CE1, P4.2=CE2, P4.3=CE3
  0007                99     P4PF EQU 7  ; 0 : all pins used as I/O pins (P4.0 - P4.3)
                     100     ;           ; 4 : P4.0 is CE0
                     101     ;           ; 5 : P4.0 is CE0, P4.1 is CE1
                     102     ;           ; 6 : P4.0 is CE0, P4.1 is CE1, P4.2 is CE2
                     103     ;           ; 7 : P4.0 is CE0, P4.1 is CE1, P4.2 is CE2, P4.3 is CE3
                     104     ;
                     105     ; Program Memory Chip Enable Window Size (P4CNT.5 .. P4CNT.3)
                     106     ;  <o> PCES: Program memory Chip Enable window size (P4CNT.5..P4CNT.3)
                     107     ;           <0=> 32KB  address window (0-0x7FFF)
                     108     ;           <4=> 128KB address window (0-0x1FFFF)
                     109     ;           <5=> 256KB address window (0-0x3FFFF)
                     110     ;           <6=> 512KB address window (0-0x7FFFF)
                     111     ;           <7=> 1MB   address window (0-0xFFFFF)
  0007               112     PCES EQU 7  ; 0 = 32KB  address window (0 - 0x7FFF)
                     113     ;           ; 4 = 128KB address window (0 - 0x1FFFF)
                     114     ;           ; 5 = 256KB address window (0 - 0x3FFFF)
                     115     ;           ; 6 = 512KB address window (0 - 0x7FFFF)
                     116     ;           ; 7 = 1MB   address window (0 - 0xFFFFF)
A51 MACRO ASSEMBLER  START390                                                             08/10/2016 08:49:56 PAGE     3

                     117     ;
                     118     ; Single CAN Configuration (P4CNT.6)
  0000               119     SBCAN EQU 0 ; 1 = connects both CAN receive inputs and outputs to P5.0 and P5.1
                     120                 ; 0 = both CAN interfaces work on their respective I/O pins
                     121     ; </h>
                     122     
                     123     ; <h> Port 5 Function Control (P5CNT)
                     124     ; ===============================
                     125     ; <o> SP1EC: Serial Port 1 pin routing (P5CNT.5)
                     126     ;            <0=> P1.2/P1.3
                     127     ;            <1=> P5.2/P5.3
                     128     ;                 <i> Serial Port 1 external pin connection routing
  0000               129     SP1EC EQU 0  ; 0 = Serial Port is routed to P1.2/P1.3
                     130     ;                ; 1 = Serial Port is routed to P5.2/P5.3
                     131     ;
                     132     ; <o> CX_IO: Can I/O enable (P5CNT.3..P5CNT.4)
                     133     ;            <0=> P5.0..P5.3 used as I/O pins
                     134     ;            <1=> P5.2..P5.3 used as I/O pins, P5.0..P5.1 used by CAN0
                     135     ;            <2=> P5.0..P5.1 used as I/O pins, P5.2..P5.3 used by CAN1
                     136     ;            <3=> P5.0..P5.1 used by CAN0, P5.2..P5.3 used by CAN1
  0000               137     CX_IO EQU 0  ; 0 = P5.0 - P5.3 used as I/O pins
                     138     ;            ; 1 = P5.2 & P5.3 used as I/O pins, P5.0 & P5.1 used by CAN0
                     139     ;            ; 2 = P5.0 & P5.1 used as I/O pins, P5.2 & P5.3 used by CAN1;
                     140     ;            ; 3 = P5.0 & P5.1 used by CAN0, P5.2 & P5.3 used by CAN1;
                     141     ;
                     142     ; <o> P5PF: Port 5 pin function (P5CNT.2..P5CNT.0)
                     143     ;           <0=> All pins used as I/O pins (P4.4,P5.5-P5.7)
                     144     ;           <4=> P4.4=PCE0
                     145     ;           <5=> P4.4=PCE0, P5.5=PCE1
                     146     ;           <6=> P4.4=PCE0, P5.5=PCE1, P5.6=PCE2
                     147     ;           <7=> P4.4=PCE0, P5.5=PCE1, P5.6=PCE2, P5.7=PCE3
  0007               148     P5PF EQU 7  ; 0 : all pin used as I/O pin (P4.4,P5.5-P5.7)
                     149     ;           ; 4 : P4.4 is PCE0
                     150     ;           ; 5 : P4.4 is PCE0, P5.5 is PCE1
                     151     ;           ; 6 : P4.4 is PCE0, P5.5 is PCE1, P5.6 is PCE2
                     152     ;           ; 7 : P4.4 is PCE0, P5.5 is PCE1, P5.6 is PCE2, P5.7 is PCE3
                     153     ;  </h>
                     154     ; </h>
                     155     ;------------------------------------------------------------------------------
                     156     ;
                     157     ;  User-defined <h> Power-On Initialization of Memory
                     158     ;
                     159     ;  With the following EQU statements the initialization of memory
                     160     ;  at processor reset can be defined:
                     161     ;
                     162     ; <o> IDATALEN: IDATA memory size <0x0-0x100>
                     163     ;     <i> Note: The absolute start address of IDATA memory is always 0
                     164     ;     <i>       The IDATA space physically overlaps the DATA and BIT areas.
  0080               165     IDATALEN        EQU     80H     ; the length of IDATA memory in bytes.
                     166     ;
                     167     ; <o> XDATASTART: XDATA memory start <0x0-0xFFFF> 
                     168     ;     <i> The absolute start address of XDATA memory.
  0000               169     XDATASTART      EQU     0H      ; the absolute start-address of XDATA memory
                     170     ; <o> XDATALEN: XDATA memory size <0x0-0xFFFF> 
                     171     ;     <i> The length of XDATA memory in bytes.
  0000               172     XDATALEN        EQU     0H      ; the length of XDATA memory in bytes.
                     173     ;
                     174     ; <o> PDATASTART: PDATA memory start <0x0-0xFFFF> 
                     175     ;     <i> The absolute start address of PDATA memory.
  0000               176     PDATASTART      EQU     0H      ; the absolute start-address of PDATA memory
                     177     ; <o> PDATALEN: PDATA memory size <0x0-0xFFFF> 
                     178     ;     <i> The length of PDATA memory in bytes.
  0000               179     PDATALEN        EQU     0H      ; the length of PDATA memory in bytes.
                     180     ;
                     181     ;  Notes:  The IDATA space overlaps physically the DATA and BIT areas of the
                     182     ;          8051 CPU. At minimum the memory space occupied from the C51 
A51 MACRO ASSEMBLER  START390                                                             08/10/2016 08:49:56 PAGE     4

                     183     ;          run-time routines must be set to zero.
                     184     ; </h>
                     185     ;------------------------------------------------------------------------------
                     186     ;
                     187     ; <h> Reentrant Stack Initialization
                     188     ;
                     189     ;  The following EQU statements define the stack pointer for reentrant
                     190     ;  functions and initialize it:
                     191     ;
                     192     ;  <h>Stack Space for reentrant functions in the SMALL model.
                     193     ;   <q> IBPSTACK: Enable SMALL model reentrant stack
                     194     ;       <i> Stack space for reentrant functions in the SMALL model.
  0000               195     IBPSTACK        EQU     0       ; set to 1 if small reentrant is used.
                     196     ;   <o> IBPSTACKTOP: End address of SMALL model stack <0x0-0xFF>
                     197     ;       <i> Set the top of the stack to the highest location.
  0100               198     IBPSTACKTOP     EQU     0FFH+1  ; set top of stack to highest location+1.
                     199     ; </h>
                     200     ;
                     201     ;  <h>Stack space for reentrant functions in the LARGE model.   
                     202     ;   <q> XBPSTACK: Enable LARGE model reentrant stack
                     203     ;       <i> Stack space for reentrant functions in the LARGE model.
  0000               204     XBPSTACK        EQU     0       ; set to 1 if large reentrant is used.
                     205     ;   <o> XBPSTACKTOP: End address of LARGE model stack <0x0-0xFFFF>
                     206     ;       <i> Set the top of the stack to the highest location.
  0000               207     XBPSTACKTOP     EQU     0FFFFH+1; set top of stack to highest location+1.
                     208     ; </h>
                     209     ;
                     210     ; <h> Stack space for reentrant functions in the COMPACT model. 
                     211     ;  <q> PBPSTACK: Enable COMPACT model reentrant stack
                     212     ;      <i> Stack space for reentrant functions in the COMPACT model.
  0000               213     PBPSTACK        EQU     0       ; set to 1 if compact reentrant is used.
                     214     ;  <o> PBPSTACKTOP: End address of COMPACT model stack <0x0-0xFFFF>
                     215     ;      <i> Set the top of the stack to the highest location.
  0000               216     PBPSTACKTOP     EQU     0FFFFH+1; set top of stack to highest location+1.
                     217     ; </h>
                     218     ;</h>
                     219     ;
                     220     ;------------------------------------------------------------------------------
                     221     ;
                     222     ;  Page Definition for Using the Compact Model with 64 KByte xdata RAM
                     223     ; <h> Compact Model Page Definition
                     224     ;   <i> Defines the XDATA page used for PDATA variables.
                     225     ;
                     226     ;  The following EQU statements define the xdata page used for pdata
                     227     ;  variables. The EQU PPAGE must conform with the PPAGE control used
                     228     ;  in the linker invocation.
                     229     ;
                     230     ; <q> PPAGEENABLE: Enable PDATA objects
  0000               231     PPAGEENABLE     EQU     0       ; set to 1 if pdata objects are used.
                     232     ; <o> PPAGE: XDATA page number <0x0-0xff>
                     233     ;   <i> NOTE: This must agree with the PPAGE control used in the linker.
  0000               234     PPAGE           EQU     0       ; define PPAGE number.
                     235     ; </h>
                     236     ;
                     237     ;------------------------------------------------------------------------------
                     238     
                     239     ;#include <REG390.H>
                     240     
*** ERROR #A318 IN 241 (START390.A51, LINE 239): can't open file 'REG390.H'
                     241     
                     242                     NAME    ?C_STARTUP
                     243     
                     244     
                     245     ?C_C51STARTUP   SEGMENT   CODE
                     246     
                     247     IF SA = 1
A51 MACRO ASSEMBLER  START390                                                             08/10/2016 08:49:56 PAGE     5

                               IF IDM = 0
                                 
                                 ?STACK SEGMENT XDATA AT 0F000H
                               ENDIF
                             
                               IF IDM = 1
                                 ?STACK SEGMENT XDATA AT 00000H
                               ENDIF
                             
                               IF IDM = 2
                                 ?STACK SEGMENT HDATA AT 0400000H
                               ENDIF
                             
                               IF IDM = 3
                                 __ERROR__ "Extended Stack not possible when on-chip XRAM is mapped as code & xdata"
                               ENDIF
                             
                                             RSEG    ?STACK
                                             DS      1024
                             ELSE
                     268     
                     269     ?STACK          SEGMENT   IDATA
                     270     
----                 271                     RSEG    ?STACK
0000                 272                     DS      1
                     273     ENDIF
                     274     
                     275                     EXTRN CODE (?C_START)
                     276                     PUBLIC  ?C_STARTUP
*** _________________________________________________^
*** ERROR #A45 IN 276 (START390.A51, LINE 277): UNDEFINED SYMBOL (PASS-2)
                     277     
                     278     ?C_CPURESET?0   SEGMENT CODE OFFS 0
*** ______________________________________________________^
*** ERROR #A9 IN 278 (START390.A51, LINE 279): SYNTAX ERROR
----                 279                     RSEG    ?C_CPURESET?0   
*** _________________________________________________^
*** ERROR #A30 IN 279 (START390.A51, LINE 280): SEGMENT SYMBOL EXPECTED
                     280     
                     281     ?C_STARTUP      LABEL   NEAR
*** _________________________^
*** ERROR #A9 IN 281 (START390.A51, LINE 282): SYNTAX ERROR
                     282                     DB      02H     ; LJMP in Classic 8051 Mode
*** _________________________________________^
*** ERROR #A37 IN 282 (START390.A51, LINE 283): OPERATION INVALID IN THIS SEGMENT
                     283                     DW      WORD0 STARTUP1
*** _________________________________________^
*** ERROR #A37 IN 283 (START390.A51, LINE 284): OPERATION INVALID IN THIS SEGMENT
----                 284                     RSEG    ?C_C51STARTUP
                     285     
0000                 286     STARTUP1:      
                     287                     
0000                 288                     MOV     TA,#0xAA        ; Enable access to P4CNT
*** _________________________________________________^
*** ERROR #A45 IN 288 (START390.A51, LINE 289): UNDEFINED SYMBOL (PASS-2)
0003                 289                     MOV     TA,#0x55       
*** _________________________________________________^
*** ERROR #A45 IN 289 (START390.A51, LINE 290): UNDEFINED SYMBOL (PASS-2)
  003F               290     P4CNT_VAL EQU (SBCAN SHL 6) OR (PCES SHL 3) OR (P4PF)
0006                 291                     MOV     P4CNT,#P4CNT_VAL
*** _________________________________________________^
*** ERROR #A45 IN 291 (START390.A51, LINE 292): UNDEFINED SYMBOL (PASS-2)
                     292     
0009                 293                     MOV     TA,#0xAA        ; Enable access to P5CNT
*** _________________________________________________^
*** ERROR #A45 IN 293 (START390.A51, LINE 294): UNDEFINED SYMBOL (PASS-2)
A51 MACRO ASSEMBLER  START390                                                             08/10/2016 08:49:56 PAGE     6

000C                 294                     MOV     TA,#0x55       
*** _________________________________________________^
*** ERROR #A45 IN 294 (START390.A51, LINE 295): UNDEFINED SYMBOL (PASS-2)
  0007               295     P5CNT_VAL EQU (SP1EC SHL 5) OR (CX_IO SHL 3) OR (P5PF)
000F                 296                     MOV     P5CNT,#P5CNT_VAL                      
*** _________________________________________________^
*** ERROR #A45 IN 296 (START390.A51, LINE 297): UNDEFINED SYMBOL (PASS-2)
                     297     
                     298     
                     299     
0012                 300                     MOV     TA,#0xAA        ; Enable access to ACON
*** _________________________________________________^
*** ERROR #A45 IN 300 (START390.A51, LINE 301): UNDEFINED SYMBOL (PASS-2)
0015                 301                     MOV     TA,#0x55
*** _________________________________________________^
*** ERROR #A45 IN 301 (START390.A51, LINE 302): UNDEFINED SYMBOL (PASS-2)
  0002               302     ACON_VAL EQU (2 OR (SA SHL 2)) ; 22-bit contigious mode, SA bit
0018                 303                     MOV     ACON,#ACON_VAL
*** _________________________________________________^
*** ERROR #A45 IN 303 (START390.A51, LINE 304): UNDEFINED SYMBOL (PASS-2)
                     304     
001B                 305                     MOV     TA,#0xAA        ; Enable access to MCON
*** _________________________________________________^
*** ERROR #A45 IN 305 (START390.A51, LINE 306): UNDEFINED SYMBOL (PASS-2)
001E                 306                     MOV     TA,#0x55
*** _________________________________________________^
*** ERROR #A45 IN 306 (START390.A51, LINE 307): UNDEFINED SYMBOL (PASS-2)
  0000               307     MCON_VAL SET (IDM SHL 6) OR (CMA SHL 5) OR (PDCE3 SHL 3) OR (PDCE2 SHL 2)
  0000               308     MCON_VAL SET MCON_VAL OR (PDCE1 SHL 1) OR (PDCE0)
0021                 309                     MOV     MCON,#MCON_VAL
*** _________________________________________________^
*** ERROR #A45 IN 309 (START390.A51, LINE 310): UNDEFINED SYMBOL (PASS-2)
                     310     
                     311     
                     312     IF IDATALEN <> 0
0024 787F            313                     MOV     R0,#IDATALEN - 1
0026 E4              314                     CLR     A
0027 F6              315     IDATALOOP:      MOV     @R0,A
0028 D8FD            316                     DJNZ    R0,IDATALOOP
                     317     ENDIF
                     318     
                     319     IF XDATALEN <> 0
                                             MOV     DPTR,#XDATASTART
                                             MOV     R7,#BYTE0 (XDATALEN)
                               IF (BYTE0 (XDATALEN)) <> 0
                                             MOV     R6,#(BYTE1 XDATALEN) +1
                               ELSE
                                             MOV     R6,#BYTE1 (XDATALEN)
                               ENDIF
                               IF (BYTE1 (XDATALEN)) <> 0
                                             MOV     R5,#(BYTE2 XDATALEN) +1
                               ELSE
                                             MOV     R5,#BYTE2 (XDATALEN)
                               ENDIF
                                             CLR     A
                             XDATALOOP:      MOVX    @DPTR,A
                                             INC     DPTR
                                             DJNZ    R7,XDATALOOP
                                             DJNZ    R6,XDATALOOP
                                             DJNZ    R5,XDATALOOP
                             ENDIF
                     339     
                     340     IF PPAGEENABLE <> 0
                                             MOV     P2,#PPAGE
                                             MOV     MXAX,#0
                             ENDIF
A51 MACRO ASSEMBLER  START390                                                             08/10/2016 08:49:56 PAGE     7

                     344     
                     345     IF PDATALEN <> 0
                                             MOV     R0,#PDATASTART
                                             MOV     R7,#LOW (PDATALEN)
                                             CLR     A
                             PDATALOOP:      MOVX    @R0,A
                                             INC     R0
                                             DJNZ    R7,PDATALOOP
                             ENDIF
                     353     
                     354     IF IBPSTACK <> 0
                             EXTRN DATA (?C_IBP)
                             
                                             MOV     ?C_IBP,#LOW IBPSTACKTOP
                             ENDIF
                     359     
                     360     IF XBPSTACK <> 0
                             EXTRN DATA (?C_XBP)
                             
                                             MOV     ?C_XBP,#HIGH XBPSTACKTOP
                                             MOV     ?C_XBP+1,#LOW XBPSTACKTOP
                             ENDIF
                     366     
                     367     IF PBPSTACK <> 0
                             EXTRN DATA (?C_PBP)
                                             MOV     ?C_PBP,#LOW PBPSTACKTOP
                             ENDIF
                     371     
                     372     IF SA = 1
                                             MOV     SP,#BYTE0 (?STACK-1)
                                             MOV     ESP,#BYTE1 (?STACK-1)
                             ELSE
002A 758100   F      376                     MOV     SP,#?STACK-1
                     377     ENDIF
002D 020000   F      378                     LJMP    ?C_START
                     379     
                     380                     END
A51 MACRO ASSEMBLER  START390                                                             08/10/2016 08:49:56 PAGE     8

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

?C_C51STARTUP. . .  C SEG    0030H       REL=UNIT
?C_CPURESET?0. . .    ----   -----       
?C_START . . . . .  C ADDR   -----       EXT
?C_STARTUP . . . .  N NUMB   -----       
?STACK . . . . . .  I SEG    0001H       REL=UNIT
ACON . . . . . . .    ----   -----       
ACON_VAL . . . . .  N NUMB   0002H   A   
BYTE0. . . . . . .    ----   -----       
BYTE1. . . . . . .    ----   -----       
CMA. . . . . . . .  N NUMB   0000H   A   
CX_IO. . . . . . .  N NUMB   0000H   A   
IBPSTACK . . . . .  N NUMB   0000H   A   
IBPSTACKTOP. . . .  N NUMB   0100H   A   
IDATALEN . . . . .  N NUMB   0080H   A   
IDATALOOP. . . . .  C ADDR   0027H   R   SEG=?C_C51STARTUP
IDM. . . . . . . .  N NUMB   0000H   A   
LABEL. . . . . . .    ----   -----       
MCON . . . . . . .    ----   -----       
MCON_VAL . . . . .  N NUMB   0000H   A   
NEAR . . . . . . .    ----   -----       
OFFS . . . . . . .    ----   -----       
P4CNT. . . . . . .    ----   -----       
P4CNT_VAL. . . . .  N NUMB   003FH   A   
P4PF . . . . . . .  N NUMB   0007H   A   
P5CNT. . . . . . .    ----   -----       
P5CNT_VAL. . . . .  N NUMB   0007H   A   
P5PF . . . . . . .  N NUMB   0007H   A   
PBPSTACK . . . . .  N NUMB   0000H   A   
PBPSTACKTOP. . . .  N NUMB   0000H   A   
PCES . . . . . . .  N NUMB   0007H   A   
PDATALEN . . . . .  N NUMB   0000H   A   
PDATASTART . . . .  N NUMB   0000H   A   
PDCE0. . . . . . .  N NUMB   0000H   A   
PDCE1. . . . . . .  N NUMB   0000H   A   
PDCE2. . . . . . .  N NUMB   0000H   A   
PDCE3. . . . . . .  N NUMB   0000H   A   
PPAGE. . . . . . .  N NUMB   0000H   A   
PPAGEENABLE. . . .  N NUMB   0000H   A   
SA . . . . . . . .  N NUMB   0000H   A   
SBCAN. . . . . . .  N NUMB   0000H   A   
SP . . . . . . . .  D ADDR   0081H   A   
SP1EC. . . . . . .  N NUMB   0000H   A   
STARTUP1 . . . . .  C ADDR   0000H   R   SEG=?C_C51STARTUP
TA . . . . . . . .    ----   -----       
WORD0. . . . . . .    ----   -----       
XBPSTACK . . . . .  N NUMB   0000H   A   
XBPSTACKTOP. . . .  N NUMB   0000H   A   
XDATALEN . . . . .  N NUMB   0000H   A   
XDATASTART . . . .  N NUMB   0000H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 19 ERROR(S)
