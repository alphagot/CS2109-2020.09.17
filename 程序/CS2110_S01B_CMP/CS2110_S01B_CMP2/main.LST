C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "DP80390CPU.H"
   2          #include "common.h"
   3          #include "register.h"
   4          #include "intrins.h"
   5          
   6          //#define FIRE_ALARM_VALUE   0x40
   7          //#define FIRE_ALARM_VALUE   10
   8          //#define QUIT_ALARM_VALUE   (FIRE_ALARM_VALUE-10)
   9          #define SLEF_CHECK_VALUE   0x00
  10          #define SLIENCDE_VALUE     0xFF
  11          
  12          #define SLIENCDE_TIME      50           //静音时间8*50/60=6.667ｓ
  13          #define DETECT_TIME1       1            //8s
  14          #define DETECT_TIME2       1            //2s
  15          #define DETECT_TIME3       2            //1s
  16          #define BZ_TIME                    1            //500ms
  17          #define LED_TIME_NORMAL    8            //正常64ｓ闪一次
  18          #define LED_TIME_SLIENCDE  1            //静音模式下8ｓ闪一次
  19          #define LVD_TIME               2                //低压报警时间4０ｓ 5*8
  20          
  21          
  22          #define LED_ON()        PCREG &= ~0x08
  23          #define LED_OFF()       PCREG |= 0x08
  24          
  25          
  26          //unsigned int code BZ_Freq[]={0x560,0x540,0x500,0x300,0x1E0};
  27          //unsigned int code BZ_Freq[]={0x4C0,0x4A0,0x400,0x380,0x270};  //50%占空比最响
  28          //unsigned int code BZ_Freq[]={0x09,0x08,0x07,0x06,0x05};
  29          unsigned int code BZ_Freq[]={0x495,0x490,0x480,0x460,0x430,0x3c0,0x320,0x250};  //50%占空比最响
  30          unsigned char code IRED_ADJ[]=
  31          {
  32          0x4f,0x4e,0x0f,0x0e,
  33          0x4d,0x4c,0x0d,0x0c,
  34          0x4b,0x4a,0x0b,0x0a,
  35          0x49,0x48,0x09,0x08,
  36          0x47,0x46,0x07,0x06,
  37          0x45,0x44,0x05,0x04,
  38          0x43,0x42,0x03,0x02,
  39          };               //发射电流由大变小
  40          unsigned char Smoke_Value;
  41          unsigned char Dark_Value;
  42          unsigned char timer_flag;
  43          unsigned char bz_timer;
  44          unsigned char bz_step;
  45          unsigned char alarm_flag;
  46          unsigned char alarm_value;
  47          unsigned char detect_time;
  48          unsigned char detect_count;
  49          unsigned char sleep_flag;
  50          unsigned char key_flag;
  51          unsigned char rxd_flag;
  52          unsigned char silince_flag;
  53          unsigned char led_falg;
  54          unsigned char led_timer;
  55          unsigned int  silince_time;
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 2   

  56          unsigned char self_check_flag;
  57          unsigned char lvd_flag;
  58          unsigned char lvd_time;
  59          unsigned char FIRE_ALARM_VALUE;
  60          unsigned char QUIT_ALARM_VALUE;
  61          unsigned char delta_value;
  62          unsigned char comm_step;
  63          unsigned char Battery_Value_H;
  64          unsigned char Battery_Value_L;
  65          unsigned int voltage_bak;
  66          unsigned char adjust_flag;
  67          unsigned char silince_time_bak;
  68          unsigned char IRED_Ptr;
  69          unsigned char Charge_Flag;
  70          
  71          
  72          void delay_1ms(unsigned char N);
  73          void delay_20us(unsigned char N);
  74          void Smoke_Detect();
  75          void BZ_Process();
  76          void Key_Process();
  77          void Other_Process();
  78          void Sleep();
  79          void MCU_Init();
  80          
  81          void main()
  82          {
  83   1              MCU_Init();
  84   1      
  85   1              timer_flag = 0;
  86   1              bz_timer = 0;
  87   1              bz_step = 0;
  88   1              alarm_flag = 0;
  89   1              detect_time = DETECT_TIME1;             //8s
  90   1              detect_count = 0;
  91   1              sleep_flag = 1;
  92   1              key_flag = 0;
  93   1              silince_time = 0;
  94   1              silince_time_bak = 0;
  95   1              silince_flag = 0;
  96   1              led_falg = 0;
  97   1              self_check_flag = 0;
  98   1              lvd_flag = 0;
  99   1              lvd_time = 0;
 100   1              comm_step = 0;
 101   1              voltage_bak = 0;
 102   1              IRED_Ptr = 14;          //设置指针初始位置
 103   1              Charge_Flag = 0;
 104   1              while(1)
 105   1              {
 106   2                      
 107   2                      WDCON |= 0x10;
 108   2                      //LDO2_CTRL = 0x00;
 109   2              //      Key_Process();
 110   2                //    Smoke_Detect();
 111   2          //  BZ_Process();
 112   2                 // Other_Process();
 113   2               // Sleep();
 114   2              
 115   2                        
 116   2              }       
 117   1      
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 3   

 118   1      
 119   1      }
 120          
 121          void MCU_Init()
 122          {
 123   1              unsigned char i,temp[2];
 124   1              SYS_REG_MASK = 0xA5;
 125   1              SYS_REG1 = 0x58;         //打开看门狗使能，打开低压复位，打开高速振荡器
 126   1              SYS_REG3 = 0x10;         //     
 127   1              SYS_REG2 = 0xC2;         //高速时钟4分频，空闲模式              
 128   1              SYS_REG4 = 0x0c;         //PWM用高速时钟4分频
 129   1      //      SYS_REG2 = 0x03;
 130   1      //      SYS_REG4 = 0x01;         //PWM用高速时钟
 131   1              LXT_START = 0X00;
 132   1      
 133   1              IE = 0x85;                                      //全局中断，int1(),int0()中断使能
 134   1              IP = 0x01;                                              //int0优先
 135   1              TCON = 0x05;                                    //int0,int1为沿触发     
 136   1                
 137   1              
 138   1      
 139   1              BANDGAP_TEMP = 0x05;
 140   1              LDO2_CTRL = 0X03;
 141   1      
 142   1      /*      
 143   1              PADIR = 0x04;
 144   1              PAPU = 0X00;
 145   1              PAREG = 0x00;
 146   1      
 147   1              PCDIR = 0x00;    //红色led等pc3
 148   1              PCPU = 0X00;
 149   1              PCREG = 0x00;
 150   1              //ADPCR = 0X30;
 151   1        */
 152   1      
 153   1      
 154   1              PBDIR = 0x08;                   //pb1输出低电平
 155   1              PBPU = ~0x08;                   //pb1不上拉
 156   1              PBREG = 0x00;
 157   1              PWM_PERIOD0L = 0x98;            //pwm周期为3.4KHz   时钟４Ｍ
 158   1              PWM_PERIOD0H = 0x04;
 159   1              //PWM_PERIOD0L = 0xe2;          //pwm周期为3.2KHz   时钟４Ｍ
 160   1      //      PWM_PERIOD0H = 0x04;                                                       
 161   1              DZ_CTRL = 0x05;                 //pwm0互补输出,全N模式
 162   1              PWM_CTRL = 0x40;                //pwm0装载，连续输出，初始电平为0  
 163   1      
 164   1              WAKEUP_EDGE_REG = 0x42;         //下降沿唤醒
 165   1      
 166   1      
 167   1      /*      IRED_CTRL = 0x09;               //设置发射电流为125ｍA
 168   1              MISC = 0x40;                    //pb6复用IRED  
 169   1              LCDC=0X71;
 170   1              LDOC=0X7E;       */
 171   1      /******************uart*********************/
 172   1      /*      MISC |= 0x80;   //复用uart口
 173   1              SCON =  0X40;   //方式1,溢出率／３２
 174   1              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 175   1              TMOD = 0x00;    //不分频，４Ｍ
 176   1              TH1 =  0X00;
 177   1              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 178   1              TTCON = 0x2a;      */
 179   1      /*******************************************/
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 4   

 180   1      
 181   1        /*
 182   1              OPA1C0 = 0x23;          //积分增益为８倍
 183   1              OPA1C1 = 0x0c;          //OPA1连接红外接收管
 184   1              OPA1MODE = 0x04;        //设置成开环 */ 
 185   1      
 186   1              LVDC = 0x05;            //2.5V
 187   1      //      LVDC = 0x00;            //2.5V
 188   1      //      TBC = 0xa6;                //TBC开启2s定时
 189   1      //      TBC = 0x08;                //TBC0开启4s定时,TBC1关闭
 190   1      //      TBC = 0X40;
 191   1      //      TBC = 0x84;                //TBC开启0.5s定时
 192   1      //      INTML = 0xf7;      //TBC中断使能
 193   1      //      INTSEL0L = 0x08;   //TBC中断从int0进入  */ 
 194   1               
 195   1              TMR3C = 0X58;           //timer3使用低速时钟,并使能
 196   1              TMR3L = 0X00;
 197   1              TMR3H = 0X06;           //0.125ms*64000=8s
 198   1              INTML = 0XDF;
 199   1              INTSEL0L = 0X20;         
 200   1      
 201   1              WDCNTM = 0x38;
 202   1              WDCNTH = 0x01;          //8K时钟，10s钟
 203   1      //      WDCNTM = 0x38;
 204   1      //      WDCNTH = 0x00;
 205   1              WDCON = 0x28;           //开启看门狗复位功能
 206   1              WDCON |= 0x10;  
 207   1              OPA1C1=0X00;
 208   1       
 209   1              //CMP1C0=0X20;
 210   1              CMP2C0=0X00;
 211   1      //      CMP1C1=0X1F; 
 212   1              CMP2C1=0x3F;  // 打开COMP2
 213   1      
 214   1              E2P_ADDRH=0x00; //起始地址
 215   1              E2P_ADDRL=0x00;
 216   1              E2P_CTRL = 0x10;
 217   1              for(i=0;i<2;i++)
 218   1              {
 219   2                 if(i<1)
 220   2                         E2P_CTRL=0x13;       //启动读
 221   2                 else
 222   2                         E2P_CTRL=0x11;       //启动度
 223   2                 while(!(E2P_FLAG&0x01));//判断是否写完
 224   2                 temp[i]=E2P_DATA;
 225   2              } 
 226   1              if(temp[0]!=(~temp[1]))
 227   1              {
 228   2                      FIRE_ALARM_VALUE = 0x60;
 229   2                      alarm_value = FIRE_ALARM_VALUE;
 230   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;               
 231   2              }
 232   1              else                                       //上电读取报警阈值
 233   1              {
 234   2                      FIRE_ALARM_VALUE = temp[0];
 235   2                      alarm_value = FIRE_ALARM_VALUE;
 236   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;                         
 237   2              }                                         
 238   1              alarm_value = 0xc0;
 239   1              FIRE_ALARM_VALUE = 0xc0;
 240   1              LED_ON();
 241   1      
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 5   

 242   1              delay_1ms(250);
 243   1              delay_1ms(250);
 244   1          delay_1ms(250);
 245   1          delay_1ms(250);                          
 246   1         
 247   1          LED_OFF();  
 248   1      }
 249          
 250          
 251          void Smoke_Detect()
 252          {        
 253   1         
 254   1              unsigned char i,temp[2];
 255   1              unsigned int vol;
 256   1              if(timer_flag>=detect_time)                               //8s检测一次
 257   1              {
 258   2                      timer_flag = 0;
 259   2                      WDCON |= 0x10;
 260   2                      BANDGAP_TEMP = 0x05;
 261   2                      LDO2_CTRL = 0x03;
 262   2      
 263   2      /*              SYS_REG2 = 0x02;        //切换成低频
 264   2                      _nop_();
 265   2                      _nop_();
 266   2                      _nop_();
 267   2                      _nop_();                
 268   2                      _nop_();
 269   2                      _nop_();
 270   2                      _nop_();
 271   2                      _nop_();
 272   2                      _nop_();
 273   2      
 274   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 275   2                      OPA1C1 |= 0x01;         //开启运放              
 276   2                      LDOC = 0x46;
 277   2                      _nop_();
 278   2                      _nop_();
 279   2                      _nop_();
 280   2                      _nop_();
 281   2      
 282   2                      SYS_REG2 = 0xc2;        //切换成高频
 283   2                      _nop_();
 284   2                      _nop_();
 285   2                      _nop_();
 286   2                      _nop_();
 287   2      //              delay_20us(100);                //运放稳定时间
 288   2      */
 289   2                      TMR3C &= ~0x08;         //关闭计数器
 290   2                      delay_20us(20);
 291   2                      TMR3L = 0xc0;           //休眠8ms
 292   2                      TMR3H = 0xff; 
 293   2                      TMR3C |= 0x08;          //开启计数器
 294   2                      Charge_Flag = 1;
 295   2                      PCON |= 0X02;   //mcu_stop,给电容充电                   
 296   2                      _nop_();
 297   2                      _nop_();
 298   2                      _nop_();
 299   2                      _nop_();
 300   2                      TMR3C &= ~0x08;         //关闭计数器,到下面检测完成再开启
 301   2                      LDO2_CTRL = 0x00;//关闭LDO2
 302   2                      Charge_Flag = 0;
 303   2                                
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 6   

 304   2      
 305   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 306   2                      OPA1C1 |= 0x01;         //开启运放              
 307   2                      LDOC = 0x46;
 308   2                      delay_20us(20);         //运放稳定时间
 309   2      /******************************电源电压检测*/
 310   2      /*              LDOC |= 0x20;           //打开LDO到ADC基准
 311   2                      LCDC |= 0X70;
 312   2                      LDOC |= 0X10;
 313   2                      ADCR = 0x3b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 314   2      //              ADCR = 0x2b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 315   2                      for(i=0;i<5;i++)
 316   2                      {
 317   2                              ADCR |= 0x80;
 318   2                              ADCR &= ~0x80;          //启动ADC检测
 319   2                              while(ADCR&0x40);       //等待ADC检测结束
 320   2                      }
 321   2                      Battery_Value_H = ADRH;
 322   2                      Battery_Value_L = ADRL;
 323   2                      ADCR = 0x00;
 324   2                      LDOC &= ~0x20;          
 325   2                      LDOC &= ~0X10;
 326   2                      LCDC &= ~0X70; */
 327   2      
 328   2              //      4096*2.4*2;//2560为3V,每85个字为0.1V
 329   2                      vol = (((unsigned int)Battery_Value_H)<<4);
 330   2                      vol += (unsigned int)Battery_Value_L>>4;
 331   2      
 332   2      
 333   2       
 334   2                      if(voltage_bak==0x00)   //首次检测
 335   2                      {
 336   3                              adjust_flag = 1;
 337   3                              voltage_bak = vol;      //保存上一次校准时的电压
 338   3                      }
 339   2                      else
 340   2                      {
 341   3                              if((vol>=(voltage_bak+8))||(vol<=(voltage_bak-8)))      //迟滞10mv
 342   3                              {
 343   4                                      adjust_flag = 1;
 344   4                                      voltage_bak = vol;      //保存上一次校准时的电压
 345   4                              }       
 346   3                      }
 347   2      
 348   2                      if(adjust_flag)
 349   2                      {
 350   3                              adjust_flag = 0;
 351   3                              temp[0] = 24;
 352   3      
 353   3                              if(vol>2688)            //大于3.15V
 354   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr+1];
 355   3                              else if((vol>2474)&&(vol<=2688))                //大于2.9V
 356   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr];
 357   3                              else if((vol>2389)&&(vol<=2474))                //大于2.8V
 358   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-1];
 359   3                              else if((vol>2304)&&(vol<=2389))                //大于2.7V
 360   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-2];
 361   3                              else if((vol>2218)&&(vol<=2304))                //大于2.6V
 362   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-3];
 363   3                              else if((vol>2176)&&(vol<=2218))                //大于2.55V
 364   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-4];
 365   3                              else if((vol>2133)&&(vol<=2176))                //大于2.5V
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 7   

 366   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-5];
 367   3                              else if((vol>2090)&&(vol<=2133))                //大于2.45V
 368   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-7]; 
 369   3                              else if((vol>2048)&&(vol<=2090))                //大于2.4V
 370   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-9];
 371   3                              else if((vol>2005)&&(vol<=2048))                //大于2.35V
 372   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-11];
 373   3      
 374   3                      }       
 375   2                      
 376   2      
 377   2      
 378   2      /****************************************************/
 379   2      //              temp[0] = 10;
 380   2      
 381   2      /*              OPA1MODE |= 0x01;       //Sw_integ
 382   2      
 383   2      //              for(i=temp[0];i>0;i--);
 384   2                      delay_20us(5);
 385   2      
 386   2                      OPA1MODE |= 0x02;
 387   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 388   2                      LDOC |= 0x20;           //打开LDO到ADC基准       
 389   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 390   2                      ADCR |= 0x80;
 391   2                      ADCR &= ~0x80;          //启动ADC检测
 392   2                      while(ADCR&0x40);       //等待ADC检测结束
 393   2                      Dark_Value = ADRH;      //暗电流检测，取ADC高8位
 394   2                      ADCR = 0x00;
 395   2                      LDOC &= ~0x20;
 396   2                      OPA1MODE &= ~0x03;
 397   2      
 398   2      /*****************必须按照该时序**************/         
 399   2      /*              OPA1MODE |= 0x02;
 400   2                      IRED_CTRL |= 0x20;      //IRED使能
 401   2                      OPA1MODE &= ~0x02;
 402   2                      OPA1MODE |= 0x01;       //Sw_integ
 403   2      
 404   2      //              for(i=temp[0];i>0;i--);
 405   2                      delay_20us(5);
 406   2      
 407   2                      OPA1MODE |= 0x02;        
 408   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 409   2      /********************************************/
 410   2      
 411   2      /*              LVDC |= 0x10;   //开启低压检测,需提前开启
 412   2      
 413   2                      LDOC |= 0x20;
 414   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 415   2                      ADCR |= 0x80;
 416   2                      ADCR &= ~0x80;          //启动ADC检测
 417   2                      while(ADCR&0x40);       //等待ADC检测结束
 418   2                      Smoke_Value = ADRH;     //光电流检测，取ADC高8位
 419   2                      ADCR = 0x00;
 420   2                      LDOC = 0x00;
 421   2                      //LED_ON();
 422   2                      if(LVDC&0x20)
 423   2                      {
 424   2                          
 425   2                              lvd_flag = 1;
 426   2                      }
 427   2                      else
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 8   

 428   2                      {
 429   2                              lvd_flag = 0;
 430   2                              lvd_time = 0;
 431   2                      }
 432   2                      LVDC &= ~0x10;  //关闭低压检测
 433   2              /*      if (lvd_flag)
 434   2                        {
 435   2      
 436   2                          MISC |= 0x80;       //复用uart口
 437   2                              SCON =  0X50;   //方式1,溢出率／３２
 438   2                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 439   2                              TMOD = 0x00;    //不分频，４Ｍ
 440   2                              TH1 =  0X00;
 441   2                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 442   2                              TTCON = 0x2a;
 443   2                              INTMH &= ~0x02;
 444   2                              SBUF= 0X55;
 445   2                              while(!(SCON&0X02));
 446   2                              SCON &= ~0X02;
 447   2                              INTMH |= 0x02;
 448   2                              MISC &= ~0x80;  //复用IO口
 449   2      
 450   2                         }  */
 451   2      /*              OPA1MODE = 0x04;        //关闭所有开关并配置成开环模式
 452   2                      BANDGAP_TEMP = 0x04;
 453   2              //      LDO2_CTRL = 0x00;//关闭LDO2
 454   2                      OPA1C1 &= ~0x01;        //关闭运放        */
 455   2                      
 456   2      
 457   2                      if(Smoke_Value>=Dark_Value)
 458   2                      Smoke_Value = Smoke_Value - Dark_Value;
 459   2                      else
 460   2                      Smoke_Value = 0;
 461   2      
 462   2      
 463   2      //              Smoke_Value = 0xff;
 464   2      
 465   2      //              if(rxd_flag==2)         //读烟雾值
 466   2              /*      {       
 467   2                          MISC |= 0x80;       //复用uart口
 468   2                              SCON =  0X50;   //方式1,溢出率／３２
 469   2                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 470   2                              TMOD = 0x00;    //不分频，４Ｍ
 471   2                              TH1 =  0X00;
 472   2                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 473   2                              TTCON = 0x2a;
 474   2                              INTMH &= ~0x02;
 475   2                              rxd_flag = 1;
 476   2                              //SBUF =0x11;
 477   2                              //SBUF = Smoke_Value;
 478   2                              SBUF = Battery_Value_H;
 479   2                      /*      while(rxd_flag);
 480   2                              rxd_flag = 1;
 481   2                              SBUF = Battery_Value_L; 
 482   2                              while(rxd_flag);
 483   2                              INTMH |= 0x02;
 484   2                              MISC &= ~0x80;  //复用IO口
 485   2                      } */
 486   2              /*      else if(rxd_flag==3)      //标定
 487   2                      {
 488   2                              temp[0] = Smoke_Value + delta_value;
 489   2                              temp[1] = ~temp[0];
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 9   

 490   2                              E2P_ADDRH=0x00; //E2地址
 491   2                              E2P_ADDRL=0x00;
 492   2                              E2P_CTRL = 0x20;
 493   2                              for(i=0;i<2;i++)
 494   2                              {
 495   2                                 E2P_DATA=temp[i];//数据
 496   2                                 if(i<1)
 497   2                                         E2P_CTRL=0x23;       //启动写
 498   2                                 else
 499   2                                         E2P_CTRL=0x21;       //启动写最后一个字节
 500   2                                 while(!(E2P_FLAG&0x02));//判断是否写完       
 501   2                              } 
 502   2              //              FIRE_ALARM_VALUE = Smoke_Value + delta_value;
 503   2              //              QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;
 504   2              //              alarm_value = FIRE_ALARM_VALUE;
 505   2      
 506   2                              IRED_CTRL = delta_value;
 507   2      
 508   2                              SBUF = Smoke_Value + delta_value;
 509   2                              while(rxd_flag);
 510   2                              INTMH |= 0x02;
 511   2                              MISC &= ~0x80;  //复用IO口
 512   2                      } */
 513   2      
 514   2                      if((!silince_flag)||(self_check_flag))          //非消音状态或者自检
 515   2                      {
 516   3                              if(Smoke_Value>alarm_value)
 517   3                              {
 518   4                              //      PAREG = ~PAREG;
 519   4                                      detect_count++;
 520   4                                      if(detect_count>3)              //防止溢出
 521   4                                      detect_count = 3;
 522   4                                      if(detect_count==1)
 523   4                                      {
 524   5                                              detect_time = DETECT_TIME1;
 525   5                                              TMR3L = 0x80;           //间隔2s
 526   5                                              TMR3H = 0xc1; 
 527   5                                              TMR3C |= 0x08;          //开启计数
 528   5                                      }
 529   4                                      else if(detect_count==2)
 530   4                                      {
 531   5                                              detect_time = DETECT_TIME2;
 532   5                                              TMR3L = 0xc0;           //间隔1s
 533   5                                              TMR3H = 0xe0; 
 534   5                                              TMR3C |= 0x08;          //开启计数
 535   5                                      }
 536   4                                      else
 537   4                                      {
 538   5                                              detect_time = DETECT_TIME3;
 539   5                              //              if(alarm_flag==0)
 540   5                                              {
 541   6                                                      TMR3L = 0x60;           //间隔0.5
 542   6                                                      TMR3H = 0xf0; 
 543   6                                                      TMR3C |= 0x08;          //开启计数
 544   6                                              }
 545   5                                              alarm_flag = 1;
 546   5                                              bz_timer = BZ_TIME;
 547   5      //                                      PAREG = ~PAREG;
 548   5                                      }
 549   4                                      led_falg = 1;
 550   4                                      if(!self_check_flag)
 551   4                                      alarm_value = QUIT_ALARM_VALUE;
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 10  

 552   4      
 553   4                                      
 554   4                              }
 555   3                              else     //火警取消，恢复初始
 556   3                              {
 557   4                                      detect_count = 0;
 558   4                                      detect_time = DETECT_TIME1;
 559   4                                      alarm_value = FIRE_ALARM_VALUE;
 560   4                                      alarm_flag = 0;
 561   4                                      bz_timer = 0;
 562   4                                      PWM_CTRL &= ~0x01;
 563   4                                      sleep_flag = 1;
 564   4                                      bz_step = 0;
 565   4                                      TMR3L = 0x00;           //休眠8s
 566   4                                      TMR3H = 0x06; 
 567   4                                      TMR3C |= 0x08;          //开启计数
 568   4                              }
 569   3                      }
 570   2                      else             //消音状态下,开启8s定时器
 571   2                      {
 572   3                              TMR3L = 0x00;           //休眠8s
 573   3                              TMR3H = 0x06; 
 574   3                              TMR3C |= 0x08;          //开启计数
 575   3                      }
 576   2                      led_timer++;
 577   2                      if(!silince_flag)
 578   2                      {
 579   3                              if(led_timer>=LED_TIME_NORMAL)
 580   3                              {
 581   4                                      led_falg = 1;
 582   4                                      led_timer = 0;
 583   4                              }
 584   3                      }
 585   2                      else
 586   2                      {
 587   3                              if(led_timer>=LED_TIME_SLIENCDE)
 588   3                              {
 589   4                                      led_falg = 1;
 590   4                                      led_timer = 0;
 591   4                              }
 592   3                      }                        
 593   2              } 
 594   1      }
*** WARNING C280 IN LINE 254 OF MAIN.C: 'i': unreferenced local variable
 595          
 596          
 597          void BZ_Process()
 598          {
 599   1              if((bz_timer>=BZ_TIME)&&(alarm_flag))                     //报警声音处理
 600   1              {
 601   2                      led_falg = 1;
 602   2                      bz_timer = 0;
 603   2                      lvd_time = 0;                     //报警时低压报警时间清零
 604   2                      if(PWM_CTRL&0x01)
 605   2                      {
 606   3                              PWM_CTRL &= ~0x01;
 607   3                              sleep_flag = 1;
 608   3                      }
 609   2                      else
 610   2                      {
 611   3                              if(bz_step>=8)
 612   3                              bz_step = 7;
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 11  

 613   3                              PWM_PULSE0L = BZ_Freq[bz_step]&0x00ff;
 614   3                              PWM_PULSE0H = BZ_Freq[bz_step]>>8;
 615   3                              PWM_CTRL |= 0x40;
 616   3                              PWM_CTRL |= 0x01;
 617   3                              bz_step++;
 618   3                              sleep_flag = 0;
 619   3                      }
 620   2              }
 621   1      }
 622          
 623          
 624          
 625          void Key_Process()
 626          {
 627   1              if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 628   1              {
 629   2                      delay_20us(250);
 630   2                      if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 631   2                      {
 632   3                              key_flag = 1;
 633   3                              
 634   3                              if(alarm_flag==1)                 //消音
 635   3                              {
 636   4                                      silince_flag = 1;
 637   4                                      alarm_value = SLIENCDE_VALUE;
 638   4                                      detect_count = 0;
 639   4                                      detect_time = DETECT_TIME1;
 640   4                                      timer_flag = 0;
 641   4                                      alarm_flag = 0;
 642   4                                      PWM_CTRL &= ~0x01;                 //关闭蜂鸣器
 643   4                                      sleep_flag = 1;
 644   4                                      bz_timer = 0;
 645   4                                      TMR3C &= ~0x08;         //关闭计数器
 646   4                                      delay_20us(20);
 647   4                                      TMR3L = 0x00;           //间隔8s
 648   4                                      TMR3H = 0x06; 
 649   4                                      TMR3C |= 0x08;
 650   4      
 651   4                              }
 652   3                              else                                      //自检
 653   3                              {
 654   4                                      self_check_flag = 1;
 655   4                                      alarm_value = SLEF_CHECK_VALUE;
 656   4                                      detect_count = 2;
 657   4                                      detect_time = DETECT_TIME3;
 658   4                                      timer_flag = 1;
 659   4      
 660   4                                      if(silince_flag)
 661   4                                      silince_time_bak = silince_time;
 662   4      
 663   4                                      TMR3C &= ~0x08;         //关闭计数器
 664   4                                      delay_20us(20);
 665   4                                      TMR3L = 0x60;           //间隔0.5s
 666   4                                      TMR3H = 0xf0; 
 667   4                                      TMR3C |= 0x08;
 668   4      
 669   4                              }
 670   3                      }       
 671   2              }
 672   1              else if(((PAREG&0x40))&&(key_flag))
 673   1              {
 674   2                      delay_20us(250);
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 12  

 675   2                      if(((PAREG&0x40))&&(key_flag))    //按键松开
 676   2                      {
 677   3                              key_flag = 0;
 678   3                              alarm_flag = 0;
 679   3                              PWM_CTRL &= ~0x01;
 680   3                              bz_step = 0;
 681   3                              if(!silince_flag)
 682   3                              alarm_value = FIRE_ALARM_VALUE;
 683   3                              detect_count = 0;
 684   3                              detect_time = DETECT_TIME1;
 685   3                              sleep_flag = 1;
 686   3                              self_check_flag = 0;
 687   3                              lvd_time = 0;
 688   3      
 689   3                              if(silince_flag)
 690   3                              silince_time = silince_time_bak;        
 691   3      
 692   3                              TMR3C &= ~0x08;         //关闭计数器
 693   3                              delay_20us(20);
 694   3                              TMR3L = 0x00;           //间隔8s
 695   3                              TMR3H = 0x06; 
 696   3                              TMR3C |= 0x08;
 697   3                      }
 698   2              }               
 699   1      
 700   1              if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 701   1              {
 702   2                      delay_20us(1);
 703   2                      if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 704   2                      {
 705   3                              rxd_flag = 1;
 706   3                              
 707   3                              MISC |= 0x80;   //复用uart口
 708   3                              SCON =  0X50;   //方式1,溢出率／３２
 709   3                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 710   3                              TMOD = 0x00;    //不分频，４Ｍ
 711   3                              TH1 =  0X00;
 712   3                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 713   3                              TTCON = 0x2a;
 714   3                              INTMH &= ~0x02;
 715   3                              comm_step = 0;
 716   3                              timer_flag = 0xaa;      //进行一次采样
 717   3                              LED_ON();
 718   3                              while(rxd_flag==1);
 719   3                              if(rxd_flag==4)           //读报警阈值  
 720   3                              {
 721   4                                      timer_flag = 0;
 722   4                                      SBUF = alarm_value;
 723   4                                      while(rxd_flag);
 724   4                                      INTMH |= 0x02;
 725   4                                      MISC &= ~0x80;  //复用IO口
 726   4                              }
 727   3                              
 728   3                      }
 729   2              } 
 730   1      }
 731          
 732          
 733          void Other_Process()
 734          {
 735   1              if(silince_time>=SLIENCDE_TIME)           //消音时间到
 736   1              {
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 13  

 737   2                      silince_flag = 0;
 738   2                      silince_time = 0;
 739   2                      silince_time_bak = 0;
 740   2                      alarm_value = FIRE_ALARM_VALUE; 
 741   2                      lvd_time = 0;
 742   2              }
 743   1      
 744   1              if(led_falg)
 745   1              {
 746   2                      led_falg = 0;
 747   2                      LED_ON();
 748   2                      delay_20us(250);
 749   2                      LED_OFF();
 750   2              }       
 751   1      //      if((!silince_flag)&&(!alarm_flag)&&(lvd_time>=LVD_TIME))           //低压报警
 752   1              if((!alarm_flag)&&(lvd_time>=LVD_TIME))
 753   1              {     
 754   2      
 755   2                      lvd_time = 0;
 756   2                      PWM_PULSE0L = 0x50;
 757   2                      PWM_PULSE0H = 0x02;
 758   2                      PWM_CTRL |= 0x40;
 759   2                      PWM_CTRL |= 0x01;
 760   2                      LED_ON();
 761   2                      delay_20us(250);
 762   2                      LED_OFF();
 763   2                      delay_20us(250);
 764   2                      PWM_CTRL &= ~0x01;
 765   2              }
 766   1      }
 767          
 768          
 769          void Sleep()
 770          {
 771   1              if(((SYS_REG4&0x10)==0x00)&&(sleep_flag))
 772   1              {
 773   2      //              sleep_flag = 0;
 774   2                      
 775   2                      BANDGAP_TEMP = 0X04; //关闭bandgap
 776   2                      LDO2_CTRL = 0x00;//关闭LDO2             
 777   2      //              delay_20us(20);
 778   2                      if(PAREG&0x40)            //未按按键开启pA6,pA1唤醒
 779   2                      WAKE_EN = 0x42;           //
 780   2                      PCON |= 0X02;   //mcu_stop                      
 781   2                      _nop_();
 782   2                      _nop_();
 783   2                      _nop_();
 784   2                      _nop_(); 
 785   2                  WAKE_EN = 0x00;     //关闭pA7唤醒
 786   2      //              PAREG = ~PAREG;
 787   2              
 788   2              } 
 789   1      
 790   1      }
 791          void delay_1ms(unsigned char N)
 792          {
 793   1          unsigned char i;
 794   1          while(N--)     //6cycle
 795   1          {
 796   2              for(i=250;i>0;i--);
 797   2          }
 798   1      
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 14  

 799   1      }
 800          void delay_20us(unsigned char N)
 801          {
 802   1          unsigned char i;
 803   1          while(N--)     //6cycle
 804   1          {
 805   2              for(i=5;i>0;i--);
 806   2          }
 807   1      
 808   1      }
 809          
 810          
 811          void isr0()     using 0    interrupt 0
 812          {
 813   1      //              
 814   1      /*      if(TBC_INT&0x01)        //TB0中断固定8s
 815   1              {
 816   1                      if(!fast_flag)
 817   1                      {
 818   1                              TBC_INT = 0x00;
 819   1                              timer_flag += 8;
 820   1                              if(silince_flag)
 821   1                              silince_time += 8;
 822   1                              if(lvd_flag)
 823   1                          lvd_time += 8;
 824   1                      }
 825   1                      else
 826   1                      TBC_INT &= ~0x01;
 827   1              }
 828   1              if(TBC_INT&0x02)        //唤醒加快时开启，TB1中断0.5s 
 829   1              {
 830   1                      TBC_INT &= ~0x02;
 831   1                      timer_flag++;
 832   1                      bz_timer++;
 833   1                      if(silince_flag)
 834   1                      silince_time++;
 835   1                      if(lvd_flag)
 836   1                  lvd_time++; 
 837   1      
 838   1      
 839   1              } */
 840   1              if(TMRINT&0X02)
 841   1              {
 842   2                      TMRINT &= ~0X02;
 843   2                      if(Charge_Flag==0)         //非电容充电唤醒
 844   2                      {       
 845   3                              timer_flag++;
 846   3                              bz_timer++;
 847   3                              if(silince_flag)
 848   3                              silince_time++;
 849   3                              if(lvd_flag)
 850   3                          lvd_time++;
 851   3                      }
 852   2      //              PAREG = ~PAREG;
 853   2              }       
 854   1      }
 855          
 856          
 857          
 858          
 859          void isr1()     using 1    interrupt 2            //uart中断
 860          {
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 19:37:31 PAGE 15  

 861   1              unsigned char temp;
 862   1              if(SCON&0X01)     //接收完成
 863   1              {
 864   2                      SCON &= ~0X01;
 865   2                      temp = SBUF;
 866   2                      if(temp==0xaa)          //读烟雾值
 867   2                      rxd_flag = 2;
 868   2                      else if(temp==0xa0)             //读报警阈值
 869   2                      rxd_flag = 4;
 870   2                      else if(temp==0x55)             //标定
 871   2                      comm_step = 1;
 872   2                      else if (comm_step==1)
 873   2                      {
 874   3                              delta_value =  temp;
 875   3                              rxd_flag = 3;
 876   3                      }       
 877   2              }
 878   1              if(SCON&0X02)    //发送完成
 879   1              {
 880   2                      SCON &= ~0X02;
 881   2                      rxd_flag = 0;
 882   2              }
 883   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1575    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
