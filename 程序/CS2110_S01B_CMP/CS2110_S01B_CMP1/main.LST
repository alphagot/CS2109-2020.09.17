C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "DP80390CPU.H"
   2          #include "common.h"
   3          #include "register.h"
   4          #include "intrins.h"
   5          
   6          //#define FIRE_ALARM_VALUE   0x40
   7          //#define FIRE_ALARM_VALUE   10
   8          //#define QUIT_ALARM_VALUE   (FIRE_ALARM_VALUE-10)
   9          #define SLEF_CHECK_VALUE   0x00
  10          #define SLIENCDE_VALUE     0xFF
  11          
  12          #define SLIENCDE_TIME      50           //静音时间8*50/60=6.667ｓ
  13          #define DETECT_TIME1       1            //8s
  14          #define DETECT_TIME2       1            //2s
  15          #define DETECT_TIME3       2            //1s
  16          #define BZ_TIME                    1            //500ms
  17          #define LED_TIME_NORMAL    8            //正常64ｓ闪一次
  18          #define LED_TIME_SLIENCDE  1            //静音模式下8ｓ闪一次
  19          #define LVD_TIME               2                //低压报警时间4０ｓ 5*8
  20          
  21          
  22          #define LED_ON()        PCREG &= ~0x08
  23          #define LED_OFF()       PCREG |= 0x08
  24          
  25          
  26          //unsigned int code BZ_Freq[]={0x560,0x540,0x500,0x300,0x1E0};
  27          //unsigned int code BZ_Freq[]={0x4C0,0x4A0,0x400,0x380,0x270};  //50%占空比最响
  28          //unsigned int code BZ_Freq[]={0x09,0x08,0x07,0x06,0x05};
  29          unsigned int code BZ_Freq[]={0x495,0x490,0x480,0x460,0x430,0x3c0,0x320,0x250};  //50%占空比最响
  30          unsigned char code IRED_ADJ[]=
  31          {
  32          0x4f,0x4e,0x0f,0x0e,
  33          0x4d,0x4c,0x0d,0x0c,
  34          0x4b,0x4a,0x0b,0x0a,
  35          0x49,0x48,0x09,0x08,
  36          0x47,0x46,0x07,0x06,
  37          0x45,0x44,0x05,0x04,
  38          0x43,0x42,0x03,0x02,
  39          };               //发射电流由大变小
  40          unsigned char Smoke_Value;
  41          unsigned char Dark_Value;
  42          unsigned char timer_flag;
  43          unsigned char bz_timer;
  44          unsigned char bz_step;
  45          unsigned char alarm_flag;
  46          unsigned char alarm_value;
  47          unsigned char detect_time;
  48          unsigned char detect_count;
  49          unsigned char sleep_flag;
  50          unsigned char key_flag;
  51          unsigned char rxd_flag;
  52          unsigned char silince_flag;
  53          unsigned char led_falg;
  54          unsigned char led_timer;
  55          unsigned int  silince_time;
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 2   

  56          unsigned char self_check_flag;
  57          unsigned char lvd_flag;
  58          unsigned char lvd_time;
  59          unsigned char FIRE_ALARM_VALUE;
  60          unsigned char QUIT_ALARM_VALUE;
  61          unsigned char delta_value;
  62          unsigned char comm_step;
  63          unsigned char Battery_Value_H;
  64          unsigned char Battery_Value_L;
  65          unsigned int voltage_bak;
  66          unsigned char adjust_flag;
  67          unsigned char silince_time_bak;
  68          unsigned char IRED_Ptr;
  69          unsigned char Charge_Flag;
  70          
  71          
  72          void delay_1ms(unsigned char N);
  73          void delay_20us(unsigned char N);
  74          void Smoke_Detect();
  75          void BZ_Process();
  76          void Key_Process();
  77          void Other_Process();
  78          void Sleep();
  79          void MCU_Init();
  80          
  81          void main()
  82          {
  83   1              MCU_Init();
  84   1      
  85   1              timer_flag = 0;
  86   1              bz_timer = 0;
  87   1              bz_step = 0;
  88   1              alarm_flag = 0;
  89   1              detect_time = DETECT_TIME1;             //8s
  90   1              detect_count = 0;
  91   1              sleep_flag = 1;
  92   1              key_flag = 0;
  93   1              silince_time = 0;
  94   1              silince_time_bak = 0;
  95   1              silince_flag = 0;
  96   1              led_falg = 0;
  97   1              self_check_flag = 0;
  98   1              lvd_flag = 0;
  99   1              lvd_time = 0;
 100   1              comm_step = 0;
 101   1              voltage_bak = 0;
 102   1              IRED_Ptr = 14;          //设置指针初始位置
 103   1              Charge_Flag = 0;
 104   1              while(1)
 105   1              {       
 106   2                  //PAREG=~PAREG;
 107   2               //     PCREG=~PCREG;
 108   2                      WDCON |= 0x10;
 109   2                      //LDO2_CTRL = 0x00;
 110   2              //      Key_Process();
 111   2                //    Smoke_Detect();
 112   2          //  BZ_Process();
 113   2                 // Other_Process();
 114   2               // Sleep();
 115   2              
 116   2                        
 117   2              }       
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 3   

 118   1      
 119   1      
 120   1      }
 121          
 122          void MCU_Init()
 123          {
 124   1              unsigned char i,temp[2];
 125   1              SYS_REG_MASK = 0xA5;
 126   1              SYS_REG1 = 0x58;         //打开看门狗使能，打开低压复位，打开高速振荡器
 127   1              SYS_REG3 = 0x10;         //     
 128   1              SYS_REG2 = 0xC2;         //高速时钟4分频，空闲模式              
 129   1              SYS_REG4 = 0x0c;         //PWM用高速时钟4分频
 130   1      //      SYS_REG2 = 0x03;
 131   1      //      SYS_REG4 = 0x01;         //PWM用高速时钟
 132   1              LXT_START = 0X00;
 133   1      
 134   1              IE = 0x85;                                      //全局中断，int1(),int0()中断使能
 135   1              IP = 0x01;                                              //int0优先
 136   1              TCON = 0x05;                                    //int0,int1为沿触发     
 137   1                
 138   1              
 139   1      
 140   1              BANDGAP_TEMP = 0x05;
 141   1              LDO2_CTRL = 0X03;
 142   1      
 143   1      /*      
 144   1              PADIR = 0x04;
 145   1              PAPU = 0X00;
 146   1              PAREG = 0x00;
 147   1      
 148   1              PCDIR = 0x00;    //红色led等pc3
 149   1              PCPU = 0X00;
 150   1              PCREG = 0x00;
 151   1              //ADPCR = 0X30;
 152   1        */
 153   1        //  PCDIR = 0xFF;
 154   1      //      PADIR=0XFF;
 155   1      
 156   1              PBDIR = 0x08;                   //pb1输出低电平
 157   1              PBPU = ~0x08;                   //pb1不上拉
 158   1              PBREG = 0x00;
 159   1              PWM_PERIOD0L = 0x98;            //pwm周期为3.4KHz   时钟４Ｍ
 160   1              PWM_PERIOD0H = 0x04;
 161   1              //PWM_PERIOD0L = 0xe2;          //pwm周期为3.2KHz   时钟４Ｍ
 162   1      //      PWM_PERIOD0H = 0x04;                                                       
 163   1              DZ_CTRL = 0x05;                 //pwm0互补输出,全N模式
 164   1              PWM_CTRL = 0x40;                //pwm0装载，连续输出，初始电平为0  
 165   1      
 166   1              WAKEUP_EDGE_REG = 0x42;         //下降沿唤醒
 167   1      
 168   1      
 169   1      /*      IRED_CTRL = 0x09;               //设置发射电流为125ｍA
 170   1              MISC = 0x40;                    //pb6复用IRED  
 171   1              LCDC=0X71;
 172   1              LDOC=0X7E;       */
 173   1      /******************uart*********************/
 174   1      /*      MISC |= 0x80;   //复用uart口
 175   1              SCON =  0X40;   //方式1,溢出率／３２
 176   1              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 177   1              TMOD = 0x00;    //不分频，４Ｍ
 178   1              TH1 =  0X00;
 179   1              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 4   

 180   1              TTCON = 0x2a;      */
 181   1      /*******************************************/
 182   1      
 183   1        /*
 184   1              OPA1C0 = 0x23;          //积分增益为８倍
 185   1              OPA1C1 = 0x0c;          //OPA1连接红外接收管
 186   1              OPA1MODE = 0x04;        //设置成开环 */ 
 187   1      
 188   1              LVDC = 0x05;            //2.5V
 189   1      //      LVDC = 0x00;            //2.5V
 190   1      //      TBC = 0xa6;                //TBC开启2s定时
 191   1      //      TBC = 0x08;                //TBC0开启4s定时,TBC1关闭
 192   1      //      TBC = 0X40;
 193   1      //      TBC = 0x84;                //TBC开启0.5s定时
 194   1      //      INTML = 0xf7;      //TBC中断使能
 195   1      //      INTSEL0L = 0x08;   //TBC中断从int0进入  */ 
 196   1               
 197   1              TMR3C = 0X58;           //timer3使用低速时钟,并使能
 198   1              TMR3L = 0X00;
 199   1              TMR3H = 0X06;           //0.125ms*64000=8s
 200   1              INTML = 0XDF;
 201   1              INTSEL0L = 0X20;         
 202   1      
 203   1              WDCNTM = 0x38;
 204   1              WDCNTH = 0x01;          //8K时钟，10s钟
 205   1      //      WDCNTM = 0x38;
 206   1      //      WDCNTH = 0x00;
 207   1              WDCON = 0x28;           //开启看门狗复位功能
 208   1              WDCON |= 0x10;  
 209   1              OPA1C1=0X00;
 210   1      
 211   1              CMP1C0=0X20;
 212   1              CMP2C0=0X00;
 213   1              CMP1C1=0X1F; 
 214   1              CMP2C1=0x3F;  // 打开COMP2
 215   1        
 216   1      
 217   1          LDOC=0X10;
 218   1          LCDC=0X74;
 219   1      
 220   1              E2P_ADDRH=0x00; //起始地址
 221   1              E2P_ADDRL=0x00;
 222   1              E2P_CTRL = 0x10;
 223   1              for(i=0;i<2;i++)
 224   1              {
 225   2                 if(i<1)
 226   2                         E2P_CTRL=0x13;       //启动读
 227   2                 else
 228   2                         E2P_CTRL=0x11;       //启动度
 229   2                 while(!(E2P_FLAG&0x01));//判断是否写完
 230   2                 temp[i]=E2P_DATA;
 231   2              } 
 232   1              if(temp[0]!=(~temp[1]))
 233   1              {
 234   2                      FIRE_ALARM_VALUE = 0x60;
 235   2                      alarm_value = FIRE_ALARM_VALUE;
 236   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;               
 237   2              }
 238   1              else                                       //上电读取报警阈值
 239   1              {
 240   2                      FIRE_ALARM_VALUE = temp[0];
 241   2                      alarm_value = FIRE_ALARM_VALUE;
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 5   

 242   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;                         
 243   2              }                                         
 244   1              alarm_value = 0xc0;
 245   1              FIRE_ALARM_VALUE = 0xc0;
 246   1              LED_ON();
 247   1      
 248   1              delay_1ms(250);
 249   1              delay_1ms(250);
 250   1          delay_1ms(250);
 251   1          delay_1ms(250);                          
 252   1         
 253   1          LED_OFF();  
 254   1      }
 255          
 256          
 257          void Smoke_Detect()
 258          {        
 259   1         
 260   1              unsigned char i,temp[2];
 261   1              unsigned int vol;
 262   1              if(timer_flag>=detect_time)                               //8s检测一次
 263   1              {
 264   2                      timer_flag = 0;
 265   2                      WDCON |= 0x10;
 266   2                      BANDGAP_TEMP = 0x05;
 267   2                      LDO2_CTRL = 0x03;
 268   2      
 269   2      /*              SYS_REG2 = 0x02;        //切换成低频
 270   2                      _nop_();
 271   2                      _nop_();
 272   2                      _nop_();
 273   2                      _nop_();                
 274   2                      _nop_();
 275   2                      _nop_();
 276   2                      _nop_();
 277   2                      _nop_();
 278   2                      _nop_();
 279   2      
 280   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 281   2                      OPA1C1 |= 0x01;         //开启运放              
 282   2                      LDOC = 0x46;
 283   2                      _nop_();
 284   2                      _nop_();
 285   2                      _nop_();
 286   2                      _nop_();
 287   2      
 288   2                      SYS_REG2 = 0xc2;        //切换成高频
 289   2                      _nop_();
 290   2                      _nop_();
 291   2                      _nop_();
 292   2                      _nop_();
 293   2      //              delay_20us(100);                //运放稳定时间
 294   2      */
 295   2                      TMR3C &= ~0x08;         //关闭计数器
 296   2                      delay_20us(20);
 297   2                      TMR3L = 0xc0;           //休眠8ms
 298   2                      TMR3H = 0xff; 
 299   2                      TMR3C |= 0x08;          //开启计数器
 300   2                      Charge_Flag = 1;
 301   2                      PCON |= 0X02;   //mcu_stop,给电容充电                   
 302   2                      _nop_();
 303   2                      _nop_();
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 6   

 304   2                      _nop_();
 305   2                      _nop_();
 306   2                      TMR3C &= ~0x08;         //关闭计数器,到下面检测完成再开启
 307   2                      LDO2_CTRL = 0x00;//关闭LDO2
 308   2                      Charge_Flag = 0;
 309   2                                
 310   2      
 311   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 312   2                      OPA1C1 |= 0x01;         //开启运放              
 313   2                      LDOC = 0x46;
 314   2                      delay_20us(20);         //运放稳定时间
 315   2      /******************************电源电压检测*/
 316   2      /*              LDOC |= 0x20;           //打开LDO到ADC基准
 317   2                      LCDC |= 0X70;
 318   2                      LDOC |= 0X10;
 319   2                      ADCR = 0x3b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 320   2      //              ADCR = 0x2b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 321   2                      for(i=0;i<5;i++)
 322   2                      {
 323   2                              ADCR |= 0x80;
 324   2                              ADCR &= ~0x80;          //启动ADC检测
 325   2                              while(ADCR&0x40);       //等待ADC检测结束
 326   2                      }
 327   2                      Battery_Value_H = ADRH;
 328   2                      Battery_Value_L = ADRL;
 329   2                      ADCR = 0x00;
 330   2                      LDOC &= ~0x20;          
 331   2                      LDOC &= ~0X10;
 332   2                      LCDC &= ~0X70; */
 333   2      
 334   2              //      4096*2.4*2;//2560为3V,每85个字为0.1V
 335   2                      vol = (((unsigned int)Battery_Value_H)<<4);
 336   2                      vol += (unsigned int)Battery_Value_L>>4;
 337   2      
 338   2      
 339   2       
 340   2                      if(voltage_bak==0x00)   //首次检测
 341   2                      {
 342   3                              adjust_flag = 1;
 343   3                              voltage_bak = vol;      //保存上一次校准时的电压
 344   3                      }
 345   2                      else
 346   2                      {
 347   3                              if((vol>=(voltage_bak+8))||(vol<=(voltage_bak-8)))      //迟滞10mv
 348   3                              {
 349   4                                      adjust_flag = 1;
 350   4                                      voltage_bak = vol;      //保存上一次校准时的电压
 351   4                              }       
 352   3                      }
 353   2      
 354   2                      if(adjust_flag)
 355   2                      {
 356   3                              adjust_flag = 0;
 357   3                              temp[0] = 24;
 358   3      
 359   3                              if(vol>2688)            //大于3.15V
 360   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr+1];
 361   3                              else if((vol>2474)&&(vol<=2688))                //大于2.9V
 362   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr];
 363   3                              else if((vol>2389)&&(vol<=2474))                //大于2.8V
 364   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-1];
 365   3                              else if((vol>2304)&&(vol<=2389))                //大于2.7V
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 7   

 366   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-2];
 367   3                              else if((vol>2218)&&(vol<=2304))                //大于2.6V
 368   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-3];
 369   3                              else if((vol>2176)&&(vol<=2218))                //大于2.55V
 370   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-4];
 371   3                              else if((vol>2133)&&(vol<=2176))                //大于2.5V
 372   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-5];
 373   3                              else if((vol>2090)&&(vol<=2133))                //大于2.45V
 374   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-7]; 
 375   3                              else if((vol>2048)&&(vol<=2090))                //大于2.4V
 376   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-9];
 377   3                              else if((vol>2005)&&(vol<=2048))                //大于2.35V
 378   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-11];
 379   3      
 380   3                      }       
 381   2                      
 382   2      
 383   2      
 384   2      /****************************************************/
 385   2      //              temp[0] = 10;
 386   2      
 387   2      /*              OPA1MODE |= 0x01;       //Sw_integ
 388   2      
 389   2      //              for(i=temp[0];i>0;i--);
 390   2                      delay_20us(5);
 391   2      
 392   2                      OPA1MODE |= 0x02;
 393   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 394   2                      LDOC |= 0x20;           //打开LDO到ADC基准       
 395   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 396   2                      ADCR |= 0x80;
 397   2                      ADCR &= ~0x80;          //启动ADC检测
 398   2                      while(ADCR&0x40);       //等待ADC检测结束
 399   2                      Dark_Value = ADRH;      //暗电流检测，取ADC高8位
 400   2                      ADCR = 0x00;
 401   2                      LDOC &= ~0x20;
 402   2                      OPA1MODE &= ~0x03;
 403   2      
 404   2      /*****************必须按照该时序**************/         
 405   2      /*              OPA1MODE |= 0x02;
 406   2                      IRED_CTRL |= 0x20;      //IRED使能
 407   2                      OPA1MODE &= ~0x02;
 408   2                      OPA1MODE |= 0x01;       //Sw_integ
 409   2      
 410   2      //              for(i=temp[0];i>0;i--);
 411   2                      delay_20us(5);
 412   2      
 413   2                      OPA1MODE |= 0x02;        
 414   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 415   2      /********************************************/
 416   2      
 417   2      /*              LVDC |= 0x10;   //开启低压检测,需提前开启
 418   2      
 419   2                      LDOC |= 0x20;
 420   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 421   2                      ADCR |= 0x80;
 422   2                      ADCR &= ~0x80;          //启动ADC检测
 423   2                      while(ADCR&0x40);       //等待ADC检测结束
 424   2                      Smoke_Value = ADRH;     //光电流检测，取ADC高8位
 425   2                      ADCR = 0x00;
 426   2                      LDOC = 0x00;
 427   2                      //LED_ON();
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 8   

 428   2                      if(LVDC&0x20)
 429   2                      {
 430   2                          
 431   2                              lvd_flag = 1;
 432   2                      }
 433   2                      else
 434   2                      {
 435   2                              lvd_flag = 0;
 436   2                              lvd_time = 0;
 437   2                      }
 438   2                      LVDC &= ~0x10;  //关闭低压检测
 439   2              /*      if (lvd_flag)
 440   2                        {
 441   2      
 442   2                          MISC |= 0x80;       //复用uart口
 443   2                              SCON =  0X50;   //方式1,溢出率／３２
 444   2                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 445   2                              TMOD = 0x00;    //不分频，４Ｍ
 446   2                              TH1 =  0X00;
 447   2                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 448   2                              TTCON = 0x2a;
 449   2                              INTMH &= ~0x02;
 450   2                              SBUF= 0X55;
 451   2                              while(!(SCON&0X02));
 452   2                              SCON &= ~0X02;
 453   2                              INTMH |= 0x02;
 454   2                              MISC &= ~0x80;  //复用IO口
 455   2      
 456   2                         }  */
 457   2      /*              OPA1MODE = 0x04;        //关闭所有开关并配置成开环模式
 458   2                      BANDGAP_TEMP = 0x04;
 459   2              //      LDO2_CTRL = 0x00;//关闭LDO2
 460   2                      OPA1C1 &= ~0x01;        //关闭运放        */
 461   2                      
 462   2      
 463   2                      if(Smoke_Value>=Dark_Value)
 464   2                      Smoke_Value = Smoke_Value - Dark_Value;
 465   2                      else
 466   2                      Smoke_Value = 0;
 467   2      
 468   2      
 469   2      //              Smoke_Value = 0xff;
 470   2      
 471   2      //              if(rxd_flag==2)         //读烟雾值
 472   2              /*      {       
 473   2                          MISC |= 0x80;       //复用uart口
 474   2                              SCON =  0X50;   //方式1,溢出率／３２
 475   2                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 476   2                              TMOD = 0x00;    //不分频，４Ｍ
 477   2                              TH1 =  0X00;
 478   2                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 479   2                              TTCON = 0x2a;
 480   2                              INTMH &= ~0x02;
 481   2                              rxd_flag = 1;
 482   2                              //SBUF =0x11;
 483   2                              //SBUF = Smoke_Value;
 484   2                              SBUF = Battery_Value_H;
 485   2                      /*      while(rxd_flag);
 486   2                              rxd_flag = 1;
 487   2                              SBUF = Battery_Value_L; 
 488   2                              while(rxd_flag);
 489   2                              INTMH |= 0x02;
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 9   

 490   2                              MISC &= ~0x80;  //复用IO口
 491   2                      } */
 492   2              /*      else if(rxd_flag==3)      //标定
 493   2                      {
 494   2                              temp[0] = Smoke_Value + delta_value;
 495   2                              temp[1] = ~temp[0];
 496   2                              E2P_ADDRH=0x00; //E2地址
 497   2                              E2P_ADDRL=0x00;
 498   2                              E2P_CTRL = 0x20;
 499   2                              for(i=0;i<2;i++)
 500   2                              {
 501   2                                 E2P_DATA=temp[i];//数据
 502   2                                 if(i<1)
 503   2                                         E2P_CTRL=0x23;       //启动写
 504   2                                 else
 505   2                                         E2P_CTRL=0x21;       //启动写最后一个字节
 506   2                                 while(!(E2P_FLAG&0x02));//判断是否写完       
 507   2                              } 
 508   2              //              FIRE_ALARM_VALUE = Smoke_Value + delta_value;
 509   2              //              QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;
 510   2              //              alarm_value = FIRE_ALARM_VALUE;
 511   2      
 512   2                              IRED_CTRL = delta_value;
 513   2      
 514   2                              SBUF = Smoke_Value + delta_value;
 515   2                              while(rxd_flag);
 516   2                              INTMH |= 0x02;
 517   2                              MISC &= ~0x80;  //复用IO口
 518   2                      } */
 519   2      
 520   2                      if((!silince_flag)||(self_check_flag))          //非消音状态或者自检
 521   2                      {
 522   3                              if(Smoke_Value>alarm_value)
 523   3                              {
 524   4                              //      PAREG = ~PAREG;
 525   4                                      detect_count++;
 526   4                                      if(detect_count>3)              //防止溢出
 527   4                                      detect_count = 3;
 528   4                                      if(detect_count==1)
 529   4                                      {
 530   5                                              detect_time = DETECT_TIME1;
 531   5                                              TMR3L = 0x80;           //间隔2s
 532   5                                              TMR3H = 0xc1; 
 533   5                                              TMR3C |= 0x08;          //开启计数
 534   5                                      }
 535   4                                      else if(detect_count==2)
 536   4                                      {
 537   5                                              detect_time = DETECT_TIME2;
 538   5                                              TMR3L = 0xc0;           //间隔1s
 539   5                                              TMR3H = 0xe0; 
 540   5                                              TMR3C |= 0x08;          //开启计数
 541   5                                      }
 542   4                                      else
 543   4                                      {
 544   5                                              detect_time = DETECT_TIME3;
 545   5                              //              if(alarm_flag==0)
 546   5                                              {
 547   6                                                      TMR3L = 0x60;           //间隔0.5
 548   6                                                      TMR3H = 0xf0; 
 549   6                                                      TMR3C |= 0x08;          //开启计数
 550   6                                              }
 551   5                                              alarm_flag = 1;
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 10  

 552   5                                              bz_timer = BZ_TIME;
 553   5      //                                      PAREG = ~PAREG;
 554   5                                      }
 555   4                                      led_falg = 1;
 556   4                                      if(!self_check_flag)
 557   4                                      alarm_value = QUIT_ALARM_VALUE;
 558   4      
 559   4                                      
 560   4                              }
 561   3                              else     //火警取消，恢复初始
 562   3                              {
 563   4                                      detect_count = 0;
 564   4                                      detect_time = DETECT_TIME1;
 565   4                                      alarm_value = FIRE_ALARM_VALUE;
 566   4                                      alarm_flag = 0;
 567   4                                      bz_timer = 0;
 568   4                                      PWM_CTRL &= ~0x01;
 569   4                                      sleep_flag = 1;
 570   4                                      bz_step = 0;
 571   4                                      TMR3L = 0x00;           //休眠8s
 572   4                                      TMR3H = 0x06; 
 573   4                                      TMR3C |= 0x08;          //开启计数
 574   4                              }
 575   3                      }
 576   2                      else             //消音状态下,开启8s定时器
 577   2                      {
 578   3                              TMR3L = 0x00;           //休眠8s
 579   3                              TMR3H = 0x06; 
 580   3                              TMR3C |= 0x08;          //开启计数
 581   3                      }
 582   2                      led_timer++;
 583   2                      if(!silince_flag)
 584   2                      {
 585   3                              if(led_timer>=LED_TIME_NORMAL)
 586   3                              {
 587   4                                      led_falg = 1;
 588   4                                      led_timer = 0;
 589   4                              }
 590   3                      }
 591   2                      else
 592   2                      {
 593   3                              if(led_timer>=LED_TIME_SLIENCDE)
 594   3                              {
 595   4                                      led_falg = 1;
 596   4                                      led_timer = 0;
 597   4                              }
 598   3                      }                        
 599   2              } 
 600   1      }
*** WARNING C280 IN LINE 260 OF MAIN.C: 'i': unreferenced local variable
 601          
 602          
 603          void BZ_Process()
 604          {
 605   1              if((bz_timer>=BZ_TIME)&&(alarm_flag))                     //报警声音处理
 606   1              {
 607   2                      led_falg = 1;
 608   2                      bz_timer = 0;
 609   2                      lvd_time = 0;                     //报警时低压报警时间清零
 610   2                      if(PWM_CTRL&0x01)
 611   2                      {
 612   3                              PWM_CTRL &= ~0x01;
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 11  

 613   3                              sleep_flag = 1;
 614   3                      }
 615   2                      else
 616   2                      {
 617   3                              if(bz_step>=8)
 618   3                              bz_step = 7;
 619   3                              PWM_PULSE0L = BZ_Freq[bz_step]&0x00ff;
 620   3                              PWM_PULSE0H = BZ_Freq[bz_step]>>8;
 621   3                              PWM_CTRL |= 0x40;
 622   3                              PWM_CTRL |= 0x01;
 623   3                              bz_step++;
 624   3                              sleep_flag = 0;
 625   3                      }
 626   2              }
 627   1      }
 628          
 629          
 630          
 631          void Key_Process()
 632          {
 633   1              if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 634   1              {
 635   2                      delay_20us(250);
 636   2                      if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 637   2                      {
 638   3                              key_flag = 1;
 639   3                              
 640   3                              if(alarm_flag==1)                 //消音
 641   3                              {
 642   4                                      silince_flag = 1;
 643   4                                      alarm_value = SLIENCDE_VALUE;
 644   4                                      detect_count = 0;
 645   4                                      detect_time = DETECT_TIME1;
 646   4                                      timer_flag = 0;
 647   4                                      alarm_flag = 0;
 648   4                                      PWM_CTRL &= ~0x01;                 //关闭蜂鸣器
 649   4                                      sleep_flag = 1;
 650   4                                      bz_timer = 0;
 651   4                                      TMR3C &= ~0x08;         //关闭计数器
 652   4                                      delay_20us(20);
 653   4                                      TMR3L = 0x00;           //间隔8s
 654   4                                      TMR3H = 0x06; 
 655   4                                      TMR3C |= 0x08;
 656   4      
 657   4                              }
 658   3                              else                                      //自检
 659   3                              {
 660   4                                      self_check_flag = 1;
 661   4                                      alarm_value = SLEF_CHECK_VALUE;
 662   4                                      detect_count = 2;
 663   4                                      detect_time = DETECT_TIME3;
 664   4                                      timer_flag = 1;
 665   4      
 666   4                                      if(silince_flag)
 667   4                                      silince_time_bak = silince_time;
 668   4      
 669   4                                      TMR3C &= ~0x08;         //关闭计数器
 670   4                                      delay_20us(20);
 671   4                                      TMR3L = 0x60;           //间隔0.5s
 672   4                                      TMR3H = 0xf0; 
 673   4                                      TMR3C |= 0x08;
 674   4      
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 12  

 675   4                              }
 676   3                      }       
 677   2              }
 678   1              else if(((PAREG&0x40))&&(key_flag))
 679   1              {
 680   2                      delay_20us(250);
 681   2                      if(((PAREG&0x40))&&(key_flag))    //按键松开
 682   2                      {
 683   3                              key_flag = 0;
 684   3                              alarm_flag = 0;
 685   3                              PWM_CTRL &= ~0x01;
 686   3                              bz_step = 0;
 687   3                              if(!silince_flag)
 688   3                              alarm_value = FIRE_ALARM_VALUE;
 689   3                              detect_count = 0;
 690   3                              detect_time = DETECT_TIME1;
 691   3                              sleep_flag = 1;
 692   3                              self_check_flag = 0;
 693   3                              lvd_time = 0;
 694   3      
 695   3                              if(silince_flag)
 696   3                              silince_time = silince_time_bak;        
 697   3      
 698   3                              TMR3C &= ~0x08;         //关闭计数器
 699   3                              delay_20us(20);
 700   3                              TMR3L = 0x00;           //间隔8s
 701   3                              TMR3H = 0x06; 
 702   3                              TMR3C |= 0x08;
 703   3                      }
 704   2              }               
 705   1      
 706   1              if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 707   1              {
 708   2                      delay_20us(1);
 709   2                      if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 710   2                      {
 711   3                              rxd_flag = 1;
 712   3                              
 713   3                              MISC |= 0x80;   //复用uart口
 714   3                              SCON =  0X50;   //方式1,溢出率／３２
 715   3                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 716   3                              TMOD = 0x00;    //不分频，４Ｍ
 717   3                              TH1 =  0X00;
 718   3                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 719   3                              TTCON = 0x2a;
 720   3                              INTMH &= ~0x02;
 721   3                              comm_step = 0;
 722   3                              timer_flag = 0xaa;      //进行一次采样
 723   3                              LED_ON();
 724   3                              while(rxd_flag==1);
 725   3                              if(rxd_flag==4)           //读报警阈值  
 726   3                              {
 727   4                                      timer_flag = 0;
 728   4                                      SBUF = alarm_value;
 729   4                                      while(rxd_flag);
 730   4                                      INTMH |= 0x02;
 731   4                                      MISC &= ~0x80;  //复用IO口
 732   4                              }
 733   3                              
 734   3                      }
 735   2              } 
 736   1      }
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 13  

 737          
 738          
 739          void Other_Process()
 740          {
 741   1              if(silince_time>=SLIENCDE_TIME)           //消音时间到
 742   1              {
 743   2                      silince_flag = 0;
 744   2                      silince_time = 0;
 745   2                      silince_time_bak = 0;
 746   2                      alarm_value = FIRE_ALARM_VALUE; 
 747   2                      lvd_time = 0;
 748   2              }
 749   1      
 750   1              if(led_falg)
 751   1              {
 752   2                      led_falg = 0;
 753   2                      LED_ON();
 754   2                      delay_20us(250);
 755   2                      LED_OFF();
 756   2              }       
 757   1      //      if((!silince_flag)&&(!alarm_flag)&&(lvd_time>=LVD_TIME))           //低压报警
 758   1              if((!alarm_flag)&&(lvd_time>=LVD_TIME))
 759   1              {     
 760   2      
 761   2                      lvd_time = 0;
 762   2                      PWM_PULSE0L = 0x50;
 763   2                      PWM_PULSE0H = 0x02;
 764   2                      PWM_CTRL |= 0x40;
 765   2                      PWM_CTRL |= 0x01;
 766   2                      LED_ON();
 767   2                      delay_20us(250);
 768   2                      LED_OFF();
 769   2                      delay_20us(250);
 770   2                      PWM_CTRL &= ~0x01;
 771   2              }
 772   1      }
 773          
 774          
 775          void Sleep()
 776          {
 777   1              if(((SYS_REG4&0x10)==0x00)&&(sleep_flag))
 778   1              {
 779   2      //              sleep_flag = 0;
 780   2                      
 781   2                      BANDGAP_TEMP = 0X04; //关闭bandgap
 782   2                      LDO2_CTRL = 0x00;//关闭LDO2             
 783   2      //              delay_20us(20);
 784   2                      if(PAREG&0x40)            //未按按键开启pA6,pA1唤醒
 785   2                      WAKE_EN = 0x42;           //
 786   2                      PCON |= 0X02;   //mcu_stop                      
 787   2                      _nop_();
 788   2                      _nop_();
 789   2                      _nop_();
 790   2                      _nop_(); 
 791   2                  WAKE_EN = 0x00;     //关闭pA7唤醒
 792   2      //              PAREG = ~PAREG;
 793   2              
 794   2              } 
 795   1      
 796   1      }
 797          void delay_1ms(unsigned char N)
 798          {
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 14  

 799   1          unsigned char i;
 800   1          while(N--)     //6cycle
 801   1          {
 802   2              for(i=250;i>0;i--);
 803   2          }
 804   1      
 805   1      }
 806          void delay_20us(unsigned char N)
 807          {
 808   1          unsigned char i;
 809   1          while(N--)     //6cycle
 810   1          {
 811   2              for(i=5;i>0;i--);
 812   2          }
 813   1      
 814   1      }
 815          
 816          
 817          void isr0()     using 0    interrupt 0
 818          {
 819   1      //              
 820   1      /*      if(TBC_INT&0x01)        //TB0中断固定8s
 821   1              {
 822   1                      if(!fast_flag)
 823   1                      {
 824   1                              TBC_INT = 0x00;
 825   1                              timer_flag += 8;
 826   1                              if(silince_flag)
 827   1                              silince_time += 8;
 828   1                              if(lvd_flag)
 829   1                          lvd_time += 8;
 830   1                      }
 831   1                      else
 832   1                      TBC_INT &= ~0x01;
 833   1              }
 834   1              if(TBC_INT&0x02)        //唤醒加快时开启，TB1中断0.5s 
 835   1              {
 836   1                      TBC_INT &= ~0x02;
 837   1                      timer_flag++;
 838   1                      bz_timer++;
 839   1                      if(silince_flag)
 840   1                      silince_time++;
 841   1                      if(lvd_flag)
 842   1                  lvd_time++; 
 843   1      
 844   1      
 845   1              } */
 846   1              if(TMRINT&0X02)
 847   1              {
 848   2                      TMRINT &= ~0X02;
 849   2                      if(Charge_Flag==0)         //非电容充电唤醒
 850   2                      {       
 851   3                              timer_flag++;
 852   3                              bz_timer++;
 853   3                              if(silince_flag)
 854   3                              silince_time++;
 855   3                              if(lvd_flag)
 856   3                          lvd_time++;
 857   3                      }
 858   2      //              PAREG = ~PAREG;
 859   2              }       
 860   1      }
C51 COMPILER V8.08   MAIN                                                                  07/26/2018 20:33:55 PAGE 15  

 861          
 862          
 863          
 864          
 865          void isr1()     using 1    interrupt 2            //uart中断
 866          {
 867   1              unsigned char temp;
 868   1              if(SCON&0X01)     //接收完成
 869   1              {
 870   2                      SCON &= ~0X01;
 871   2                      temp = SBUF;
 872   2                      if(temp==0xaa)          //读烟雾值
 873   2                      rxd_flag = 2;
 874   2                      else if(temp==0xa0)             //读报警阈值
 875   2                      rxd_flag = 4;
 876   2                      else if(temp==0x55)             //标定
 877   2                      comm_step = 1;
 878   2                      else if (comm_step==1)
 879   2                      {
 880   3                              delta_value =  temp;
 881   3                              rxd_flag = 3;
 882   3                      }       
 883   2              }
 884   1              if(SCON&0X02)    //发送完成
 885   1              {
 886   2                      SCON &= ~0X02;
 887   2                      rxd_flag = 0;
 888   2              }
 889   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1602    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
