C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "DP80390CPU.H"
   2          #include "common.h"
   3          #include "register.h"
   4          #include "intrins.h"
   5          
   6          //#define FIRE_ALARM_VALUE   0x40
   7          //#define FIRE_ALARM_VALUE   10
   8          //#define QUIT_ALARM_VALUE   (FIRE_ALARM_VALUE-10)
   9          #define SLEF_CHECK_VALUE   0x00
  10          #define SLIENCDE_VALUE     0xFF
  11          
  12          #define SLIENCDE_TIME      50           //静音时间8*50/60=6.667ｓ
  13          #define DETECT_TIME1       1            //8s
  14          #define DETECT_TIME2       1            //2s
  15          #define DETECT_TIME3       2            //1s
  16          #define BZ_TIME                    1            //500ms
  17          #define LED_TIME_NORMAL    8            //正常64ｓ闪一次
  18          #define LED_TIME_SLIENCDE  1            //静音模式下8ｓ闪一次
  19          #define LVD_TIME               5                //低压报警时间4０ｓ
  20          
  21          
  22          #define LED_ON()        PCREG &= ~0x08
  23          #define LED_OFF()       PCREG |= 0x08
  24          
  25          
  26          //unsigned int code BZ_Freq[]={0x560,0x540,0x500,0x300,0x1E0};
  27          //unsigned int code BZ_Freq[]={0x4C0,0x4A0,0x400,0x380,0x270};  //50%占空比最响
  28          //unsigned int code BZ_Freq[]={0x09,0x08,0x07,0x06,0x05};
  29          unsigned int code BZ_Freq[]={0x495,0x490,0x480,0x460,0x430,0x3c0,0x320,0x250};  //50%占空比最响
  30          unsigned char code IRED_ADJ[]=
  31          {
  32          0x4f,0x4e,0x0f,0x0e,
  33          0x4d,0x4c,0x0d,0x0c,
  34          0x4b,0x4a,0x0b,0x0a,
  35          0x49,0x48,0x09,0x08,
  36          0x47,0x46,0x07,0x06,
  37          0x45,0x44,0x05,0x04,
  38          0x43,0x42,0x03,0x02,
  39          };               //发射电流由大变小
  40          unsigned char Smoke_Value;
  41          unsigned char Dark_Value;
  42          unsigned char timer_flag;
  43          unsigned char bz_timer;
  44          unsigned char bz_step;
  45          unsigned char alarm_flag;
  46          unsigned char alarm_value;
  47          unsigned char detect_time;
  48          unsigned char detect_count;
  49          unsigned char sleep_flag;
  50          unsigned char key_flag;
  51          unsigned char rxd_flag;
  52          unsigned char silince_flag;
  53          unsigned char led_falg;
  54          unsigned char led_timer;
  55          unsigned int  silince_time;
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 2   

  56          unsigned char self_check_flag;
  57          unsigned char lvd_flag;
  58          unsigned char lvd_time;
  59          unsigned char FIRE_ALARM_VALUE;
  60          unsigned char QUIT_ALARM_VALUE;
  61          unsigned char delta_value;
  62          unsigned char comm_step;
  63          unsigned char Battery_Value_H;
  64          unsigned char Battery_Value_L;
  65          unsigned int voltage_bak;
  66          unsigned char adjust_flag;
  67          unsigned char silince_time_bak;
  68          unsigned char IRED_Ptr;
  69          unsigned char Charge_Flag;
  70          unsigned char uartr_flag,uartadd,uartdate;
  71          unsigned char ADC_VALUE1;
  72          unsigned char ADC_VALUE2;
  73          
  74          
  75          
  76          void delay_20us(unsigned char N);
  77          void Smoke_Detect();
  78          void BZ_Process();
  79          void Key_Process();
  80          void Other_Process();
  81          void Sleep();
  82          void MCU_Init();
  83          void uart();
  84          void ser_int();
  85          
  86          
  87          void main()
  88          {
  89   1              MCU_Init();
  90   1              ser_int();
  91   1      
  92   1      
  93   1              timer_flag = 0;
  94   1              bz_timer = 0;
  95   1              bz_step = 0;
  96   1              alarm_flag = 0;
  97   1              detect_time = DETECT_TIME1;             //8s
  98   1              detect_count = 0;
  99   1              sleep_flag = 1;
 100   1              key_flag = 0;
 101   1              silince_time = 0;
 102   1              silince_time_bak = 0;
 103   1              silince_flag = 0;
 104   1              led_falg = 0;
 105   1              self_check_flag = 0;
 106   1              lvd_flag = 0;
 107   1              lvd_time = 0;
 108   1              comm_step = 0;
 109   1              voltage_bak = 0;
 110   1              IRED_Ptr = 14;          //设置指针初始位置
 111   1              Charge_Flag = 0;
 112   1              uartr_flag = 0;
 113   1              while(1)
 114   1              {
 115   2                      WDCON |= 0x10;
 116   2                      uart();
 117   2      
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 3   

 118   2      //              Key_Process();
 119   2      //              Smoke_Detect();
 120   2      //              BZ_Process();
 121   2      //              Other_Process();
 122   2      //              Sleep();                  
 123   2              }       
 124   1      
 125   1      
 126   1      }
 127          
 128          void MCU_Init()
 129          {
 130   1              unsigned char i,temp[2];
 131   1              SYS_REG_MASK = 0xA5;
 132   1              SYS_REG1 = 0x58;         //打开看门狗使能，打开低压复位，打开高速振荡器
 133   1              SYS_REG3 = 0x10;         //     
 134   1      //      SYS_REG2 = 0xC2;         //高速时钟4分频，空闲模式              
 135   1      //      SYS_REG4 = 0x0c;         //PWM用高速时钟4分频
 136   1              SYS_REG2 = 0x03;
 137   1              SYS_REG4 = 0x01;         //PWM用高速时钟
 138   1              LXT_START = 0X00;
 139   1      
 140   1              IE = 0x85;                                      //全局中断，int1(),int0()中断使能
 141   1              IP = 0x01;                                              //int0优先
 142   1              TCON = 0x05;                                    //int0,int1为沿触发     
 143   1                
 144   1              
 145   1      
 146   1              BANDGAP_TEMP = 0x05;
 147   1              LDO2_CTRL = 0X03;
 148   1      
 149   1              
 150   1              PADIR = 0x01;
 151   1              PAPU = 0XFe;
 152   1              PAREG = 0x00;
 153   1      
 154   1              PCDIR = 0x08;    //红色led等pc3
 155   1              PCPU = 0XF7;
 156   1              PCREG = 0x08;
 157   1              ADPCR = 0X30;
 158   1      
 159   1      
 160   1      
 161   1              PBDIR = 0x08;                   //pb1输出低电平
 162   1              PBPU = ~0x08;                   //pb1不上拉
 163   1              PBREG = 0x00;
 164   1              PWM_PERIOD0L = 0x98;            //pwm周期为3.4KHz   时钟４Ｍ
 165   1              PWM_PERIOD0H = 0x04;
 166   1      //      PWM_PERIOD0L = 0xe2;            //pwm周期为3.2KHz   时钟４Ｍ
 167   1      //      PWM_PERIOD0H = 0x04;                                                       
 168   1              DZ_CTRL = 0x05;                 //pwm0互补输出,全N模式
 169   1              PWM_CTRL = 0x40;                //pwm0装载，连续输出，初始电平为0  
 170   1      
 171   1              WAKEUP_EDGE_REG = 0x42;         //下降沿唤醒
 172   1      
 173   1      
 174   1              IRED_CTRL = 0x09;               //设置发射电流为125ｍA
 175   1              MISC = 0x80;                    //pb6不复用IRED，pa0复用TXD，pa1复用RXD  
 176   1      
 177   1      /******************uart*********************/
 178   1      /*      MISC |= 0x80;   //复用uart口
 179   1              SCON =  0X40;   //方式1,溢出率／３２
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 4   

 180   1              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 181   1              TMOD = 0x00;    //不分频，４Ｍ
 182   1              TH1 =  0X00;
 183   1              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 184   1              TTCON = 0x2a;      */
 185   1      /*******************************************/
 186   1      
 187   1      
 188   1              OPA1C0 = 0x23;          //积分增益为８倍
 189   1              OPA1C1 = 0x0c;          //OPA1连接红外接收管
 190   1              OPA1MODE = 0x04;        //设置成开环    
 191   1      
 192   1              LVDC = 0x05;            //2.5V
 193   1              
 194   1      //      TBC = 0xa6;                //TBC开启2s定时
 195   1      //      TBC = 0x08;                //TBC0开启4s定时,TBC1关闭
 196   1      //      TBC = 0X40;
 197   1      //      TBC = 0x84;                //TBC开启0.5s定时
 198   1      //      INTML = 0xf7;      //TBC中断使能
 199   1      //      INTSEL0L = 0x08;   //TBC中断从int0进入  */ 
 200   1               
 201   1              TMR3C = 0X58;           //timer3使用低速时钟,并使能
 202   1              TMR3L = 0X00;
 203   1              TMR3H = 0X06;           //0.125ms*64000=8s
 204   1              INTML = 0XDF;
 205   1              INTMH = 0x0D;      //uart中断使能
 206   1              INTSEL0L = 0X20;         
 207   1      
 208   1              WDCNTM = 0x38;
 209   1              WDCNTH = 0x01;          //8K时钟，10s钟
 210   1      //      WDCNTM = 0x38;
 211   1      //      WDCNTH = 0x00;
 212   1              WDCON = 0x28;           //开启看门狗复位功能
 213   1              WDCON |= 0x10;
 214   1              
 215   1              ADPCR |= 0x08;       //PB6为AN3输入
 216   1      //      BANDGAP_TEMP |= 0x02; //打开温度传感器
 217   1              LDOC=0X66;      //LDO 2.4v      
 218   1      
 219   1      
 220   1              E2P_ADDRH=0x00; //起始地址
 221   1              E2P_ADDRL=0x00;
 222   1              E2P_CTRL = 0x10;
 223   1              for(i=0;i<2;i++)
 224   1              {
 225   2                 if(i<1)
 226   2                         E2P_CTRL=0x13;       //启动读
 227   2                 else
 228   2                         E2P_CTRL=0x11;       //启动度
 229   2                 while(!(E2P_FLAG&0x01));//判断是否写完
 230   2                 temp[i]=E2P_DATA;
 231   2              } 
 232   1              if(temp[0]!=(~temp[1]))
 233   1              {
 234   2                      FIRE_ALARM_VALUE = 0x60;
 235   2                      alarm_value = FIRE_ALARM_VALUE;
 236   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;               
 237   2              }
 238   1              else                                       //上电读取报警阈值
 239   1              {
 240   2                      FIRE_ALARM_VALUE = temp[0];
 241   2                      alarm_value = FIRE_ALARM_VALUE;
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 5   

 242   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;                         
 243   2              }                                         
 244   1              alarm_value = 0xc0;
 245   1              FIRE_ALARM_VALUE = 0xc0;
 246   1      
 247   1      
 248   1              delay_20us(250);
 249   1              delay_20us(250);
 250   1              delay_20us(250);
 251   1              delay_20us(250);
 252   1              delay_20us(250);
 253   1              delay_20us(250);
 254   1              delay_20us(250);
 255   1              delay_20us(250);
 256   1              delay_20us(250);
 257   1              delay_20us(250);
 258   1              delay_20us(250);
 259   1              delay_20us(250);   
 260   1              
 261   1      }
 262          
 263          
 264          void Smoke_Detect()
 265          {        
 266   1         
 267   1              unsigned char i,temp[2];
 268   1              unsigned int vol;
 269   1              if(timer_flag>=detect_time)                               //8s检测一次
 270   1              {
 271   2                      timer_flag = 0;
 272   2                      WDCON |= 0x10;
 273   2                      BANDGAP_TEMP = 0x05;
 274   2                      LDO2_CTRL = 0x03;
 275   2      
 276   2      /*              SYS_REG2 = 0x02;        //切换成低频
 277   2                      _nop_();
 278   2                      _nop_();
 279   2                      _nop_();
 280   2                      _nop_();                
 281   2                      _nop_();
 282   2                      _nop_();
 283   2                      _nop_();
 284   2                      _nop_();
 285   2                      _nop_();
 286   2      
 287   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 288   2                      OPA1C1 |= 0x01;         //开启运放              
 289   2                      LDOC = 0x46;
 290   2                      _nop_();
 291   2                      _nop_();
 292   2                      _nop_();
 293   2                      _nop_();
 294   2      
 295   2                      SYS_REG2 = 0xc2;        //切换成高频
 296   2                      _nop_();
 297   2                      _nop_();
 298   2                      _nop_();
 299   2                      _nop_();
 300   2      //              delay_20us(100);                //运放稳定时间
 301   2      */
 302   2                      TMR3C &= ~0x08;         //关闭计数器
 303   2                      delay_20us(20);
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 6   

 304   2                      TMR3L = 0xc0;           //休眠8ms
 305   2                      TMR3H = 0xff; 
 306   2                      TMR3C |= 0x08;          //开启计数器
 307   2                      Charge_Flag = 1;
 308   2                      PCON |= 0X02;   //mcu_stop,给电容充电                   
 309   2                      _nop_();
 310   2                      _nop_();
 311   2                      _nop_();
 312   2                      _nop_();
 313   2                      TMR3C &= ~0x08;         //关闭计数器,到下面检测完成再开启
 314   2      //              LDO2_CTRL = 0x00;//关闭LDO2
 315   2                      Charge_Flag = 0;
 316   2                                
 317   2      
 318   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 319   2                      OPA1C1 |= 0x01;         //开启运放              
 320   2                      LDOC = 0x46;
 321   2                      delay_20us(20);         //运放稳定时间
 322   2      /******************************电源电压检测*/
 323   2                      LDOC |= 0x20;           //打开LDO到ADC基准
 324   2                      LCDC |= 0X70;
 325   2                      LDOC |= 0X10;
 326   2                      ADCR = 0x3b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 327   2      //              ADCR = 0x2b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 328   2                      for(i=0;i<5;i++)
 329   2                      {
 330   3                              ADCR |= 0x80;
 331   3                              ADCR &= ~0x80;          //启动ADC检测
 332   3                              while(ADCR&0x40);       //等待ADC检测结束
 333   3                      }
 334   2                      Battery_Value_H = ADRH;
 335   2                      Battery_Value_L = ADRL;
 336   2                      ADCR = 0x00;
 337   2                      LDOC &= ~0x20;          
 338   2                      LDOC &= ~0X10;
 339   2                      LCDC &= ~0X70;
 340   2      
 341   2              //      4096*2.4*2;//2560为3V,每85个字为0.1V
 342   2                      vol = (((unsigned int)Battery_Value_H)<<4);
 343   2                      vol += (unsigned int)Battery_Value_L>>4;
 344   2      
 345   2      
 346   2       
 347   2                      if(voltage_bak==0x00)   //首次检测
 348   2                      {
 349   3                              adjust_flag = 1;
 350   3                              voltage_bak = vol;      //保存上一次校准时的电压
 351   3                      }
 352   2                      else
 353   2                      {
 354   3                              if((vol>=(voltage_bak+8))||(vol<=(voltage_bak-8)))      //迟滞10mv
 355   3                              {
 356   4                                      adjust_flag = 1;
 357   4                                      voltage_bak = vol;      //保存上一次校准时的电压
 358   4                              }       
 359   3                      }
 360   2      
 361   2                      if(adjust_flag)
 362   2                      {
 363   3                              adjust_flag = 0;
 364   3                              temp[0] = 24;
 365   3      
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 7   

 366   3                              if(vol>2688)            //大于3.15V
 367   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr+1];
 368   3                              else if((vol>2474)&&(vol<=2688))                //大于2.9V
 369   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr];
 370   3                              else if((vol>2389)&&(vol<=2474))                //大于2.8V
 371   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-1];
 372   3                              else if((vol>2304)&&(vol<=2389))                //大于2.7V
 373   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-2];
 374   3                              else if((vol>2218)&&(vol<=2304))                //大于2.6V
 375   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-3];
 376   3                              else if((vol>2176)&&(vol<=2218))                //大于2.55V
 377   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-4];
 378   3                              else if((vol>2133)&&(vol<=2176))                //大于2.5V
 379   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-5];
 380   3                              else if((vol>2090)&&(vol<=2133))                //大于2.45V
 381   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-7]; 
 382   3                              else if((vol>2048)&&(vol<=2090))                //大于2.4V
 383   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-9];
 384   3                              else if((vol>2005)&&(vol<=2048))                //大于2.35V
 385   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-11];
 386   3      
 387   3                      }       
 388   2                      
 389   2      
 390   2      
 391   2      /****************************************************/
 392   2      //              temp[0] = 10;
 393   2                      BANDGAP_TEMP = 0x01;
 394   2                      OPA1MODE |= 0x01;       //Sw_integ
 395   2      
 396   2      //              for(i=temp[0];i>0;i--);
 397   2                      delay_20us(5);
 398   2      
 399   2                      OPA1MODE |= 0x02;
 400   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 401   2                      LDOC |= 0x20;           //打开LDO到ADC基准       
 402   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 403   2                      ADCR |= 0x80;
 404   2                      ADCR &= ~0x80;          //启动ADC检测
 405   2                      while(ADCR&0x40);       //等待ADC检测结束
 406   2                      Dark_Value = ADRH;      //暗电流检测，取ADC高8位
 407   2                      ADCR = 0x00;
 408   2                      LDOC &= ~0x20;
 409   2                      OPA1MODE &= ~0x03;
 410   2      
 411   2      /*****************必须按照该时序**************/         
 412   2                      OPA1MODE |= 0x02;
 413   2                      IRED_CTRL |= 0x20;      //IRED使能
 414   2                      OPA1MODE &= ~0x02;
 415   2                      OPA1MODE |= 0x01;       //Sw_integ
 416   2      
 417   2      //              for(i=temp[0];i>0;i--);
 418   2                      delay_20us(5);
 419   2      
 420   2                      OPA1MODE |= 0x02;        
 421   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 422   2      /********************************************/
 423   2      
 424   2                      LVDC |= 0x10;   //开启低压检测,需提前开启
 425   2      
 426   2                      LDOC |= 0x20;
 427   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 8   

 428   2                      ADCR |= 0x80;
 429   2                      ADCR &= ~0x80;          //启动ADC检测
 430   2                      while(ADCR&0x40);       //等待ADC检测结束
 431   2                      Smoke_Value = ADRH;     //光电流检测，取ADC高8位
 432   2                      ADCR = 0x00;
 433   2                      LDOC = 0x00;
 434   2                      //LED_ON();
 435   2                      if(LVDC&0x20)
 436   2                      {
 437   3                          
 438   3                              lvd_flag = 1;
 439   3                      }
 440   2                      else
 441   2                      {
 442   3                              lvd_flag = 0;
 443   3                              lvd_time = 0;
 444   3                      }
 445   2                      LVDC &= ~0x10;  //关闭低压检测
 446   2      
 447   2                      OPA1MODE = 0x04;        //关闭所有开关并配置成开环模式
 448   2                      BANDGAP_TEMP = 0x04;
 449   2                      LDO2_CTRL = 0x00;//关闭LDO2
 450   2                      OPA1C1 &= ~0x01;        //关闭运放
 451   2                      
 452   2      
 453   2                      if(Smoke_Value>=Dark_Value)
 454   2                      Smoke_Value = Smoke_Value - Dark_Value;
 455   2                      else
 456   2                      Smoke_Value = 0;
 457   2      
 458   2      
 459   2      //              Smoke_Value = 0xff;
 460   2      
 461   2                      if(rxd_flag==2)         //读烟雾值
 462   2                      {
 463   3                              SBUF = Smoke_Value;
 464   3                      /*      SBUF = Battery_Value_H;
 465   3                              while(rxd_flag);
 466   3                              rxd_flag = 1;
 467   3                              SBUF = Battery_Value_L;*/       
 468   3                              while(rxd_flag);
 469   3                              INTMH |= 0x02;
 470   3                              MISC &= ~0x80;  //复用IO口
 471   3                      }
 472   2                      else if(rxd_flag==3)      //标定
 473   2                      {
 474   3                              temp[0] = Smoke_Value + delta_value;
 475   3                              temp[1] = ~temp[0];
 476   3                              E2P_ADDRH=0x00; //E2地址
 477   3                              E2P_ADDRL=0x00;
 478   3                              E2P_CTRL = 0x20;
 479   3                              for(i=0;i<2;i++)
 480   3                              {
 481   4                                 E2P_DATA=temp[i];//数据
 482   4                                 if(i<1)
 483   4                                         E2P_CTRL=0x23;       //启动写
 484   4                                 else
 485   4                                         E2P_CTRL=0x21;       //启动写最后一个字节
 486   4                                 while(!(E2P_FLAG&0x02));//判断是否写完       
 487   4                              } 
 488   3              //              FIRE_ALARM_VALUE = Smoke_Value + delta_value;
 489   3              //              QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 9   

 490   3              //              alarm_value = FIRE_ALARM_VALUE;
 491   3      
 492   3                              IRED_CTRL = delta_value;
 493   3      
 494   3                              SBUF = Smoke_Value + delta_value;
 495   3                              while(rxd_flag);
 496   3                              INTMH |= 0x02;
 497   3                              MISC &= ~0x80;  //复用IO口
 498   3                      }
 499   2      
 500   2                      if((!silince_flag)||(self_check_flag))          //非消音状态或者自检
 501   2                      {
 502   3                              if(Smoke_Value>alarm_value)
 503   3                              {
 504   4                              //      PAREG = ~PAREG;
 505   4                                      detect_count++;
 506   4                                      if(detect_count>3)              //防止溢出
 507   4                                      detect_count = 3;
 508   4                                      if(detect_count==1)
 509   4                                      {
 510   5                                              detect_time = DETECT_TIME1;
 511   5                                              TMR3L = 0x80;           //间隔2s
 512   5                                              TMR3H = 0xc1; 
 513   5                                              TMR3C |= 0x08;          //开启计数
 514   5                                      }
 515   4                                      else if(detect_count==2)
 516   4                                      {
 517   5                                              detect_time = DETECT_TIME2;
 518   5                                              TMR3L = 0xc0;           //间隔1s
 519   5                                              TMR3H = 0xe0; 
 520   5                                              TMR3C |= 0x08;          //开启计数
 521   5                                      }
 522   4                                      else
 523   4                                      {
 524   5                                              detect_time = DETECT_TIME3;
 525   5                              //              if(alarm_flag==0)
 526   5                                              {
 527   6                                                      TMR3L = 0x60;           //间隔0.5
 528   6                                                      TMR3H = 0xf0; 
 529   6                                                      TMR3C |= 0x08;          //开启计数
 530   6                                              }
 531   5                                              alarm_flag = 1;
 532   5                                              bz_timer = BZ_TIME;
 533   5      //                                      PAREG = ~PAREG;
 534   5                                      }
 535   4                                      led_falg = 1;
 536   4                                      if(!self_check_flag)
 537   4                                      alarm_value = QUIT_ALARM_VALUE;
 538   4      
 539   4                                      
 540   4                              }
 541   3                              else     //火警取消，恢复初始
 542   3                              {
 543   4                                      detect_count = 0;
 544   4                                      detect_time = DETECT_TIME1;
 545   4                                      alarm_value = FIRE_ALARM_VALUE;
 546   4                                      alarm_flag = 0;
 547   4                                      bz_timer = 0;
 548   4                                      PWM_CTRL &= ~0x01;
 549   4                                      sleep_flag = 1;
 550   4                                      bz_step = 0;
 551   4                                      TMR3L = 0x00;           //休眠8s
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 10  

 552   4                                      TMR3H = 0x06; 
 553   4                                      TMR3C |= 0x08;          //开启计数
 554   4                              }
 555   3                      }
 556   2                      else             //消音状态下,开启8s定时器
 557   2                      {
 558   3                              TMR3L = 0x00;           //休眠8s
 559   3                              TMR3H = 0x06; 
 560   3                              TMR3C |= 0x08;          //开启计数
 561   3                      }
 562   2                      led_timer++;
 563   2                      if(!silince_flag)
 564   2                      {
 565   3                              if(led_timer>=LED_TIME_NORMAL)
 566   3                              {
 567   4                                      led_falg = 1;
 568   4                                      led_timer = 0;
 569   4                              }
 570   3                      }
 571   2                      else
 572   2                      {
 573   3                              if(led_timer>=LED_TIME_SLIENCDE)
 574   3                              {
 575   4                                      led_falg = 1;
 576   4                                      led_timer = 0;
 577   4                              }
 578   3                      }                        
 579   2              } 
 580   1      }
 581          
 582          
 583          void BZ_Process()
 584          {
 585   1              if((bz_timer>=BZ_TIME)&&(alarm_flag))                     //报警声音处理
 586   1              {
 587   2                      led_falg = 1;
 588   2                      bz_timer = 0;
 589   2                      lvd_time = 0;                     //报警时低压报警时间清零
 590   2                      if(PWM_CTRL&0x01)
 591   2                      {
 592   3                              PWM_CTRL &= ~0x01;
 593   3                              sleep_flag = 1;
 594   3                      }
 595   2                      else
 596   2                      {
 597   3                              if(bz_step>=8)
 598   3                              bz_step = 7;
 599   3                              PWM_PULSE0L = BZ_Freq[bz_step]&0x00ff;
 600   3                              PWM_PULSE0H = BZ_Freq[bz_step]>>8;
 601   3                              PWM_CTRL |= 0x40;
 602   3                              PWM_CTRL |= 0x01;
 603   3                              bz_step++;
 604   3                              sleep_flag = 0;
 605   3                      }
 606   2              }
 607   1      }
 608          
 609          
 610          
 611          void Key_Process()
 612          {
 613   1              if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 11  

 614   1              {
 615   2                      delay_20us(250);
 616   2                      if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 617   2                      {
 618   3                              key_flag = 1;
 619   3                              
 620   3                              if(alarm_flag==1)                 //消音
 621   3                              {
 622   4                                      silince_flag = 1;
 623   4                                      alarm_value = SLIENCDE_VALUE;
 624   4                                      detect_count = 0;
 625   4                                      detect_time = DETECT_TIME1;
 626   4                                      timer_flag = 0;
 627   4                                      alarm_flag = 0;
 628   4                                      PWM_CTRL &= ~0x01;                 //关闭蜂鸣器
 629   4                                      sleep_flag = 1;
 630   4                                      bz_timer = 0;
 631   4                                      TMR3C &= ~0x08;         //关闭计数器
 632   4                                      delay_20us(20);
 633   4                                      TMR3L = 0x00;           //间隔8s
 634   4                                      TMR3H = 0x06; 
 635   4                                      TMR3C |= 0x08;
 636   4      
 637   4                              }
 638   3                              else                                      //自检
 639   3                              {
 640   4                                      self_check_flag = 1;
 641   4                                      alarm_value = SLEF_CHECK_VALUE;
 642   4                                      detect_count = 2;
 643   4                                      detect_time = DETECT_TIME3;
 644   4                                      timer_flag = 1;
 645   4      
 646   4                                      if(silince_flag)
 647   4                                      silince_time_bak = silince_time;
 648   4      
 649   4                                      TMR3C &= ~0x08;         //关闭计数器
 650   4                                      delay_20us(20);
 651   4                                      TMR3L = 0x60;           //间隔0.5s
 652   4                                      TMR3H = 0xf0; 
 653   4                                      TMR3C |= 0x08;
 654   4      
 655   4                              }
 656   3                      }       
 657   2              }
 658   1              else if(((PAREG&0x40))&&(key_flag))
 659   1              {
 660   2                      delay_20us(250);
 661   2                      if(((PAREG&0x40))&&(key_flag))    //按键松开
 662   2                      {
 663   3                              key_flag = 0;
 664   3                              alarm_flag = 0;
 665   3                              PWM_CTRL &= ~0x01;
 666   3                              bz_step = 0;
 667   3                              if(!silince_flag)
 668   3                              alarm_value = FIRE_ALARM_VALUE;
 669   3                              detect_count = 0;
 670   3                              detect_time = DETECT_TIME1;
 671   3                              sleep_flag = 1;
 672   3                              self_check_flag = 0;
 673   3                              lvd_time = 0;
 674   3      
 675   3                              if(silince_flag)
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 12  

 676   3                              silince_time = silince_time_bak;        
 677   3      
 678   3                              TMR3C &= ~0x08;         //关闭计数器
 679   3                              delay_20us(20);
 680   3                              TMR3L = 0x00;           //间隔8s
 681   3                              TMR3H = 0x06; 
 682   3                              TMR3C |= 0x08;
 683   3                      }
 684   2              }               
 685   1      
 686   1              if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 687   1              {
 688   2                      delay_20us(1);
 689   2                      if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 690   2                      {
 691   3                              rxd_flag = 1;
 692   3                              
 693   3                              MISC |= 0x80;   //复用uart口
 694   3                              SCON =  0X50;   //方式1,溢出率／３２
 695   3                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 696   3                              TMOD = 0x00;    //不分频，４Ｍ
 697   3                              TH1 =  0X00;
 698   3                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 699   3                              TTCON = 0x2a;
 700   3                              INTMH &= ~0x02;
 701   3                              comm_step = 0;
 702   3                              timer_flag = 0xaa;      //进行一次采样
 703   3                              while(rxd_flag==1);
 704   3                              if(rxd_flag==4)           //读报警阈值
 705   3                              {
 706   4                                      timer_flag = 0;
 707   4                                      SBUF = alarm_value;
 708   4                                      while(rxd_flag);
 709   4                                      INTMH |= 0x02;
 710   4                                      MISC &= ~0x80;  //复用IO口
 711   4                              }
 712   3                              
 713   3                      }
 714   2              } 
 715   1      }
 716          
 717          
 718          void Other_Process()
 719          {
 720   1              if(silince_time>=SLIENCDE_TIME)           //消音时间到
 721   1              {
 722   2                      silince_flag = 0;
 723   2                      silince_time = 0;
 724   2                      silince_time_bak = 0;
 725   2                      alarm_value = FIRE_ALARM_VALUE; 
 726   2                      lvd_time = 0;
 727   2              }
 728   1      
 729   1              if(led_falg)
 730   1              {
 731   2                      led_falg = 0;
 732   2                      LED_ON();
 733   2                      delay_20us(250);
 734   2                      LED_OFF();
 735   2              }       
 736   1      //      if((!silince_flag)&&(!alarm_flag)&&(lvd_time>=LVD_TIME))           //低压报警
 737   1              if((!alarm_flag)&&(lvd_time>=LVD_TIME))
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 13  

 738   1              {
 739   2                      lvd_time = 0;
 740   2                      PWM_PULSE0L = 0x50;
 741   2                      PWM_PULSE0H = 0x02;
 742   2                      PWM_CTRL |= 0x40;
 743   2                      PWM_CTRL |= 0x01;
 744   2                      LED_ON();
 745   2                      delay_20us(250);
 746   2                      LED_OFF();
 747   2                      delay_20us(250);
 748   2                      PWM_CTRL &= ~0x01;
 749   2              }
 750   1      }
 751          
 752          
 753          void Sleep()
 754          {
 755   1              if(((SYS_REG4&0x10)==0x00)&&(sleep_flag))
 756   1              {
 757   2      //              sleep_flag = 0;
 758   2                      
 759   2                      BANDGAP_TEMP = 0X04; //关闭bandgap
 760   2                      LDO2_CTRL = 0x00;//关闭LDO2             
 761   2      //              delay_20us(20);
 762   2                      if(PAREG&0x40)            //未按按键开启pA6,pA1唤醒
 763   2                      WAKE_EN = 0x42;           //
 764   2                      PCON |= 0X02;   //mcu_stop                      
 765   2                      _nop_();
 766   2                      _nop_();
 767   2                      _nop_();
 768   2                      _nop_(); 
 769   2                  WAKE_EN = 0x00;     //关闭pA7唤醒
 770   2      //              PAREG = ~PAREG;
 771   2              
 772   2              } 
 773   1      
 774   1      }
 775          void delay_20us(unsigned char N)
 776          {
 777   1          unsigned char i;
 778   1          while(N--)     //6cycle
 779   1          {
 780   2              for(i=5;i>0;i--);
 781   2          }
 782   1      
 783   1      }
 784          
 785          
 786          void isr0()     using 0    interrupt 0
 787          {
 788   1      //              
 789   1      /*      if(TBC_INT&0x01)        //TB0中断固定8s
 790   1              {
 791   1                      if(!fast_flag)
 792   1                      {
 793   1                              TBC_INT = 0x00;
 794   1                              timer_flag += 8;
 795   1                              if(silince_flag)
 796   1                              silince_time += 8;
 797   1                              if(lvd_flag)
 798   1                          lvd_time += 8;
 799   1                      }
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 14  

 800   1                      else
 801   1                      TBC_INT &= ~0x01;
 802   1              }
 803   1              if(TBC_INT&0x02)        //唤醒加快时开启，TB1中断0.5s 
 804   1              {
 805   1                      TBC_INT &= ~0x02;
 806   1                      timer_flag++;
 807   1                      bz_timer++;
 808   1                      if(silince_flag)
 809   1                      silince_time++;
 810   1                      if(lvd_flag)
 811   1                  lvd_time++; 
 812   1      
 813   1      
 814   1              } */
 815   1              if(TMRINT&0X02)
 816   1              {
 817   2                      TMRINT &= ~0X02;
 818   2                      if(Charge_Flag==0)         //非电容充电唤醒
 819   2                      {       
 820   3                              timer_flag++;
 821   3                              bz_timer++;
 822   3                              if(silince_flag)
 823   3                              silince_time++;
 824   3                              if(lvd_flag)
 825   3                          lvd_time++;
 826   3                      }
 827   2      //              PAREG = ~PAREG;
 828   2              }       
 829   1      }
 830          
 831          
 832          void ser_int()
 833          {       
 834   1              TH1 = 0x00;
 835   1              TL1 = 0x00;               
 836   1      //      TH0 = 0x00;
 837   1      //      TL0 = 0x01;     
 838   1              TTCON |= 0x02;    //T1定时周期配置有效
 839   1      //      TTCON |= 0x01;    //T0定时周期配置有效
 840   1              TMOD = 0x00;      //预分频系数1
 841   1              TTCON = 0x28;     //T1使能，T1计数使能
 842   1      //      TTCON = 0x14;     //T0使能，T1计数使能  
 843   1              TTMOD2 = 0x00;    //T1产生波特率，16位计数
 844   1      //      TTMOD2 = 0x30;    //T0产生波特率，16位计数
 845   1              SCON = 0x50;      //串口允许接收,串口工作模式1    
 846   1              SMOD = 0x01;      //波特率加倍
 847   1      }
 848          
 849          void uart()
 850          {
 851   1      /*      if(uartr_flag == 2)
 852   1              {
 853   1                      if(uartadd==0x68)
 854   1                      {
 855   1                              if(uartdate==0x81)
 856   1                              {
 857   1                                      delay_20us(1);
 858   1                                      SBUF = 0X55;
 859   1                                      uartr_flag = 0;
 860   1                              }
 861   1                              else
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:09:01 PAGE 15  

 862   1                              {       
 863   1                                      uartr_flag = 0;
 864   1                              }
 865   1                      }
 866   1                      else
 867   1                      {       
 868   1                              uartr_flag = 0;
 869   1                      }               
 870   1              }*/
 871   1              SBUF = 0X59;
 872   1              delay_20us(250);
 873   1      }
 874          
 875          
 876          
 877          void ser_uart() interrupt 2
 878          {
 879   1          //LED_ON()  ;
 880   1              if(SCON&0x01)
 881   1              {       
 882   2                 
 883   2                      SCON &= 0xfe;
 884   2                      uartdate = SBUF;
 885   2                      if(uartr_flag == 0)
 886   2                      {                       
 887   3                              uartadd = uartdate;
 888   3                              uartr_flag++;
 889   3                      }
 890   2                      else if(uartr_flag == 1)
 891   2                      {       
 892   3                              uartr_flag++;
 893   3                      }
 894   2              }
 895   1              else if(SCON&0x02)
 896   1              {               
 897   2                      SCON &= 0xfd;                                   
 898   2              }
 899   1      }
 900          
 901          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2084    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     37       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
