C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "DP80390CPU.H"
   2          #include "common.h"
   3          #include "register.h"
   4          #include "intrins.h"
   5          
   6          //#define FIRE_ALARM_VALUE   0x40
   7          //#define FIRE_ALARM_VALUE   10
   8          //#define QUIT_ALARM_VALUE   (FIRE_ALARM_VALUE-10)
   9          #define SLEF_CHECK_VALUE   0x00
  10          #define SLIENCDE_VALUE     0xFF
  11          
  12          #define SLIENCDE_TIME      50           //静音时间8*50/60=6.667ｓ
  13          #define DETECT_TIME1       1            //8s
  14          #define DETECT_TIME2       1            //2s
  15          #define DETECT_TIME3       2            //1s
  16          #define BZ_TIME                    1            //500ms
  17          #define LED_TIME_NORMAL    8            //正常64ｓ闪一次
  18          #define LED_TIME_SLIENCDE  1            //静音模式下8ｓ闪一次
  19          #define LVD_TIME               2                //低压报警时间4０ｓ
  20          
  21          
  22          #define LED_ON()        PCREG &= ~0x08
  23          #define LED_OFF()       PCREG |= 0x08
  24          
  25          
  26          //unsigned int code BZ_Freq[]={0x560,0x540,0x500,0x300,0x1E0};
  27          //unsigned int code BZ_Freq[]={0x4C0,0x4A0,0x400,0x380,0x270};  //50%占空比最响
  28          //unsigned int code BZ_Freq[]={0x09,0x08,0x07,0x06,0x05};
  29          unsigned int code BZ_Freq[]={0x495,0x490,0x480,0x460,0x430,0x3c0,0x320,0x250};  //50%占空比最响
  30          unsigned char code IRED_ADJ[]=
  31          {
  32          0x4f,0x4e,0x0f,0x0e,
  33          0x4d,0x4c,0x0d,0x0c,
  34          0x4b,0x4a,0x0b,0x0a,
  35          0x49,0x48,0x09,0x08,
  36          0x47,0x46,0x07,0x06,
  37          0x45,0x44,0x05,0x04,
  38          0x43,0x42,0x03,0x02,
  39          };               //发射电流由大变小
  40          unsigned char Smoke_Value;
  41          unsigned char Dark_Value;
  42          unsigned char timer_flag;
  43          unsigned char bz_timer;
  44          unsigned char bz_step;
  45          unsigned char alarm_flag;
  46          unsigned char alarm_value;
  47          unsigned char detect_time;
  48          unsigned char detect_count;
  49          unsigned char sleep_flag;
  50          unsigned char key_flag;
  51          unsigned char rxd_flag;
  52          unsigned char silince_flag;
  53          unsigned char led_falg;
  54          unsigned char led_timer;
  55          unsigned int  silince_time;
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 2   

  56          unsigned char self_check_flag;
  57          unsigned char lvd_flag;
  58          unsigned char lvd_time;
  59          unsigned char FIRE_ALARM_VALUE;
  60          unsigned char QUIT_ALARM_VALUE;
  61          unsigned char delta_value;
  62          unsigned char comm_step;
  63          unsigned char Battery_Value_H;
  64          unsigned char Battery_Value_L;
  65          unsigned int voltage_bak;
  66          unsigned char adjust_flag;
  67          unsigned char silince_time_bak;
  68          unsigned char IRED_Ptr;
  69          unsigned char Charge_Flag;
  70          
  71          
  72          
  73          void delay_20us(unsigned char N);
  74          void Smoke_Detect();
  75          void BZ_Process();
  76          void Key_Process();
  77          void Other_Process();
  78          void Sleep();
  79          void MCU_Init();
  80          
  81          void main()
  82          {
  83   1              MCU_Init();
  84   1      
  85   1              timer_flag = 0;
  86   1              bz_timer = 0;
  87   1              bz_step = 0;
  88   1              alarm_flag = 0;
  89   1              detect_time = DETECT_TIME1;             //8s
  90   1              detect_count = 0;
  91   1              sleep_flag = 1;
  92   1              key_flag = 0;
  93   1              silince_time = 0;
  94   1              silince_time_bak = 0;
  95   1              silince_flag = 0;
  96   1              led_falg = 0;
  97   1              self_check_flag = 0;
  98   1              lvd_flag = 0;
  99   1              lvd_time = 0;
 100   1              comm_step = 0;
 101   1              voltage_bak = 0;
 102   1              IRED_Ptr = 14;          //设置指针初始位置
 103   1              Charge_Flag = 0;
 104   1              while(1)
 105   1              {
 106   2      
 107   2                      Key_Process();
 108   2                      Smoke_Detect();
 109   2                      BZ_Process();
 110   2                      Other_Process();
 111   2                      Sleep();
 112   2              
 113   2                        
 114   2              }       
 115   1      
 116   1      
 117   1      }
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 3   

 118          
 119          void MCU_Init()
 120          {
 121   1              unsigned char i,temp[2];
 122   1              SYS_REG_MASK = 0xA5;
 123   1              SYS_REG1 = 0x58;         //打开看门狗使能，打开低压复位，打开高速振荡器
 124   1              SYS_REG3 = 0x10;         //     
 125   1      //      SYS_REG2 = 0xC2;         //高速时钟4分频，空闲模式              
 126   1      //      SYS_REG4 = 0x0c;         //PWM用高速时钟4分频
 127   1              SYS_REG2 = 0x03;
 128   1              SYS_REG4 = 0x01;         //PWM用高速时钟
 129   1              LXT_START = 0X00;
 130   1      
 131   1              IE = 0x85;                                      //全局中断，int1(),int0()中断使能
 132   1              IP = 0x01;                                              //int0优先
 133   1              TCON = 0x05;                                    //int0,int1为沿触发     
 134   1                
 135   1              
 136   1      
 137   1              BANDGAP_TEMP = 0x05;
 138   1              LDO2_CTRL = 0X03;
 139   1      
 140   1              
 141   1              PADIR = 0x01;
 142   1              PAPU = 0XFe;
 143   1              PAREG = 0x00;
 144   1      
 145   1              PCDIR = 0x08;    //红色led等pc3
 146   1              PCPU = 0XF7;
 147   1              PCREG = 0x08;
 148   1              ADPCR = 0X30;
 149   1      
 150   1      
 151   1      
 152   1              PBDIR = 0x08;                   //pb1输出低电平
 153   1              PBPU = ~0x08;                   //pb1不上拉
 154   1              PBREG = 0x00;
 155   1              PWM_PERIOD0L = 0x98;            //pwm周期为3.4KHz   时钟４Ｍ
 156   1              PWM_PERIOD0H = 0x04;
 157   1      //      PWM_PERIOD0L = 0xe2;            //pwm周期为3.2KHz   时钟４Ｍ
 158   1      //      PWM_PERIOD0H = 0x04;                                                       
 159   1              DZ_CTRL = 0x05;                 //pwm0互补输出,全N模式
 160   1              PWM_CTRL = 0x40;                //pwm0装载，连续输出，初始电平为0  
 161   1      
 162   1              WAKEUP_EDGE_REG = 0x42;         //下降沿唤醒
 163   1      
 164   1      
 165   1              IRED_CTRL = 0x09;               //设置发射电流为125ｍA
 166   1              MISC = 0x40;                    //pb6复用IRED  
 167   1      
 168   1      /******************uart*********************/
 169   1      /*      MISC |= 0x80;   //复用uart口
 170   1              SCON =  0X40;   //方式1,溢出率／３２
 171   1              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 172   1              TMOD = 0x00;    //不分频，４Ｍ
 173   1              TH1 =  0X00;
 174   1              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 175   1              TTCON = 0x2a;      */
 176   1      /*******************************************/
 177   1      
 178   1      
 179   1              OPA1C0 = 0x23;          //积分增益为８倍
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 4   

 180   1              OPA1C1 = 0x0c;          //OPA1连接红外接收管
 181   1              OPA1MODE = 0x04;        //设置成开环    
 182   1      
 183   1              LVDC = 0x05;            //2.5V
 184   1              
 185   1      //      TBC = 0xa6;                //TBC开启2s定时
 186   1      //      TBC = 0x08;                //TBC0开启4s定时,TBC1关闭
 187   1      //      TBC = 0X40;
 188   1      //      TBC = 0x84;                //TBC开启0.5s定时
 189   1      //      INTML = 0xf7;      //TBC中断使能
 190   1      //      INTSEL0L = 0x08;   //TBC中断从int0进入  */ 
 191   1               
 192   1              TMR3C = 0X58;           //timer3使用低速时钟,并使能
 193   1              TMR3L = 0X00;
 194   1              TMR3H = 0X06;           //0.125ms*64000=8s
 195   1              INTML = 0XDF;
 196   1              INTSEL0L = 0X20;         
 197   1      
 198   1              WDCNTM = 0x38;
 199   1              WDCNTH = 0x01;          //8K时钟，10s钟
 200   1      //      WDCNTM = 0x38;
 201   1      //      WDCNTH = 0x00;
 202   1              WDCON = 0x28;           //开启看门狗复位功能
 203   1              WDCON |= 0x10;  
 204   1      
 205   1      
 206   1              E2P_ADDRH=0x00; //起始地址
 207   1              E2P_ADDRL=0x00;
 208   1              E2P_CTRL = 0x10;
 209   1              for(i=0;i<2;i++)
 210   1              {
 211   2                 if(i<1)
 212   2                         E2P_CTRL=0x13;       //启动读
 213   2                 else
 214   2                         E2P_CTRL=0x11;       //启动度
 215   2                 while(!(E2P_FLAG&0x01));//判断是否写完
 216   2                 temp[i]=E2P_DATA;
 217   2              } 
 218   1              if(temp[0]!=(~temp[1]))
 219   1              {
 220   2                      FIRE_ALARM_VALUE = 0x60;
 221   2                      alarm_value = FIRE_ALARM_VALUE;
 222   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;               
 223   2              }
 224   1              else                                       //上电读取报警阈值
 225   1              {
 226   2                      FIRE_ALARM_VALUE = temp[0];
 227   2                      alarm_value = FIRE_ALARM_VALUE;
 228   2                      QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;                         
 229   2              }                                         
 230   1              alarm_value = 0xc0;
 231   1              FIRE_ALARM_VALUE = 0xc0;
 232   1      
 233   1      
 234   1      
 235   1              delay_20us(250);
 236   1              delay_20us(250);
 237   1              delay_20us(250);
 238   1              delay_20us(250);
 239   1              delay_20us(250);
 240   1              delay_20us(250);
 241   1              delay_20us(250);
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 5   

 242   1              delay_20us(250);
 243   1              delay_20us(250);
 244   1              delay_20us(250);
 245   1              delay_20us(250);
 246   1              delay_20us(250);   
 247   1              
 248   1      }
 249          
 250          
 251          void Smoke_Detect()
 252          {        
 253   1         
 254   1              unsigned char i,temp[2];
 255   1              unsigned int vol;
 256   1              if(timer_flag>=detect_time)                               //8s检测一次
 257   1              {
 258   2                      timer_flag = 0;
 259   2                      WDCON |= 0x10;
 260   2                      BANDGAP_TEMP = 0x05;
 261   2                      LDO2_CTRL = 0x03;
 262   2      
 263   2      /*              SYS_REG2 = 0x02;        //切换成低频
 264   2                      _nop_();
 265   2                      _nop_();
 266   2                      _nop_();
 267   2                      _nop_();                
 268   2                      _nop_();
 269   2                      _nop_();
 270   2                      _nop_();
 271   2                      _nop_();
 272   2                      _nop_();
 273   2      
 274   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 275   2                      OPA1C1 |= 0x01;         //开启运放              
 276   2                      LDOC = 0x46;
 277   2                      _nop_();
 278   2                      _nop_();
 279   2                      _nop_();
 280   2                      _nop_();
 281   2      
 282   2                      SYS_REG2 = 0xc2;        //切换成高频
 283   2                      _nop_();
 284   2                      _nop_();
 285   2                      _nop_();
 286   2                      _nop_();
 287   2      //              delay_20us(100);                //运放稳定时间
 288   2      */
 289   2                      TMR3C &= ~0x08;         //关闭计数器
 290   2                      delay_20us(20);
 291   2                      TMR3L = 0xc0;           //休眠8ms
 292   2                      TMR3H = 0xff; 
 293   2                      TMR3C |= 0x08;          //开启计数器
 294   2                      Charge_Flag = 1;
 295   2                      PCON |= 0X02;   //mcu_stop,给电容充电                   
 296   2                      _nop_();
 297   2                      _nop_();
 298   2                      _nop_();
 299   2                      _nop_();
 300   2                      TMR3C &= ~0x08;         //关闭计数器,到下面检测完成再开启
 301   2      //              LDO2_CTRL = 0x00;//关闭LDO2
 302   2                      Charge_Flag = 0;
 303   2                                
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 6   

 304   2      
 305   2                      OPA1MODE = 0x10;        //配置成积分模式,并打开200mv偏置
 306   2                      OPA1C1 |= 0x01;         //开启运放              
 307   2                      LDOC = 0x46;
 308   2                      delay_20us(20);         //运放稳定时间
 309   2      /******************************电源电压检测*/
 310   2                      LDOC |= 0x20;           //打开LDO到ADC基准
 311   2                      LCDC |= 0X70;
 312   2                      LDOC |= 0X10;
 313   2                      ADCR = 0x3b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 314   2      //              ADCR = 0x2b;            //打开ADC电源，选择内部2.4V为基准,测量AVDD电压
 315   2                      for(i=0;i<5;i++)
 316   2                      {
 317   3                              ADCR |= 0x80;
 318   3                              ADCR &= ~0x80;          //启动ADC检测
 319   3                              while(ADCR&0x40);       //等待ADC检测结束
 320   3                      }
 321   2                      Battery_Value_H = ADRH;
 322   2                      Battery_Value_L = ADRL;
 323   2                      ADCR = 0x00;
 324   2                      LDOC &= ~0x20;          
 325   2                      LDOC &= ~0X10;
 326   2                      LCDC &= ~0X70;
 327   2      
 328   2              //      4096*2.4*2;//2560为3V,每85个字为0.1V
 329   2                      vol = (((unsigned int)Battery_Value_H)<<4);
 330   2                      vol += (unsigned int)Battery_Value_L>>4;
 331   2      
 332   2      
 333   2       
 334   2                      if(voltage_bak==0x00)   //首次检测
 335   2                      {
 336   3                              adjust_flag = 1;
 337   3                              voltage_bak = vol;      //保存上一次校准时的电压
 338   3                      }
 339   2                      else
 340   2                      {
 341   3                              if((vol>=(voltage_bak+8))||(vol<=(voltage_bak-8)))      //迟滞10mv
 342   3                              {
 343   4                                      adjust_flag = 1;
 344   4                                      voltage_bak = vol;      //保存上一次校准时的电压
 345   4                              }       
 346   3                      }
 347   2      
 348   2                      if(adjust_flag)
 349   2                      {
 350   3                              adjust_flag = 0;
 351   3                              temp[0] = 24;
 352   3      
 353   3                              if(vol>2688)            //大于3.15V
 354   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr+1];
 355   3                              else if((vol>2474)&&(vol<=2688))                //大于2.9V
 356   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr];
 357   3                              else if((vol>2389)&&(vol<=2474))                //大于2.8V
 358   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-1];
 359   3                              else if((vol>2304)&&(vol<=2389))                //大于2.7V
 360   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-2];
 361   3                              else if((vol>2218)&&(vol<=2304))                //大于2.6V
 362   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-3];
 363   3                              else if((vol>2176)&&(vol<=2218))                //大于2.55V
 364   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-4];
 365   3                              else if((vol>2133)&&(vol<=2176))                //大于2.5V
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 7   

 366   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-5];
 367   3                              else if((vol>2090)&&(vol<=2133))                //大于2.45V
 368   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-7]; 
 369   3                              else if((vol>2048)&&(vol<=2090))                //大于2.4V
 370   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-9];
 371   3                              else if((vol>2005)&&(vol<=2048))                //大于2.35V
 372   3                              IRED_CTRL = IRED_ADJ[IRED_Ptr-11];
 373   3      
 374   3                      }       
 375   2                      
 376   2      
 377   2      
 378   2      /****************************************************/
 379   2      //              temp[0] = 10;
 380   2                      BANDGAP_TEMP = 0x01;
 381   2                      OPA1MODE |= 0x01;       //Sw_integ
 382   2      
 383   2      //              for(i=temp[0];i>0;i--);
 384   2                      delay_20us(5);
 385   2      
 386   2                      OPA1MODE |= 0x02;
 387   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 388   2                      LDOC |= 0x20;           //打开LDO到ADC基准       
 389   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 390   2                      ADCR |= 0x80;
 391   2                      ADCR &= ~0x80;          //启动ADC检测
 392   2                      while(ADCR&0x40);       //等待ADC检测结束
 393   2                      Dark_Value = ADRH;      //暗电流检测，取ADC高8位
 394   2                      ADCR = 0x00;
 395   2                      LDOC &= ~0x20;
 396   2                      OPA1MODE &= ~0x03;
 397   2      
 398   2      /*****************必须按照该时序**************/         
 399   2                      OPA1MODE |= 0x02;
 400   2                      IRED_CTRL |= 0x20;      //IRED使能
 401   2                      OPA1MODE &= ~0x02;
 402   2                      OPA1MODE |= 0x01;       //Sw_integ
 403   2      
 404   2      //              for(i=temp[0];i>0;i--);
 405   2                      delay_20us(5);
 406   2      
 407   2                      OPA1MODE |= 0x02;        
 408   2                      IRED_CTRL &= ~0x20;     //IRED关闭，积分保持
 409   2      /********************************************/
 410   2      
 411   2              
 412   2      
 413   2                      LDOC |= 0x20;
 414   2                      ADCR = 0x36;            //打开ADC电源，选择内部2.4V为基准
 415   2                      ADCR |= 0x80;
 416   2                      ADCR &= ~0x80;          //启动ADC检测
 417   2                      while(ADCR&0x40);       //等待ADC检测结束
 418   2                      Smoke_Value = ADRH;     //光电流检测，取ADC高8位
 419   2                      ADCR = 0x00;
 420   2                      LDOC = 0x00;
 421   2                      //LED_ON();
 422   2              
 423   2      
 424   2                      OPA1MODE = 0x04;        //关闭所有开关并配置成开环模式
 425   2                      BANDGAP_TEMP = 0x04;
 426   2                      LDO2_CTRL = 0x00;//关闭LDO2
 427   2                      OPA1C1 &= ~0x01;        //关闭运放
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 8   

 428   2                      
 429   2      
 430   2                      if(Smoke_Value>=Dark_Value)
 431   2                      Smoke_Value = Smoke_Value - Dark_Value;
 432   2                      else
 433   2                      Smoke_Value = 0;
 434   2                      LVDC |= 0x10;   //开启低压检测,需提前开启
 435   2                      delay_20us(250);
 436   2                              if(LVDC&0x20)
 437   2                      {
 438   3                          
 439   3                              lvd_flag = 1;
 440   3                      }
 441   2                      else
 442   2                      {
 443   3                              lvd_flag = 0;
 444   3                              lvd_time = 0;
 445   3                      }
 446   2                      LVDC &= ~0x10;  //关闭低压检测
 447   2      //              Smoke_Value = 0xff;
 448   2      
 449   2                      if(rxd_flag==2)         //读烟雾值
 450   2                      {
 451   3                              SBUF = Smoke_Value;
 452   3                      /*      SBUF = Battery_Value_H;
 453   3                              while(rxd_flag);
 454   3                              rxd_flag = 1;
 455   3                              SBUF = Battery_Value_L;*/       
 456   3                              while(rxd_flag);
 457   3                              INTMH |= 0x02;
 458   3                              MISC &= ~0x80;  //复用IO口
 459   3                      }
 460   2                      else if(rxd_flag==3)      //标定
 461   2                      {
 462   3                              temp[0] = Smoke_Value + delta_value;
 463   3                              temp[1] = ~temp[0];
 464   3                              E2P_ADDRH=0x00; //E2地址
 465   3                              E2P_ADDRL=0x00;
 466   3                              E2P_CTRL = 0x20;
 467   3                              for(i=0;i<2;i++)
 468   3                              {
 469   4                                 E2P_DATA=temp[i];//数据
 470   4                                 if(i<1)
 471   4                                         E2P_CTRL=0x23;       //启动写
 472   4                                 else
 473   4                                         E2P_CTRL=0x21;       //启动写最后一个字节
 474   4                                 while(!(E2P_FLAG&0x02));//判断是否写完       
 475   4                              } 
 476   3              //              FIRE_ALARM_VALUE = Smoke_Value + delta_value;
 477   3              //              QUIT_ALARM_VALUE = FIRE_ALARM_VALUE - 10;
 478   3              //              alarm_value = FIRE_ALARM_VALUE;
 479   3      
 480   3                              IRED_CTRL = delta_value;
 481   3      
 482   3                              SBUF = Smoke_Value + delta_value;
 483   3                              while(rxd_flag);
 484   3                              INTMH |= 0x02;
 485   3                              MISC &= ~0x80;  //复用IO口
 486   3                      }
 487   2      
 488   2                      if((!silince_flag)||(self_check_flag))          //非消音状态或者自检
 489   2                      {
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 9   

 490   3                              if(Smoke_Value>alarm_value)
 491   3                              {
 492   4                              //      PAREG = ~PAREG;
 493   4                                      detect_count++;
 494   4                                      if(detect_count>3)              //防止溢出
 495   4                                      detect_count = 3;
 496   4                                      if(detect_count==1)
 497   4                                      {
 498   5                                              detect_time = DETECT_TIME1;
 499   5                                              TMR3L = 0x80;           //间隔2s
 500   5                                              TMR3H = 0xc1; 
 501   5                                              TMR3C |= 0x08;          //开启计数
 502   5                                      }
 503   4                                      else if(detect_count==2)
 504   4                                      {
 505   5                                              detect_time = DETECT_TIME2;
 506   5                                              TMR3L = 0xc0;           //间隔1s
 507   5                                              TMR3H = 0xe0; 
 508   5                                              TMR3C |= 0x08;          //开启计数
 509   5                                      }
 510   4                                      else
 511   4                                      {
 512   5                                              detect_time = DETECT_TIME3;
 513   5                              //              if(alarm_flag==0)
 514   5                                              {
 515   6                                                      TMR3L = 0x60;           //间隔0.5
 516   6                                                      TMR3H = 0xf0; 
 517   6                                                      TMR3C |= 0x08;          //开启计数
 518   6                                              }
 519   5                                              alarm_flag = 1;
 520   5                                              bz_timer = BZ_TIME;
 521   5      //                                      PAREG = ~PAREG;
 522   5                                      }
 523   4                                      led_falg = 1;
 524   4                                      if(!self_check_flag)
 525   4                                      alarm_value = QUIT_ALARM_VALUE;
 526   4      
 527   4                                      
 528   4                              }
 529   3                              else     //火警取消，恢复初始
 530   3                              {
 531   4                                      detect_count = 0;
 532   4                                      detect_time = DETECT_TIME1;
 533   4                                      alarm_value = FIRE_ALARM_VALUE;
 534   4                                      alarm_flag = 0;
 535   4                                      bz_timer = 0;
 536   4                                      PWM_CTRL &= ~0x01;
 537   4                                      sleep_flag = 1;
 538   4                                      bz_step = 0;
 539   4                                      TMR3L = 0x00;           //休眠8s
 540   4                                      TMR3H = 0x06; 
 541   4                                      TMR3C |= 0x08;          //开启计数
 542   4                              }
 543   3                      }
 544   2                      else             //消音状态下,开启8s定时器
 545   2                      {
 546   3                              TMR3L = 0x00;           //休眠8s
 547   3                              TMR3H = 0x06; 
 548   3                              TMR3C |= 0x08;          //开启计数
 549   3                      }
 550   2                      led_timer++;
 551   2                      if(!silince_flag)
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 10  

 552   2                      {
 553   3                              if(led_timer>=LED_TIME_NORMAL)
 554   3                              {
 555   4                                      led_falg = 1;
 556   4                                      led_timer = 0;
 557   4                              }
 558   3                      }
 559   2                      else
 560   2                      {
 561   3                              if(led_timer>=LED_TIME_SLIENCDE)
 562   3                              {
 563   4                                      led_falg = 1;
 564   4                                      led_timer = 0;
 565   4                              }
 566   3                      }                        
 567   2              } 
 568   1      }
 569          
 570          
 571          void BZ_Process()
 572          {
 573   1              if((bz_timer>=BZ_TIME)&&(alarm_flag))                     //报警声音处理
 574   1              {
 575   2                      led_falg = 1;
 576   2                      bz_timer = 0;
 577   2                      lvd_time = 0;                     //报警时低压报警时间清零
 578   2                      if(PWM_CTRL&0x01)
 579   2                      {
 580   3                              PWM_CTRL &= ~0x01;
 581   3                              sleep_flag = 1;
 582   3                      }
 583   2                      else
 584   2                      {
 585   3                              if(bz_step>=8)
 586   3                              bz_step = 7;
 587   3                              PWM_PULSE0L = BZ_Freq[bz_step]&0x00ff;
 588   3                              PWM_PULSE0H = BZ_Freq[bz_step]>>8;
 589   3                              PWM_CTRL |= 0x40;
 590   3                              PWM_CTRL |= 0x01;
 591   3                              bz_step++;
 592   3                              sleep_flag = 0;
 593   3                      }
 594   2              }
 595   1      }
 596          
 597          
 598          
 599          void Key_Process()
 600          {
 601   1              if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 602   1              {
 603   2                      delay_20us(250);
 604   2                      if(((PAREG&0x40)==0x00)&&(!key_flag))            //按键按下
 605   2                      {
 606   3                              key_flag = 1;
 607   3                              
 608   3                              if(alarm_flag==1)                 //消音
 609   3                              {
 610   4                                      silince_flag = 1;
 611   4                                      alarm_value = SLIENCDE_VALUE;
 612   4                                      detect_count = 0;
 613   4                                      detect_time = DETECT_TIME1;
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 11  

 614   4                                      timer_flag = 0;
 615   4                                      alarm_flag = 0;
 616   4                                      PWM_CTRL &= ~0x01;                 //关闭蜂鸣器
 617   4                                      sleep_flag = 1;
 618   4                                      bz_timer = 0;
 619   4                                      TMR3C &= ~0x08;         //关闭计数器
 620   4                                      delay_20us(20);
 621   4                                      TMR3L = 0x00;           //间隔8s
 622   4                                      TMR3H = 0x06; 
 623   4                                      TMR3C |= 0x08;
 624   4      
 625   4                              }
 626   3                              else                                      //自检
 627   3                              {
 628   4                                      self_check_flag = 1;
 629   4                                      alarm_value = SLEF_CHECK_VALUE;
 630   4                                      detect_count = 2;
 631   4                                      detect_time = DETECT_TIME3;
 632   4                                      timer_flag = 1;
 633   4      
 634   4                                      if(silince_flag)
 635   4                                      silince_time_bak = silince_time;
 636   4      
 637   4                                      TMR3C &= ~0x08;         //关闭计数器
 638   4                                      delay_20us(20);
 639   4                                      TMR3L = 0x60;           //间隔0.5s
 640   4                                      TMR3H = 0xf0; 
 641   4                                      TMR3C |= 0x08;
 642   4      
 643   4                              }
 644   3                      }       
 645   2              }
 646   1              else if(((PAREG&0x40))&&(key_flag))
 647   1              {
 648   2                      delay_20us(250);
 649   2                      if(((PAREG&0x40))&&(key_flag))    //按键松开
 650   2                      {
 651   3                              key_flag = 0;
 652   3                              alarm_flag = 0;
 653   3                              PWM_CTRL &= ~0x01;
 654   3                              bz_step = 0;
 655   3                              if(!silince_flag)
 656   3                              alarm_value = FIRE_ALARM_VALUE;
 657   3                              detect_count = 0;
 658   3                              detect_time = DETECT_TIME1;
 659   3                              sleep_flag = 1;
 660   3                              self_check_flag = 0;
 661   3                              lvd_time = 0;
 662   3      
 663   3                              if(silince_flag)
 664   3                              silince_time = silince_time_bak;        
 665   3      
 666   3                              TMR3C &= ~0x08;         //关闭计数器
 667   3                              delay_20us(20);
 668   3                              TMR3L = 0x00;           //间隔8s
 669   3                              TMR3H = 0x06; 
 670   3                              TMR3C |= 0x08;
 671   3                      }
 672   2              }               
 673   1      
 674   1              if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 675   1              {
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 12  

 676   2                      delay_20us(1);
 677   2                      if(((PAREG&0x02)==0x00)&&(!rxd_flag))
 678   2                      {
 679   3                              rxd_flag = 1;
 680   3                              
 681   3                              MISC |= 0x80;   //复用uart口
 682   3                              SCON =  0X50;   //方式1,溢出率／３２
 683   3                              TTMOD2 = 0x00;  //使用timer1产生波特率，16位计数
 684   3                              TMOD = 0x00;    //不分频，４Ｍ
 685   3                              TH1 =  0X00;
 686   3                              TL1 = 0X0c;             //104ｕｓ，9600ｂｐｓ
 687   3                              TTCON = 0x2a;
 688   3                              INTMH &= ~0x02;
 689   3                              comm_step = 0;
 690   3                              timer_flag = 0xaa;      //进行一次采样
 691   3                              while(rxd_flag==1);
 692   3                              if(rxd_flag==4)           //读报警阈值
 693   3                              {
 694   4                                      timer_flag = 0;
 695   4                                      SBUF = alarm_value;
 696   4                                      while(rxd_flag);
 697   4                                      INTMH |= 0x02;
 698   4                                      MISC &= ~0x80;  //复用IO口
 699   4                              }
 700   3                              
 701   3                      }
 702   2              } 
 703   1      }
 704          
 705          
 706          void Other_Process()
 707          {
 708   1              if(silince_time>=SLIENCDE_TIME)           //消音时间到
 709   1              {
 710   2                      silince_flag = 0;
 711   2                      silince_time = 0;
 712   2                      silince_time_bak = 0;
 713   2                      alarm_value = FIRE_ALARM_VALUE; 
 714   2                      lvd_time = 0;
 715   2              }
 716   1      
 717   1              if(led_falg)
 718   1              {
 719   2                      led_falg = 0;
 720   2                      LED_ON();
 721   2                      delay_20us(250);
 722   2                      LED_OFF();
 723   2              }       
 724   1      //      if((!silince_flag)&&(!alarm_flag)&&(lvd_time>=LVD_TIME))           //低压报警
 725   1              if((!alarm_flag)&&(lvd_time>=LVD_TIME))
 726   1              {
 727   2                      lvd_time = 0;
 728   2                      PWM_PULSE0L = 0x50;
 729   2                      PWM_PULSE0H = 0x02;
 730   2                      PWM_CTRL |= 0x40;
 731   2                      PWM_CTRL |= 0x01;
 732   2                      LED_ON();
 733   2                      delay_20us(250);
 734   2                      LED_OFF();
 735   2                      delay_20us(250);
 736   2                      PWM_CTRL &= ~0x01;
 737   2              }
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 13  

 738   1      }
 739          
 740          
 741          void Sleep()
 742          {
 743   1              if(((SYS_REG4&0x10)==0x00)&&(sleep_flag))
 744   1              {
 745   2      //              sleep_flag = 0;
 746   2                      
 747   2                      BANDGAP_TEMP = 0X04; //关闭bandgap
 748   2                      LDO2_CTRL = 0x00;//关闭LDO2             
 749   2      //              delay_20us(20);
 750   2                      if(PAREG&0x40)            //未按按键开启pA6,pA1唤醒
 751   2                      WAKE_EN = 0x42;           //
 752   2                      PCON |= 0X02;   //mcu_stop                      
 753   2                      _nop_();
 754   2                      _nop_();
 755   2                      _nop_();
 756   2                      _nop_(); 
 757   2                  WAKE_EN = 0x00;     //关闭pA7唤醒
 758   2      //              PAREG = ~PAREG;
 759   2              
 760   2              } 
 761   1      
 762   1      }
 763          void delay_20us(unsigned char N)
 764          {
 765   1          unsigned char i;
 766   1          while(N--)     //6cycle
 767   1          {
 768   2              for(i=5;i>0;i--);
 769   2          }
 770   1      
 771   1      }
 772          
 773          
 774          void isr0()     using 0    interrupt 0
 775          {
 776   1      //              
 777   1      /*      if(TBC_INT&0x01)        //TB0中断固定8s
 778   1              {
 779   1                      if(!fast_flag)
 780   1                      {
 781   1                              TBC_INT = 0x00;
 782   1                              timer_flag += 8;
 783   1                              if(silince_flag)
 784   1                              silince_time += 8;
 785   1                              if(lvd_flag)
 786   1                          lvd_time += 8;
 787   1                      }
 788   1                      else
 789   1                      TBC_INT &= ~0x01;
 790   1              }
 791   1              if(TBC_INT&0x02)        //唤醒加快时开启，TB1中断0.5s 
 792   1              {
 793   1                      TBC_INT &= ~0x02;
 794   1                      timer_flag++;
 795   1                      bz_timer++;
 796   1                      if(silince_flag)
 797   1                      silince_time++;
 798   1                      if(lvd_flag)
 799   1                  lvd_time++; 
C51 COMPILER V8.08   MAIN                                                                  08/04/2020 17:03:14 PAGE 14  

 800   1      
 801   1      
 802   1              } */
 803   1              if(TMRINT&0X02)
 804   1              {
 805   2                      TMRINT &= ~0X02;
 806   2                      if(Charge_Flag==0)         //非电容充电唤醒
 807   2                      {       
 808   3                              timer_flag++;
 809   3                              bz_timer++;
 810   3                              if(silince_flag)
 811   3                              silince_time++;
 812   3                              if(lvd_flag)
 813   3                          lvd_time++;
 814   3                      }
 815   2      //              PAREG = ~PAREG;
 816   2              }       
 817   1      }
 818          
 819          
 820          
 821          
 822          void isr1()     using 1    interrupt 2            //uart中断
 823          {
 824   1              unsigned char temp;
 825   1              if(SCON&0X01)     //接收完成
 826   1              {
 827   2                      SCON &= ~0X01;
 828   2                      temp = SBUF;
 829   2                      if(temp==0xaa)          //读烟雾值
 830   2                      rxd_flag = 2;
 831   2                      else if(temp==0xa0)             //读报警阈值
 832   2                      rxd_flag = 4;
 833   2                      else if(temp==0x55)             //标定
 834   2                      comm_step = 1;
 835   2                      else if (comm_step==1)
 836   2                      {
 837   3                              delta_value =  temp;
 838   3                              rxd_flag = 3;
 839   3                      }       
 840   2              }
 841   1              if(SCON&0X02)    //发送完成
 842   1              {
 843   2                      SCON &= ~0X02;
 844   2                      rxd_flag = 0;
 845   2              }
 846   1      
 847   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2067    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
